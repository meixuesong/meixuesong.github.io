---
layout: post
title: "设计模式:状态模式"
date: 2014-08-18 20:22:06 +0800
comments: true
categories: 
- 设计模式
---
状态模式把对象的行为包装在不同的状态对象里，所有状态对象都属于抽象状态类的子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。类图示意如下：

![image](/myresource/images/image_blog_20140818_224041.jpg)

<!--more-->

1. State角色：定义接口，用于封装Context对象的一个特定的状态所对应的行为。
2. ConcreteState角色：每个具体状态类实现Context的一个状态所对应的行为。
3. Context角色：定义客户端所感兴趣的接口，并且保留一个具体状态类的实例，即当前的状态。上图中Context.someOperation的行为是委派给具体State类来执行的。当Context.state变化时，动态地将具体类指向另一个具体状态类，从而改变改变其行为。

### 什么情况下使用状态模式
1. 对象的行为依赖于它所处的状态，对象的行为必须随着其状态的改变而改变。
2. 对象在某个方法里依赖于一重或多重的条件转移语句，其中有大量的代码。状态模式可以把条件转移语句的每一个分支包装到一个状态类中。

TcpConnection就是一个状态模式的经典例子，TCP连接的三个状态（Established, Listening, Closed）分别对应三个状态类（TcpEstablished, TcpListen, TcpClosed）。

在绘图软件中，状态模式广泛用于建立编辑器框架。使客户端能够轻易地挂接新工具。

### 模式实现
状态的变化由谁来定义？状态模式并没有对此进行规定。可以由外部事件、Context控制或者具体State自行决定。

状态对象的创建和销毁，可以按需创建或者预先创建。

### 与其它模式的关系
状态模式与策略模式很相似，类图也很相似。但是策略模式的特点是，一旦环境类选择了一个具体策略，那么在其生命周期内就不会改变这个具体策略类。而状态模式在环境类的生命周期中会有多个不同的状态对象被使用。

——《Java与模式》读书笔记