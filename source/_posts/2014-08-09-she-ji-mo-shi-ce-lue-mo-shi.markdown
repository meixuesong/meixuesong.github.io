---
layout: post
title: "设计模式:策略模式"
date: 2014-08-09 22:55:42 +0800
comments: true
categories: 
- 设计模式
---

策略模式把行为和环境分割开。环境类负责维持和查询行为类，各种算法则在具体策略类中提供。由于算法和环境独立开来，算法的增减、修改都不会影响环境和客户端。准备一组算法，并将每一个算法封装起来，使得它们可以互换。策略模式的类图如下：

![image](/myresource/images/image_blog_20140809_230502.jpg)

<!--more-->
各角色如下：

1. 环境角色：持有一个Strategy类的引用。
2. 抽象策略角色：抽象角色，通常是接口或者抽象类，给出接口。
3. 具体策略角色：包装相关的算法或行为。通常具体策略角色会有多个。

从策略模式中是看不出具体策略适用于哪一种情况的，应当由客户端自己决定在什么情况下使用什么具体策略角色。策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中退出。

策略模式适合于在多个算法中选择一种的情形，不适用于需要多个算法或者嵌套多于一个算法的情形。

什么情况下使用策略模式？

1. 如果系统有很多类，它们之间的区别仅在于它们的行为，策略模式可动态地让一个对象在许多行为中选择一种行为。
2. 系统需要动态地在几种算法中选择一种。

策略模式的缺点：客户端必须知道所有的策略类，并自行决定使用哪一个策略类。

