---
layout: post
title: "设计模式:代理模式"
date: 2014-08-03 11:56:48 +0800
comments: true
toc: true
categories: 
- 设计模式
---

代理模式是对象的结构模式。代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。代理模式的结构如下图：

![image](/myresource/images/image_blog_20140803_120304.jpg)

<!--more-->

各角色说明如下：

* 抽象主题角色：是真实主题和代理主题的共同接口，任何可以使用真实主题的地方都可以使用代理主题。
* 代理主题角色：内部含有对真实主题的引用，可以在任何时候操作真实主题对象。
* 真实主题角色：真实的对象。

**常见的代理种类：**

* 远程(Remote)代理：位于不同地址空间的代理对象。
* 虚拟(Virtual)代理：当创建真实对象需要消耗较大资源时，通过虚拟代理实现只有真正需要时才创建资源。例如加载图像。
* Copy-on-Write代理：虚拟代理的一种，把复制拖延到只有客户端需要时才执行。
* 保护(Protect or Access)代理：控制对一个对象的访问，可以为不同的客户端提供不同级别的权限。
* Cache代理：为真实对象操作的结果提供临时的存储空间，以便多个客户端可共享该结果。
* 防火墙(Firewall)代理：保护目标，不让恶意用户接近。
* 同步化(Synchronization)代理：使多个用户能够同时使用一个对象而没有冲突。
* 智能(Smart Reference)引用：当一个对象被引用时，提供一些额外的操作，例如记录调用次数。


反射与代理常常一起使用，[这篇博文](/blog/2014/06/28/li-yong-fan-zhang-hao/)就是代理模式的一个例子。

代理模式与适配器模式的区别是，后者的用意是改变接口，而前者不能改变接口。代理模式与装饰模式都保持接口不变，但它们区别是，后者应当提供增加的功能/性能，而前者是对原对象施加控制，并不提供增强功能。

### 虚拟代理的例子
为了更好的用户体验，在应用中显示网络图片时，先显示“加载中”或者占位符，等待图片下载完成后再替换成图片。这就是虚拟代理的真实例子。对于客户端仍然是创建图片并显示，但实际创建的是图片代理，图片代理先显示“加载中”，然后启动另一线程去下载图片，当下载完成后，才真正显示图片。

