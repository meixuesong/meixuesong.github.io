---
layout: post
title: "Titanium Alloy基础"
date: 2015-01-10 20:32:42 +0800
comments: true
toc: true
categories: 
- 移动开发
---
这是一篇学习笔记，主要内容是Alloy的基础概念。

<!--more-->

## 1. Alloy框架
### 1.1 Alloy相关概念
**Alloy models** are built on top of [Backbone.js](http://backbonejs.org/), taking advantage of Backbone's rich Model and Collection APIs. 

**Alloy views** are built from Titanium UI components.

**Alloy controllers** generally have a one-to-one relationship with Alloy views. 

Additionally, Alloy provides built-in support for [Underscore.js](http://underscorejs.org/), which provides a set of utility functions, such as array and iterative helpers. 

资源文件放于app/assets/android or app/assets/iphone folder.

Titanium代码与Alloy XML:

```javascript
var button = Titanium.UI.createButton({
    text: "Foobar",
    top: 0,
    width: Ti.UI.SIZE
});

button.addEventListener('click', doClick);
```

等价于：

```
<Button title="Foobar" top="0" width="Ti.UI.SIZE"  onClick="doClick"/>
```

Alloy项目文件夹：

文件夹|用途
---|---
app | Contains the models, views, controllers and assets of the application. All work should be done here. See folder descriptions below.
`app/alloy.jmk` | Build configuration file.
`app/alloy.js` | Initializer file used to preconfigure components or override Alloy methods before the main controller is executed. 
`app/config.json` | Project configuration file.
`app/assets` | Contains image assets and other files that need to be copied into the Resources directory. Reference these files in the code without the 'app/assets' path and without the platform-specific if it is inside one.
`app/controllers` | Contains controllers in the format filename.js to a corresponding view file `app/views/filename.xml`.
`app/lib` | Contains application-specific library code, typically in the CommonJS format.
app/migrations | Contains database migration files in the format `<DATETIME>_filename.js`.
`app/models` | Contains model files in the format filename.js.
`app/styles` | Contains view styling in the format filename.tss, which is applied to a corresponding view file `app/views/filename.xml`.
`app/themes` | Contains themes to customize the assets and styles of the entire GUI.
`app/views` | Contains views in the format filename.xml with the optional corresponding files `app/controllers/filename.js` and `app/styles/filename.tss`.
`app/widgets` | Contains widget files. Each widget will have its own app-like directory structure.
i18n | Contains internationalization and localization files. Same usage as with a Titanium application.
Resources | Contains the Titanium files generated by the Alloy interface from the app directory. All files will be overwritten each time the application is built. Since Alloy 1.3.0, Alloy creates a separate Titanium project for each platform you build for in the `Resources/<platform>` folder.

**Widgets** are self-contained components that can be easily dropped into Alloy-powered Titanium projects. 

Alloy comes with additional utilities used to simplify certain functions, such as animations, string manipulation, and display unit conversion. These utilities are referred to as '**builtins**.' 

```javascript
var animation = require('alloy/animation');
$.shake.addEventListener('click', function(e) {
	animation.shake($.view);
});
```

### 1.2 Alloy Views
#### 1.2.1 XML Markup

```
//app/views/index.xml
<Alloy>
    <Window class="container">
        <Label id="labelId" onClick="doClick">Hello, World</Label>
    </Window>
</Alloy>
```

可以使用`$.labelId`引用上面的label，对于根视图可以使用`$.index`（文件名）。

XML中可以使用的属性：

属性名 | 描述
---|---
id | Identifies UI elements in the controller (prefixed with '$.') and style sheet (prefixed with '#').
class | Applies additional styles (prefixed with '.' in the TSS file)
autoStyle | 是否动态样式，当class动态变化时，控件样式动态变化。对性能有影响
formFactor | handheld or tablet
if | 使用条件表达式。See [Conditional Code](http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_XML_Markup-section-35621528_AlloyXMLMarkup-ConditionalCode) and [Alloy Styles and Themes: Custom Query Styles](http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Styles_and_Themes-section-35621526_AlloyStylesandThemes-CustomQueryStyles) for more details.
module | Requires in a CommonJS module 
ns | Overrides the default Titanium.UI namespace. See Namespace for more details.
platform | android, blackberry, ios, or mobileweb。如果多个可以使用逗号分隔。

除了上述属性，各组件还可以包括自己特有的属性和事件。另外还有一些特殊的元素：

Element | Description
---|---
Alloy |Root element for all view XML files. Required in all views.
Collection | Creates a singleton or instance of the specified collection. 
Model | Creates a singleton or instance of the specified model. 
Module | Imports a module view inside this view (since Alloy 1.2.0). 
Require | Imports a widget or includes another view inside this view. 
Widget | Imports a widget inside this view. Same as the Require Element with the type specified to 'widget'. 

index.xml是一个特殊情况，只接受以下根节点：

* Ti.UI.Window or `<Window>`
* Ti.UI.TabGroup or `<TabGroup>`
* Ti.UI.iOS.NavigationWindow or `<NavigationWindow>`
* Ti.UI.iPad.SplitWindow or `<SplitWindow>`

**XML中的Collection节点**

The Collection XML element creates a singleton or instance of a collection.

```
<Alloy>
    <Collection src="book" />
    <Window>
        <TableView id="table" />
    </Window>
</Alloy>
```

上面的代码创建了一个单例集合，对应的model为book.js。在controller中可以这样访问：

```javascript
var library = Alloy.Collections.book;
library.fetch();
```

上面的例子 Alloy.Collections.book是全局的，但也可以创建只用于一个Controller的Collection：

```
<Alloy>
    <Collection id="localLibrary" src="book" instance="true"/>
    <Window>
        <TableView id="table" />
    </Window>
</Alloy>
```

注意上面的src和instance。在代码中通过id来引用：

```javascript
var library = $.localLibrary;
library.fetch();
```

**Model Element**
与Collection类似，XML中也可以创建Model单例，或者用于某个Controller的一个实例。

单例：

```
<Alloy>
    <Model src="book" />
    <Window>
        <TableView id="table" />
    </Window>
</Alloy>

var drama = Alloy.Models.book;
drama.set('title', 'Hamlet');
drama.set('author', 'William Shakespeare');
```

某个Controller的实例：

```
<Alloy>
    <Model id="myBook" src="book" instance="true"/>
    <Window>
        <TableView id="table" />
    </Window>
</Alloy>

var drama = $.myBook;
drama.set('title', 'Hamlet');
drama.set('author', 'William Shakespeare');
```

注意前述的Collection和Model都要放在Alloy节点下。

**Module Attribute**
XML中可以引入CommonJS module。首先，module要放入`app/lib`，并且有一个public方法createXXX，返回一个UI对象。然后，将XXX用于xml节点元素，并设置module路径(基于`app/lib`)，元素的其它属性将作为参数传入createXXX方法。示例如下：

```
//app/lib/foo.js
// XML attributes are passed to the function
exports.createFoo = function (args) {
    var viewArgs = {
        backgroundColor: args.color || 'white',
        width: '100dp',
        height: '100dp'
    };
    var view = Ti.UI.createView(viewArgs);
    var labelArgs = {
        color: args.textColor || 'black',
        text: args.text || 'Foobar' 
    };
    var label = Ti.UI.createLabel(labelArgs);
    view.add(label);
 // Return a UI object that can be added to a view
 return view;
}; 

//app/views/index.xml
<Alloy>
    <Window backgroundColor="white">
        <!-- Requires in the lib/foo.js module and calls the createFoo method -->
        <Foo module="foo" color="blue" textColor="orange" text="Hello, World!"/>
    </Window>
</Alloy>
```

对于Native开发的Module，也可以引入XML中，分为5步：

1. 将module引入项目
2. 在XML中的View或Window的下级加入Module
3. 设置属性module为module名称
4. 设置属性method为创建方法名称，如果没设置则默认为createView
5. 如果方法参数只需要一个简单的Javascript对象，则可以将值inline写入或者使用TSS文件。

Paint Module的示例如下：

```
<Alloy>
	<Window>
		<Module id="paint" module="ti.paint" method="createPaintView"
			eraseMode="false" strokeWidth="1.0" strokeColor="red" strokeAlpha="100" />
		<Button onClick="eraseMe" bottom="0">Erase</Button>
	</Window>
</Alloy>

function eraseMe(){
	$.paint.clear();
}
```

**Require Element**
require元素主要有两个用途：including external views and importing widgets into the current view.


including external views示例：

```
//index.xml
<Alloy>
    <TabGroup>
        <Tab id="leftTab">
            <Require type="view" src="rss" id="rssTab"/>
        </Tab>
    </TabGroup>
</Alloy>

//rss.xml
<Alloy>
    <Window id='rssWindow'>
        <WebView id='rssView' />
    </Window>
</Alloy> 

var rssView = $.rssTab.getView('rssView'); 
rssView.url = 'http://www.google.com'; 
```

**Importing Widgets，**引入Widgets只需要三步：

1. 将Widget放入app/widgets文件夹
2. 在config.json中添加依赖
3. 在XML中加入`<Widget>`，可以设置id和name属性。id属性用于引用并调用方法，name属性用于指定view对应的Controller，而不是使用默认的widget.js。

```
app/views/index.xml
<Alloy>
    <Window>
        <Widget src="mywidget" id="foo" name="foo" />
    </Window>
</Alloy>

$.foo.myMethod();
```

config.json中的依赖：

```
 "dependencies": {
 	"mywidget":"1.0"
  }
```    

可以直接在XML中设置属性，用于传参。与代码具有等同效果：

```
<Require id="foobar" src="foo" customTitle="Hello" customImage="hello.png"/> 

var foobar = Alloy.createController('foo', { 
    id: "foobar", 
    customTitle: "Hello", 
    customImage: "hello.png" 
});
```

对于required view，可以**绑定事件**。下面的例子中，parent视图引入了button视图，并绑定了回调方法：

```
//Parent View:
<Require id="fooButton" src="button" onClick="doClick" /> 

function doClick(e) {...}

//Button View:
<Alloy>
    <Button id="button">Click Me!</Button>
</Alloy>

//在子视图中trigger click事件
$.button.addEventListener('click', function(e) { 
    $.trigger('click', e); 
}); 
```

**Adding Children Views。**用于将parent view中的数据传给required view。下面的例子实现了这样一个场景：index.xml require info.xml，index.xml可以将子元素传给info.xml展示，info.js可以通过`arguments[0].children`访问这些子元素。

```
//app/views/info.xml
<Alloy>
    <View backgroundColor="yellow" borderWidth="0.5" borderColor="brown"/>
</Alloy>

//controllers/info.js
var args = arguments[0] || {};
// add children if there are any
_.each(args.children || [], function(child) {
    $.info.add(child);
});
$.info.height = Ti.UI.SIZE; 

//app/views/index.xml
<Alloy>
    <Window class="container">
        <Require src="info">
            <Label>I am an info box.</Label>
        </Require>
    </Window>
</Alloy>
```

**Namespace**

XML中的控件默认为Titanium.UI，如果组件不是这个命名空间，可以设置ns属性：

`<View ns="Ti.Map" id="map"/> `


#### 1.2.2 Alloy Styles and Themes
##### Titanium Style Sheets (TSS)

Titanium Style Sheets (TSS) file uses a JSON-like syntax. the class name prefixed with a period (.), or the id name prefixed with a hash tag (#) 。也可以使用条件表达式。值可以是以下类型：

* JSON values, that is, Strings, Numbers, Objects, Array, Booleans and null
* undefined to unset a property (do not place undefined in quotes) (since Alloy 1.4.0)
* Titanium SDK constants, for example, Ti.UI.SIZE
* Localization functions, either Ti.Locale.getString() and its shorthand L()
* Variables from the Alloy.CFG or Alloy.Globals namespaces
* Bitwise operators, which includes bit shifting ('>>', '<<', and '>>>'), bitwise AND ('&'), bitwise OR ('|') and bitwise XOR ('^') (since Alloy 1.3.0)

注释方法： //comment and multiline comments `/* comment */`

Alloy不支持：Alloy does not support the CSS concept of child or descendent selectors

```
// 如果不使用.和#，这表示适用于所有Lable
"Label": {
    width: Ti.UI.SIZE,
    height: Ti.UI.SIZE,
    color: "#000", // black
    transform: Alloy.Globals.rotateLeft // value is defined in the alloy.js file      
},
```

注意上面的transform使用了全局方法：`Alloy.Globals.rotateLeft = Ti.UI.create2DMatrix().rotate(-90);`

app.tss中定义的是全局样式。样式的优先权：XML中输入的 `>` 当前View对应的TSS `>` 全局样式。

样式可以加平台条件，用中括号，注意中括号和平台代码间**不要用空格！**:

```
// iPad and iPad mini
"Label[platform=ios formFactor=tablet]": { 
    backgroundColor: "#0f0",
    text: 'iPad'
},

还可以： 
[platform=ios,android] //android, blackberry, ios, or mobileweb
[platform=!ios]

```

**Custom Query Styles**
Custom query styles override all styles, that is, class, id, and markup element styles, except the ones defined as attributes in the XML file.

1. 使用Alloy.Globals定义一个返回boolean的方法，或者通过Alloy.createController中传入boolean属性，然后在xml或tss文件中使用。
2. 在xml和tss中使用if属性。

```
apps/controllers/index.js
function openBar (e) {
    Alloy.createController('win2', {'fooBar': true}).getView().open();
};

app/styles/win2.tss
"#label[if=$.args.fooBar]" : {
 'text' : 'Foobar',
 'color' : 'blue'
}

app/views/win2.xml
<Alloy>
    <Window>
        <Label if="$.args.fooBar" color="blue">Foobar</Label>
    </Window>
</Alloy>
```

另一个例子：

```
Alloy.Globals.isIos7Plus = (OS_IOS && parseInt(Ti.Platform.version.split(".")[0]) >= 7);

//index.tss
// Query styles
"#info[if=Alloy.Globals.isIos7Plus]" : {
    font : { textStyle : Ti.UI.TEXT_STYLE_FOOTNOTE }
},
```

##### Themes
使用Theme的方法。首先在app下建立themes文件夹，并在其下级以各主题名建立子文件夹，如:app-themes-mytheme, 在mytheme下分别建立assets(放图片资源)和styles(放tss文件，还可以再包含平台子文件夹)。在config.json设置当前主题：

```
{
 "global": {
 "theme":"mytheme"
    }, 
 "env:development": {}, 
 "env:test": {}, 
 "env:production": {}, 
 "os:ios": {
 "theme":"green"
    }, 
 "os:android": {
 "theme":"blue"
    }, 
 "dependencies": {}
}
```

打包时，主题下的assets资源和样式将覆盖app下的资源与样式。

