---
layout: post
title: "学习正则表达式"
date: 2015-04-06 20:39:05 +0800
comments: true
toc: true
categories: 
- web相关
---

我们常常用到正则表达式，它是一项神奇的技术，简单的表达式却可以实现强大的功能。但是它看起来却太复杂，除了Google搜索外，你是否想过系统地学一下呢？真的有那么难吗？

<!--more-->

首先建议你打开[Regexpal网站](http://regexpal.com/)，这是一个练习的好帮手。打开网站后，在下方输入你想匹配的内容，然后在上方输入正则表达式进行验证。

## 1. 什么是正则表达式
正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。

方括号“[]”被视为特殊的元字符（Metacharacter），不参与匹配。`[0-9]`这种形式的正则表达式称为**字符组**，也叫**字符集**。例如`[0-9]`匹配0到9的数字，`[0127]`匹配0、1、2和7。

`\d`是字符组简写式，与`[0-9]`一样匹配任意阿拉伯数字。例如匹配电话号码：`\d\d\d-\d\d\d-\d\d\d\d`.

`\D`匹配任何一个**非数字**字符。

`.`英文句号匹配任意字符（但某些情况下不能匹配行起始符）。

### 捕获分组和向后引用
`(\d)\d\1`

### 使用量词
示例：`\d{3}-?\d{3}-?\d{4}

包含数字的花括号`\d{3}`表示待查找的数字出现的次数，是一种量词。花括号本身用做元字符。问号是另一种量词，上例中表示连字符是可选的。其它的量词还包括`+`表示“一个或多个”；`*`表示“零个或多个”。下面来看个复杂点的：

`(\d{3,4}[.-]?)+`

* `(` 捕获分组的起始符
* `{3,4}` 匹配的最小数量是3，最大数量是4
* `[.-]` 字符组，匹配`.`或`-`
* `?` 表示可选，0个或1个
* `)` 捕获分组的结束符
* `+` 表示1个或多个

这下可以容易读懂下面的表达式了：`(\d{3})[.-]?){2}\d{4}` 表示连续2个3位数字，每3位数字后可以带连字符也可以不带，最后是一个4位数字。

### 括选文字符
示例：`^(\(\d{3}\)|^\d{3}[.-]?)?\d{3}[.-]?\d{4}$`

* 起始位置的`^`,或者`|`之后的`^`表示会出现在一行的起始位置
* `\(` 表示左括号本身
* `\)` 表示右括号本身
* `|` 表示选择，也就是从多个可选项中选择一个。在此例中表示“匹配一个不带括号的区号或者一个带括号的区号”
* 第2个问题表示分组可选
* `$` 匹配行结束位置

## 2. 简单的模式匹配
### 匹配数字
`\d` `[0-9]` `[0123456789]`

### 匹配非数字字符
`\D` `[^0-9]` `[^\d]`

### 匹配单词和非单词字符
`\w` 匹配单词字符，与`\D`不同的时，前者不包括空格和标点符号。在英语环境中，`\w`相当于`[_a-zA-Z0-9]`。`\W` 匹配空格、标点以及其他非字母、非数字字符。相当于`[^_a-zA-Z0-9]`。

字符简写式 | 描述
---|---
`\a` | 报警符
`[\b]` | 退格字符
`\c x` | 控制字符
`\d` | 数字字符
`\D` | 非数字字符
`\o xxx` | 字符的八进制值
`\w` | 单词字符(不包括空格和标点符号)
`\W` | 非单词字符
`\x xx` | 字符的十六进制值
`\u xxx` | 字符的Unicode值

### 匹配空白符
`\s` 匹配：空格、制表符(`\t`)、换行符(`\n`)、回车符(`\r`)。`\S`匹配非空白字符，相当于`[^ \t\n\r]`和`[\s]`

### 匹配任意字符
`.`可以用于匹配任意字符。例如`\bA.{5}T\b`可以匹配单词ANCYENT。其中`\b`匹配单词边界，不消耗任何字符。

## 3. 边界
断言标记边界，但不耗用字符。也就是字符并不会返回到结果中，因此也称为**零宽度断言**。

### 3.1 行的起始与结束
根据上下文，`^`会匹配行或者字符串的起始位置，`$`匹配行或字符串的结尾位置。例如：`^How.*Country\.$`匹配以How开头的整行，并以`.`结尾

### 3.2 单词边界与非单词边界
使用`\b`匹配单词边界。如：`\bTHE\b` 匹配THE。`\B`匹配非单词边界，即匹配除单词边界之外的位置，比如单词或字符串中的字母或数字。例如`\Be\B`可以匹配test中的e，而`\Bt\B`无法匹配test中的两个t。

### 3.3 使用元字符的字面值
这15个元字符在正则表达式中有特殊含义：`.^$*+?|(){}[]\-`。其中`-`用于在字符组的方括号中用来表示范围，在其它情况下无特殊含义。


## 4. 选择、分组和后向引用
用括号进行分组以帮助执行某种操作。

### 4.1 选择操作
`(the|The|THE)`用于选择三种方式的the. 也可以借助选项简写成：`(?i)the`表示不区分大小写。Java支持的选项包括：

选项|描述
---|---
`(?d)` | Unix中的行
`(?i)` | 不区分大小写
`(?m)` | 多行
`(?s)` | 单行
`(?u)` | Unicode
`(?x)` | 忽略空格和注释

### 4.2 子模式
子模式是指分组中的一个或多个分组。例如`(the|The|THE)`就包括三个子模式。这个例子中第三个子模式不依赖于前面的模式。但`(t|T)h(e|eir)`中后面的子模式依赖于前面的子模式。

括号对于子模式不是必须的，例如`\b[tT]h[ceinry]*\b`可以匹配the, The, thee等。

###4.3 捕获分组和后向引用
当一个模式的全部或者部分内容由一对括号分组时，它就对内容进行捕获并临时存储于内存中。可以通过后向引用重用捕获的内容，形式为：`\1`或`$1`表示第一个捕获的分组，`\2`或`$2`表示第二个捕获的分组。

除了用数字来表示分组，也可以在括号中使用`?<name>`命名分组。例如 `(?<one>It)`

### 4.4 非捕获分组
非捕获分组不会将其内容存储到内存中，因此如果你不想引用分组时可以使用它。由于不存储内容，因此性能较高。示例：`(?:the|The|THE)`, `(?i)(?:the)`, `(?i:the)`

## 5. 量词
量词的一些特性需要知道：

### 5.1 贪心、懒惰和占有
量词自身是贪心的。贪心的量词首先会匹配整个字符串，也就是整个输入。如果失败则回退一个字符后再尝试，这个过程叫回溯（backtracking）。它的资源消耗最大，它是先吃尽所有字符，然后一个个吐出来，慢慢咀嚼消化。

懒惰的量词是从起始位置开始尝试寻找匹配，每次检查字符串的一个字符，寻找要匹配的内容，因此它是每次只吃一点。要使一个量词成为懒惰的，必须在普通量词后加一个问号（？）。

占有量词会覆盖整个目标，然后尝试寻找匹配内容，但它只尝试一次，不会回溯。它不咀嚼，而是直接吞咽，然后才想知道吃的是什么。使用方法是在普通量词之后添加一个加号（+）。

### 5.2 基本量词

* `?` 0个或1个（表示可选）
* `+` 1个或多个
* `*` 0个或多个

示例 | 说明
---|---
`7+` | 1个或多个7
`7{1,}` | 1个或多个7
`7{3,5}` | 3-5个7



