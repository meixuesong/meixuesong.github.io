---
layout: post
title: "分布式系统的基础知识"
date: 2014-07-22 20:04:40 +0800
comments: true
toc: true
categories: 
- java
---

这是一篇学习笔记，内容为《大型网站系统与Java中间件实践》的第一章。

组成计算机的5要素为：输入、输出、运算器、控制器、存储器（内存、外存）。分布式系统也一样，可以分为这5个要素。因此这本书会对分布式系统中，这5个要素的变化进行说明。

<!--more-->

阿姆达尔定律（Amdahl's law）说明程序中可以并行的代码的比例，决定了你增加处理器能带来的速度提升的上限。

```
S(N) = 1 / ((1 - P) + P / N)

P: 可并行的程序在单核上执行时间的占比
N: 处理器的个数
S(N): 程序在N个处理器（总核心数）相对于单个处理器中的速度提升比。

当P=0.2, S(N)的上限为1.25
当P=0.5, S(N)的上限为2
```

根据阿姆达尔定律，提升P非常的重要！

##1.多线程模式
这里所说的多线程，是指单进程内的多线程。

###1.1互不通信的多线程模式
线程之间没有交集，各自执行各自的任务和逻辑。这种模式的编程最简单，与单线程差不多。

###1.2基于共享容器的多线程模式
例如多个线程共用一个队列。对于存储数据的容器或者对象，分为线程安全和线程不安全。

* 如果是线程不安全的，一般可以通过加锁或者Copy On Write（COW）的方式控制并发。对于加锁的情况，如果是读多写少，可以用读写锁而不是互斥锁。
* 如果是线程安全的，就可以直接使用。

### 1.3通过事件协同的多线程模式
某个线程需要等到某个状态或者事件发生后才能继续自己的工作，而这个状态或者事件与另一个线程有关，这时候就需要完成线程间的协调。**为了防止死锁，一般要原子性地获取所需的多个锁，或者注意以相同的顺序获取多个锁。**

```java
//原子性地获取多个锁
Thread 1
GetLocks(A, B); //伪代码，一次性获取两个锁，不同平台支持不同。

Thread 2
GetLocks(A, B);

//或者同样的顺序获取多个锁
Thread 1
A.lock();
	B.lock();
	
Thread 2
A.lock();
	B.lock();
//两个线程的加锁顺序一致，如果Thread 2中的顺序反过来，则很可能造成锁死。		


```

##2.多进程模式
进程之间的内存空间是独立的，因此多进程相对会容易一些。但也正因为内存空间独立，因此数据共享就涉及序列化和反序列化。

对于多进程，单个进程的问题不会造成整体的不可用。

##3.网络基础
###3.1 OSI七层模型
OSI七层模型还记得？从上到下依次是：

* 应用层：为应用程序（如Email）提供网络服务。
* 表示层：确保一个应用层发送的信息可被另一个系统的应用层读取。
* 会话层：通过传输层建立数据传输的通路。
* 传输层：定义传输数据的协议和端口。
* 网络层：在位于不同位置的网络中的两个主机系统之间提供连接和路径选择。
* 数据链路层：定义如何让格式化数据以进行传输。
* 物理层：定义物理设备标准，传输比特流。

### 3.2 网络IO实现方式
* BIO（Blocking IO），阻塞方式，一个Socket需要一个线程来处理。
* NIO（Nonblocking IO），基于事件驱动思想，采用Reactor模式。
* AIO (Asynchronous IO)，异步IO，采用Proactor模式。

Reactor模式和Proactor模式，后续要再研究一下。

##4.从单机到分布式
### 4.1 输入、输出设备的变化
除了传统意义的人机交互输入、输出设备，分布式环境中的其它节点也可以看作是输入或输出设备。

### 4.2 控制器的变化
在单机中，控制器是CPU中的控制器。在分布式系统中，控制器是控制方式。

1. 使用硬件负载均衡
2. 使用软件负载均衡，如LVS
3. 通过名称服务器
4. 通过规则服务器
5. Master + Worker的方式

前面两种一般称为透明代理。有两种缺点，一是增加了流量，即代理服务器与请求处理服务器之间多了一次发送和返回。当然，LVS通过配置，可以将请求的处理结果直接返回给客户端，不通过中间代理。二是如果代理出现问题，会影响到所有请求。

第三、四种控制方式，都是客户端先访问名称服务器或者规则服务器，得到真正的请求处理服务器地址，然后直接与该地址进行连接。

第五种一般用来管理任务，由Master把任务分给不同的Worker处理。

### 4.3 运算器的变化
分布式系统中的运算器包括多个节点的计算能力。

1. 通过DNS解析，实现调度和控制
2. 使用负载均衡设备或软件
3. 使用Master+Worker方式
4. 使用规则服务器等。

### 4.4 存储器的变化
与前面的类似，也可以通过：

1. 直接访问存储服务器
2. 通过代理服务器访问存储服务器
3. 使用名称服务
4. 使用规则服务
5. 使用Master控制。但没有Worker了。与规则服务不同，这里的Master根据请求返回存储服务器的地址，而不是返回所有地址。

##5. 分布式系统的难点
1. 缺乏全局时钟
2. 面对故障独立性。故障独立性指整个系统的一部分有问题，而其他部分正常。
3. 处理单点故障。如果某个功能或角色只有一台单机在支撑，这个节点就称为单点。它发生的故障就是单点故障（SPoF, Single Point of Failure）
4. 事务的挑战。即ACID和CAP。

后续将研究文中提到的COW、读写锁、互斥锁，以及Reactor模式和Proactor模式。
