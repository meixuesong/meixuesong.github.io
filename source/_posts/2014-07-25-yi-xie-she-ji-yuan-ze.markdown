---
layout: post
title: "一些设计原则"
date: 2014-07-25 21:01:51 +0800
comments: true
categories: 
- 设计模式

---

关于设计，有一些原则。本文总结一些常见的原则。包括：

* (S)单一职责原则
* (O)开闭原则
* (L)里氏替换原则
* (I)接口隔离原则
* (D)依赖反转原则
* 迪米特法则
* 组合/聚合复用原则

<!--more-->

## S.单一职责原则
单一职责原则（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。

## O.开闭原则
简单地说，就是软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的。这一原则由Bertrand Meyer提出：

>Software entities should be open for extension, but closed for modification.

实现开闭原则的关键是抽象。找到一个系统的可变因素，将它封闭起来，这就是“对可变性的封闭原则”。

## L.里氏替换原则
派生类（子类）对象能够替换其基类（父类）对象被使用。

##I.接口隔离原则
接口隔离原则（Interface-segregation principles，ISP）简单地说，就是：使用多个专门的接口比使用单一的总接口要好。

没有客户(client)应该被迫依赖于它不使用方法。接口隔离原则(ISP)拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为角色接口（role interfaces）。接口隔离原则(ISP)的目的是系统解开耦合，从而容易重构，更改和重新部署。

准确而恰当地划分角色以及角色所对应的接口，是面向对象的设计的一个重要的组成部分。

##D.依赖反转原则
简单地说，就是依赖于抽象，不要依赖于具体。

为什么叫“反转”呢？？看看下面是怎么反转的：

![image](/myresource/images/img_blog_20140725_1.png)

![image](/myresource/images/img_blog_20140725_2.png)

两种表述:

1. 抽象不应当依赖于细节；细节应该依赖于抽象。
2. 要针对接口编程，不要针对实现编程。

针对接口编程是指，应该使用接口和抽象类进行变量的类型声明、参数和方法返回类型的声明，以及数据类型的转换等。

不要针对实现编程是指，不应当使用具体Java类进行变量的类型声明、参数和方法返回类型的声明，以及数据类型的转换等。

如果希望遵循“开－闭原则”，那么依赖反转原则便是达到目标的途径。

## 迪米特法则
迪米特法则又叫做最少知识原则，就是说，一个对象应当对其他对象尽可能少的了解。

### 狭义的迪米特法则
如果两个类不必彼此直接通信，那么这两个类就不应该发生直接的相互作用。就是说如果某人可以通过朋友去调用陌生人的方法，那么就不用直接调用陌生人的方法，而是通过朋友去调用转发。

什么是朋友呢？满足任一条件都是朋友：

* 当前对象本身
* 以参量形式传入到当前对象方法的对象
* 当前对象的实例变量直接引用的对象
* 当前对象的实例变量如果是聚集，那么其中的元素都是朋友
* 当前对象所创建的对象。

狭义的迪米特法则的缺点是：产生大量小方法，与商务逻辑无关；不同模块之间的通信效率降低。

###广义迪米特法则在类的设计上的体现
* 优先考虑将一个类设置成不变类
* 尽量降低一个类的访问权限
* 尽量降低成员的访问权限

##组合/聚合复用原则
实际上说的就是尽量使用聚合/组合，尽量不要使用继承。这在Effective-Java中也有描述。[Java类与接口](/blog/2014/07/08/effective-java-lei-he-jie-kou/)