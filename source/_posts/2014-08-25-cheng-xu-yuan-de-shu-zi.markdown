---
layout: post
title: "程序员的数学"
date: 2014-08-25 22:22:26 +0800
comments: true
categories: 
- 算法
---

这是一篇《程序员的数学》读书笔记。这本书没有讲高深的数学理论，而是用浅显易懂的道理推导出一些数学知识。整本书浅显易懂，学不了太多东西，但对启发数学思维有一点用处。

<!--more-->

全书共分为8章，每章的内容或要点摘录如下：

## 第1章 0的故事
本章首先介绍了10进制、2进制计数法。它们都属于**按位计数**，例如10进制的2503可表示为：
> **2** * 10^3 + **5** * 10^2 + **0** * 10^1 + **3** * 10^0

同样地，2进制的1100可表示为：
> **1** * 2^3 + **1** * 2^2 + **0** * 2^1 + **0** * 2^0

将10进制的转换成2进制，只需要除以2，将将余数排列起来就可以了，如下图，将12转换成2进制，变成1100：

![image](/myresource/images/image_blog_20140825_m01.jpg)

除了按位计数，还有**罗马计数法**，例如钟表表盘。没有0，使用I(1), V(5), X(10), L(50), C(100), D(500), M(1000)来记数，将并排的数字加起来就是所表示的数。其中有“减法规则”，如IV，在V的左侧写I，表示5-1。例如：

* MCMXCVIII = (M) + (CM) + (XC) + (V) + (III) 
* = (1000) + (1000 - 100) + (100 - 10) + (5) + (3) 
* = 1998

### 第2章 逻辑
逻辑的基本思路：完整性（有没有遗漏？）和排他性（有没有重复？）。可以画一根数轴来检查：

![image](/myresource/images/image_blog_20140825_m02.jpg)

**最容易出错的地方往往发生在边界值上！**

除了常见的逻辑运算（非、并且、或者）外，异或指的是：A⊕B，仅当A和B不同时为True, 相同时为False。

德摩根定律指的是(﹁指非，^表示并且， V表示或者)：

* (﹁A)V(﹁B) = ﹁(A ^ B)
* (﹁A)^(﹁B) = ﹁(A V B)

### 卡诺图
卡诺图是一个非常好的工具，它能够简化复杂的逻辑表达式。例如对于这样的规则：

当发生以下情况时按下按钮：

1. 绿灯、黄灯、红灯都灭
2. 黄灯灭，红灯亮
3. 绿灯灭，黄灯亮
4. 绿灯、黄灯、红灯都亮

可以设有以下命题，画出卡诺图：

A. 绿灯亮
B. 黄灯亮
C. 红灯亮

![image](/myresource/images/image_blog_20140825_m03.jpg)

最后得出逻辑表达式：当(﹁A)V C时，按下按钮。

## 第3章 余数
将较大的数字除一下，就能根据余数分组。例如求10^100天以后是星期几？此外，还有奇偶校验的问题。将大问题转换成小问题，余数是一种重要武器。

## 第4章 数学归纳法
两个步骤：

1. 证明P(0)成立。
2. 证明不论k为0以上的哪个整数，若P(k)成立，则P(k + 1)也成立。

## 第5章 排列组合
* 加法法则：|A U B| = |A| + |B|
* 乘法法则：|A x B| = |A| x |B|

基本知识：n位2进制数可以表示的数的总数为2^n。

### 置换
如果将A, B, C三张牌按照ABC, ACB, BAC...等顺序排列，共有多少种排法？

* 第1张牌有3种选法
* 第2张牌，扣除了第1张牌，因此有2种选法
* 第3张牌，有1张选法。

因此共有3 x 2 x 1 = 6种排法。

将n个事务按顺序进行排列称为置换（Substitution）。n张牌的置换总数为n的阶乘：n! = n x (n - 1) x (n - 2) x ... x 2 x 1。

### 排列
从n个事物中取出一部分进行排列（Permutation）。从A、B、C、D、E共5张牌，选出3张牌进行排列，有多少种排法？

* 第1张的取法有5种
* 第2张的取法有4种
* 第3张的取法有3种

因此共有：5x4x3=60种排列。即从n张牌中取出k张进行排列的种数为：P<sub>n</sub><sup>k</sup> = n x (n - 1) x (n - 2) x ... x (n - k + 1) = n! /(n-k)!
 
### 组合
从n个事物中取出一部分，不考虑它们的顺序，称为组合（Combination）。从n张牌，选出k张牌，不考虑顺序，有多少种取法？可以先按排列一样，考虑顺序进行计数，然后除以重复计数的部分。即：

* C<sub>n</sub><sup>k</sup> = n张里面取k张的排列总数 / k张的置换总数 
* = P<sub>n</sub><sup>k</sup> / P<sub>k</sub><sup>k</sup> 
* = n! / ((n-1)!k!)

### 置换、排列和组合的关系
置换和组合相结合就是排列。为什么？置换表示“3张牌的交替排列方法”，组合表示“3张牌的取法”，两者结合起来就是“取出3张牌，进行交替排列”，即表示排列。

## 第6章 递归
递归就是要将复杂的问题简化。假设现在要找出问题中的递归结构，可以按以下步骤进行：
* 从n层的整体问题中隐去部分问题。
* 判断剩余部分是否是n-1层的问题。

即要发现F(n)与F(n-1)，甚至F(n-2)之间的关系。

## 第7章 指数爆炸
1mm厚的纸，在对折39次之后，就达到54万公里，超过了地球与月亮之间的距离！这就是指数爆炸。利用指数爆炸可以解决一些计算问题。例如二分法查找，在15个数中查找特定的数，最多只需要3次。

对于很大的数，处理时可以转换成对数处理。

处理指数爆炸的四种方法：

1. 极力求解，即增加计算机性能。
2. 变相求解，即转换成简单问题求解。
3. 近似求解。
4. 概率求解，处于研究中。

## 第8章 不可解问题
反证法，就是首先假设“命题的否定形式”成立，然后根据假设论证，推导出矛盾的结果。例如论证“为什么不存在最大的整数”。假设存在，且M就是最大的整数，那么M + 1 > M，与假设矛盾。因此不存在最大的整数。

什么是**可数**？集合的元素是有限的，或者集合中的所有元素都与正整数一一对应，那么这个集合就被定义为**可数（Countable）**。书中举例了一些可数的集合（有限集合、0以上的所有偶数的集合、所有整数的集合、所有有理数的集合、程序的集合），以及不可数的集合（所有整数数列的集合、所有实数的集合、所有函数的集合），并用反证法进行了证明。

不可解问题是“原则上不能用程序来解决的问题”。书中举了“停机”问题的例子，即判断“某程序在给定数据下，是否会在有限时间内结束运行”的问题。

## 总结
在解决问题时，要学会使用“先用较小的数试算”的方法，发现规律、性质、结构、循环、一致性等，认清隐含在问题中的模式。