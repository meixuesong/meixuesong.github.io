---
layout: post
title: "理解Java性能调优"
date: 2014-12-06 21:00:37 +0800
comments: true
toc: true
categories: 
- java
---

人们总是猜不对系统变慢的原因在哪里，你必须量体裁衣。没有评测就没有合适的调优。本文重点学习性能相关的内存管理、垃圾收集、相关工具并简单了解HotSpot。

<!--more-->

## 1. 性能指标
### 评价性能的常用指标

* 等待时间(Latency)：在给定工作量的情况下，处理一个任务单元所消耗的时长。通常用响应时间随负载增长的变化曲线来反映。
* 吞吐量(Throughput)：在某一参考平台（硬件配置、OS和软件环境）上的每秒事务处理数。
* 利用率(Utilization)：在可用资源中处理工作单元的资源百分比。例如CPU的利用率。
* 效率(Efficiency)：吞吐量除以所用资源。
* 容量(Capacity)：任一时刻能通过系统的工作单元数量。
* 扩展性(Scalability)：当系统得到更多资源时，吞吐量或等待时间的变化。如果方案A可用的服务器数量翻倍，它的吞吐量也能翻倍，那么它就实现了完美的线性扩展。
* 退化(Degradation)：分为正面退化和负面退化。当工作单元增加时，性能通常会降低，即负面退化。但也存在正面退化，例如负载超过阈值，使系统切换到高性能模式，处理时间可能缩短。JVM是动态非常强的运行时系统，有几部分可以达成这种效果。

性能分析时要了解一些概念：

> 中位数（又称中值，Median），统计学中的专有名词，代表一个样本、种群或概率分布中的一个数值，其可将数值集合划分为相等的上下两部分。对于有限的数集，可以通过把所有观察值高低排序后找出正中间的一个作为中位数。如果观察值有偶数个，通常取最中间的两个数值的平均数作为中位数。

>方差是各个数据分别与其和的平均数之差的平方的和的平均数，用字母D表示。在概率论和数理统计中，方差（Variance）用来度量随机变量和其数学期望（即均值）之间的偏离程度。在许多实际问题中，研究随机变量和均值之间的偏离程度有着重要意义。

>百分位数是统计学术语，如果将一组数据从小到大排序，并计算相应的累计百分位，则某一百分位所对应数据的值就称为这一百分位的百分位数。可表示为：一组n个观测值按数值大小排列。如，处于p%位置的值称第p百分位数。

>标准差（Standard Deviation） ，中文环境中又常称均方差，但不同于均方误差（mean squared error，均方误差是各数据偏离真实值的距离平方的平均数，也即误差平方和的平均数，计算公式形式上接近方差，它的开方叫均方根误差，均方根误差才和标准差形式上接近），标准差是离均差平方和平均后的方根，用σ表示。标准差是方差的算术平方根。标准差能反映一个数据集的离散程度。平均数相同的，标准差未必相同。

## 2. 务实的性能分析法
做性能分析最重要的是知道哪个可测环节最重要。应该把测量结果、目标和结论跟一个或多个可测环节结合起来。以下是常见的可测项，都是性能调优的好对象：

* 方法handelRequest()运行所需的平均时间。
* 并发10客户端时，系统等待时间的第90个百分位数。
* 并发用户从1增长到1000时，响应时间的退化。

要精确确定一个方法或代码片段运行需要多长时间，只有两种方法：

* 直接测量，在源码中插入测量代码。最容易理解，但是侵入式的。如果测量结果不断增多，代码很容易就被数据淹没。
* 在类加载时把类转换成受测类。使用特殊的类加载器，在方法开始和结束的地方加上记录时间的字节码。典型的有OpTier CoreFirst等性能监测工具，但似乎还没有开源工具。

## 3. 时间问题
为了进行性能调优，需要对时间有深刻认识。

#### 硬件时钟
基于x64的机器有四种不同的硬件时间源：

* RTC: 实时时钟（RTC）基本和电子表里的元件一样，在系统断电时由主板上的电池供电。系统启动时从它那得到时间。很多系统会在OS启动后通过网络时间协议（Network Time Protocol, NTP）与时间服务器同步。
* 8254：是可编程计时芯片，现在基本不需要了。
* TSC：时间戳计时器，这是应用最广泛的现代计时器。可认为是一个跟踪CPU运行了多少周期的CPU计数器。由于与CPU相关，因此运行时可能受节能或其它因素影响。不同的CPU会互相偏离，不能跟钟表时间保持一致。
* HPET，高精度事件计时器，最近几年才出现。精度非常高，但不是所有硬件都可用，也不是所有操作系统都支持。

#### Java获取时间的方法
Java提供了两个获取时间的方法：

* System.currentTimeMillis()，解析度为毫秒级，几乎所有情况下都跟钟表时间相符。
* System.nanoTime()，用于测量比毫秒更精确的时间，时间源来自TSC，可能偏离钟表时间。

对于较长的间隔时间，nanoTime()基本是不可信的，应该使用currentTimeMillis()，nanoTime()它只能测量较短的时间间隔。

## 4. 垃圾收集
### 4.1 内存管理

内存自动管理是Java平台最重要的组成部分之一。Java内存分为栈和堆。

栈内存，即虚拟机栈。每个方法被执行的时候都会同时创建一个栈帧，用来存储局部变量，操作栈，动态链接，方法出口等信息。**局部变量包括各种基本类型的变量和对象的引用变量都是在方法的栈内存中分配。**其中，64位长度的long和double类型的数据占用2个局部变量的空间，其他数据类型只占用1个。局部变量所需要的内存空间是在编译期间完成的，当进入一个方法时候，这个方法所需的局部变量空间已经确定，在方法运行期间不会改变。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。当线程请求的栈深度大于虚拟机所允许的深度，则抛出StackOverflowError异常。当虚拟机栈无法扩展时候则抛出OutOfMemoryError异常。

堆内存，在虚拟机启动时创建。堆内存的唯一目的就是创建对象实例，所有的对象实例和数组都要在堆上分配。对象的域即使是原始类型，也仍然分配在堆内存中。堆内存的回收由垃圾回收负责。

#### 标记和清除
标记和清除是最简单、也是出现最早的垃圾收集算法。Perl和PHP等语言则采用引用计数法。

最简单的标记和清除算法会暂停所有正在运行的线程，并从一组“活”对象（任何用户线程的任何堆栈帧中存在引用的对象）开始遍历其引用树，标记出路径上的所有活对象。遍历完成后，所有没被标记的被当作垃圾，可以回收。被清除的内存不是还给OS，而是JVM。

Java平台对基本的标记清除算法进行了改进，采用“分代式垃圾收集”。内存分成了几个不同的区域：

![image](/myresource/images/image_blog_2014-12-07-Java-Memory-Model-450x186.png)

* Eden(伊甸园)：对象最初降生的堆区域。
* Survivor(幸存者乐园)：分为两个空间（S0, S1）,除非正在执行垃圾收集，否则总有一个空间是空的。
* Old Generation：老年代。是那些“足够老”的幸存对象的归宿。
* PermGen：为内部结构分配的内存，例如类定义。它不是严格的堆内存，并且普通的对象最后不会在这里结束。

上面这些内存区域的垃圾收集方式不尽相同。

#### 年轻代收集（Minor GC）
年轻代收集只会清理“年轻的”空间（伊甸园和幸存者乐园），其过程如下：

* 在标记阶段发现的所有仍然存活的年轻对象都会被挪走：那些足够老的对象（从次数足够多的GC中幸存下来的）进入老年代；所有Eden中存活的对象被移到幸存者乐园的其中一个空间，幸存者乐园中的存活对象也会被移到该空间。（S0, S1总有一个是空的）
* 伊甸园和最近腾空的幸存者乐园可以重用了，因为它们里面已经全是垃圾了。

#### 完全收集（Major GC）
当年轻代收集不能把对象放进老年代时（空间不够了），就会触发一次完全收集，这通常要更长的时间。根据老年代所用的收集器，可能会牵涉到老年代对象的内部迁移。以确保必要时能从老年代对象所占的内存中给大的对象腾出足够的空间。这被称为压缩。

由于Major GC会消耗更长时间，消耗的时间取决于垃圾收集策略，这期间应用将无响应。因此在高响应应用中，有必要监视和优化垃圾回收以避免超时。

#### 安全点
因为垃圾收集时，要暂停所有应用线程，因此线程给执行GC留出了特定的位置——安全点。常见的安全点是方法被调用的地方（调用点），不过也有其它安全点。当执行垃圾收集时，所有应用线程都必须停在安全点。

### 4.2 工具
借助一些工具可以帮你了解运行中的进程和垃圾收集。

#### jmap
jmap是Oracle JVM自带的一个工具，用来显示Java进程的内存映射，也能分析Java核心文件（Java core file，主要保存各应用线程在某一时刻的执行栈以及stack trace的显示）。

**默认视图**

jmap最简单的用法是查看连接到进程里的本地类库。用处不大，用得最多的是后面两种视图。

```
$ jmap 25154
Attaching to process ID 25154, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 24.65-b04
```

**堆视图**

使用-heap选项，jmap会抓取进程当前的堆快照。以下是输出结果示例：

```
$ jmap -heap 25164
Attaching to process ID 25164, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 24.65-b04

using thread-local object allocation.
Parallel GC with 4 thread(s)

Heap Configuration:
   MinHeapFreeRatio = 0
   MaxHeapFreeRatio = 100
   MaxHeapSize      = 2147483648 (2048.0MB)
   NewSize          = 1310720 (1.25MB)
   MaxNewSize       = 17592186044415 MB
   OldSize          = 5439488 (5.1875MB)
   NewRatio         = 2
   SurvivorRatio    = 8      //Eden = (From+To)*幸存比例
   PermSize         = 21757952 (20.75MB)
   MaxPermSize      = 85983232 (82.0MB)
   G1HeapRegionSize = 0 (0.0MB)

Heap Usage:
PS Young Generation
Eden Space:
   capacity = 69206016 (66.0MB)
   used     = 22857000 (21.798133850097656MB)
   free     = 46349016 (44.201866149902344MB)
   33.02747553045099% used
From Space:
   capacity = 5242880 (5.0MB)
   used     = 5223552 (4.9815673828125MB)
   free     = 19328 (0.0184326171875MB)
   99.63134765625% used
To Space:
   capacity = 5242880 (5.0MB)
   used     = 0 (0.0MB)
   free     = 5242880 (5.0MB)
   0.0% used
PS Old Generation
   capacity = 89128960 (85.0MB)
   used     = 14067336 (13.415657043457031MB)
   free     = 75061624 (71.58434295654297MB)
   15.78312593347886% used
PS Perm Generation
   capacity = 22020096 (21.0MB)
   used     = 15539944 (14.820045471191406MB)
   free     = 6480152 (6.179954528808594MB)
   70.57164510091145% used

10750 interned Strings occupying 1540688 bytes.
```

可以看到，堆的大小是年轻代、老年代加上PermGen的总和。年轻代分为Eden和幸存者乐园（From + To）。要知道堆里面有什么，需要柱状视图。

**柱状视图**

柱状视图显示了系统中每个类型的实例占用的内存量，并按占用内存倒序排序，非常直观：

```
$ jmap -histo 25164 | head -30

 num     #instances         #bytes  class name
----------------------------------------------
   1:         46155       20826544  [B
   2:         78977       13845352  [C
   3:          1777       10259592  [I
   4:         28606        3977416  <constMethodKlass>
   5:         28606        3670320  <methodKlass>
   6:          2464        2990888  <constantPoolKlass>
   7:          2193        1756960  <constantPoolCacheKlass>
   8:          2464        1728800  <instanceKlassKlass>
   9:         53032        1272768  java.lang.String
  10:         12669         405408  java.util.HashMap$Entry
  11:          2740         333816  java.lang.Class
  12:          4131         330480  java.lang.reflect.Method
  13:          4488         297968  [S
  14:          4204         287432  [Ljava.lang.Object;
  15:           524         271024  <methodDataKlass>
  16:          4277         228680  [[I
  17:          2107         185416  org.apache.naming.resources.FileDirContext$FileResourceAttributes
  18:          3047         170632  java.util.zip.ZipFile$ZipFileInputStream
  19:           987         167256  [Ljava.util.HashMap$Entry;
  20:          2929         164024  java.util.zip.ZipFile$ZipFileInflaterInputStream
  21:           259         140896  <objArrayKlassKlass>
  22:          4282         137024  java.io.File
  23:          2194         131888  [Ljava.lang.String;
  24:          5483         131592  java.lang.StringBuilder
  25:          2656         127488  java.util.HashMap
  26:          2520         100800  java.lang.ref.Finalizer
  27:          2341          93640  java.util.LinkedHashMap$Entry
```

结果使用的是类型内部名称，例如byte数组会写成[B，char数组会写成[C（字符数组数据经常出现在String对象里）。参考[类文件与字节码](/blog/2014/12/04/lei-wen-jian-yu-zi-jie-ma/)。以char数组为例，共有78977个实例，占用约13.8MB。

使用-histo:live选项，jmap将只处理活对象，而不是整个堆：

```
$ jmap -histo:live 25164 | head -7

 num     #instances         #bytes  class name
----------------------------------------------
   1:         28573        5905704  [C
   2:         28606        3977416  <constMethodKlass>
   3:         28606        3670320  <methodKlass>
   4:          2464        2990888  <constantPoolKlass>
```

活的字符串只有28573个实例，占用约5.9MB，证明有（13.8-5.9）MB在等待回收。需要注意的是，如果jmap正在执行时，JVM做了垃圾回收，有可能看到奇怪或太好的结果，所以应该多运行几次。

**产生离线导出文件**

jmap能创建导出文件：

```
$ jmap -dump:live,format=b,file=heap.hprof 25164
Dumping heap to /Users/mxs/Documents/blog/heap.hprof ...
Heap dump file created
```

导出结果可以用来做离线分析，留给jmap以后使用，或者留给Oracle的jhat（Java堆分析工具）做高级分析。

#### jstat

Oracle JVM自带的jstat可以查看内存和垃圾收集的活动，并能循环显示。下例以每秒一次的频率显示内存状况：

```
meixuesongdeMacBook-Pro:blog mxs$ jstat -gc 25164 1000
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT   
14336.0 13312.0  0.0    0.0   133632.0 85887.5   52224.0    10313.5   33280.0 15221.9      7    0.064   3      0.171    0.236
14336.0 13312.0  0.0    0.0   133632.0 85887.5   52224.0    10313.5   33280.0 15221.9      7    0.064   3      0.171    0.236
```

* S0C和S1C: Survivor0和Survivor1的大小（KB）
* S0U和S1U: Survivor0和Survivor1的已使用大小（KB）
* EC and EU：Eden空间的大小和已经使用大小（KB）
* OC and OU: 老年代空间的大小和已经使用大小（KB）
* PC and PU: Perm空间的大小和已经使用大小（KB）
* YGC and YGCT：YGC为年轻代GC的次数。YGCT显示年轻代GC的累计时间。
* FGC and FGCT：Full GC的次数和累计时间
* GCT：GC总时间，包括年轻代和Full GC。

#### Java VisualVM

另一个可视化的工具是Java VisualVM，在命令行执行`jvisualvm`即可。

### 4.3 与GC相关的JVM参数
JVM的参数非常多。以`-X`开头的选项不是标准选项，在其它JVM上可能不可用。而`-XX`开头的是扩展选项，不要随便使用。很多与性能相关的选项都是扩展选项。

基本的垃圾收集选项可以见本文前面的内存分布图片。主要包括：

* `-Xms`: 堆的初始大小
* `-Xmx`: 堆的最大大小
* `-Xmn`: 堆中年轻大的大小
* `-XX:-DisableExplicitGC`: 让System.gc()调用不产生任何作用。

### 4.4 逸出分析
这是JVM最近的一项修改，开发者不能直接控制或影响这项修改。从Java 6u23之后，逸出分析是默认打开的。

它的基本思路是分析方法并确认其中哪个局部变量只用在方法内部，以及哪些变量不会传入其他方法或从当前方法中返回。JVM可以在当前方法的栈内部创建这个对象，不再使用堆内存。在当前方法返回时，被局部变量占用的内存就自动释放了，因此将减少程序年轻代收集的次数，提高性能。

### 4.5 并发标记清除（CMS）
CMS是Java 5推荐的高性能收集器，在Java 6仍保持了旺盛的生命力。通过以下选项激活：

选项 | 效果
---|---
`-XX:+UseConcMarkSweepGC` | 打开CMS收集
`-XX:+CMSIncrementalMode` | 增量模式（一般都需要）
`-XX:+CMSIncrementalPacing` | 配合增量模式，根据应用的行为自动调整每次执行垃圾回收任务的幅度（一般都需要）
`-XX:+UseParNewGC` | 并发收集年轻代
`-XX:ParallelGCThreads=<N>` | GC使用的线程数

并发方式是如何工作的，以下是重要事实：

* 某种世界停转（SWT）的暂停是不可避免的；
* GC子系统绝对不能漏掉存活对象，这样做会导致JVM垮掉（或更糟）
* 只有所有应用线程都为整体收集暂停下来，才能保证收集所有的垃圾。

CMS利用最后一点，制造两个非常短暂的STW暂停，并且在GC周期的剩余时间和应用程序的线程一起运行。CMS要在运行时做复杂的记账工作，记录哪些是垃圾，哪些不是。CMS在更多CPU核心的机器上表现会更好，并且会制造更频繁的短暂暂停。

### 4.6 新的收集器：G1
G1是Java平台最新的收集器，预发布于Java 6，到Java 7时已是成品。G1有望成为高性能应用的默认选择。

G1与原来的收集器完全不同，开发人员有更多控制权。其核心思想是暂停目标（Pause gaol），也就是程序能为GC暂停多长时间（如每5分钟20ms）。G1会努力达成该目标。

尽管G1仍然使用标记清除法，但它不是真正的分代式垃圾收集器。它把堆分成大小相同的区域（如每个1MB），不区分年轻、老年代。暂停时，对象被撤到其他区域（就像Eden挪到Survivor），清空的区域被放回到空白区自由列表上。

这个新的收集策略让Java平台统计收集单个区域所需平均时长。然后你就可以指定一个合理的暂停目标。G1只会在有限的时间内收集尽可能多的区域。与G1相关的选项如下表：

选项 | 效果
---|---
`-XX:+UseG1GC` | 打开G1收集
`-XX:MaxGCPauseMillis=50` | 收集一次暂停的时间应尽量保持在50ms以内
`-XX:GCPauseIntervalMillis=200` | 两次收集的时间间隔尽量保持在200ms以上。

## 5. HotSpot的JIT编译
Java是一种“动态编译”语言。方法一开始都是以字节码形态存在，JVM对其解释并执行，同时会记录被调用的次数。当调用次数超过某个阈值（默认1万次）时，后台就会把字节码编译成机器码。如果编译成功，以后就会调用该方法的编译结果。编译后的机器码运行速度可能会快1000倍。

那为什么要动态编译，先编译好岂不是性能更好？原因之一是与平台无关的东西作为基本部署单位要更轻松。原因之二是动态编译能提供给编译器更多信息，例如某个指令是否可用，代码运行情况的统计数据等。因此Java这样的动态编译语言实际上可能会比提前编译的语言运行得更快。

HotSpot有两种运行模式：客户端模式和服务器模式，分别对应JVM启动选项：`-client`和`-server`。前者编译时会确保操作的一致性，较为保守。后者编译时会大胆假设，做一次运行时检查，以确保假设有效。编译结果性能好很多。

**实时Java**是近年出现的，它并不一定是最快的。它关注的是让执行操作的时间尽量保持一致。为了达成这个目的，它可能会牺牲一些平均等待时间，整体性能可以受到轻微影响。

**内联**是HotSpot的最大卖点之一。内联的方法不再是被调用，而是直接放到调用者内部。HotSpot会根据运行时的统计数据（方法调用频率）和其他因素来决定如何处理内联。这比提前编译更智能。它完全是自动的，通常不需要修改选项（用处不大）。

**独占调用**

独占调用是大胆优化的例子之一，只有服务端编译器才会做这种大胆优化，实时和客户端编译器都不会这样做。它是基于大量观察做出的优化，以下面的代码为例：

```
MyActualClassNotInterface obj = getInstance();
obj.callMyMethod();
```

如果上面的代码只会在一种类型的对象上调用（基于统计），也就是obj.callMyMethod()几乎不会同时碰到一个类和它的子类。这时就可以把Java方法查找替换为callMyMethod()编译结果的直接调用。为了防止getInstance()可能返回的是其他类，运行时会检查，确保对象的类型是由编译器按预期插入的。如果这个预期被违背，运行时会取消优化。程序不会注意到这些动作也不会犯任何错误。

通过启动选项`-XX:+PrintCompilation`可以告诉JIT编译线程输出标准日志。





  
