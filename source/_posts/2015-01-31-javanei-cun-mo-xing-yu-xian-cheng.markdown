---
layout: post
title: "Java内存模型与线程"
date: 2015-01-31 19:45:39 +0800
comments: true
toc: true
categories: 
- java
---
学习并发编程，需要了解Java内存模型与线程。

<!--more-->

## 1. 硬件的基础
为了提高效率，现在的CPU都有一层读写速度接近处理器运算速度的高速缓存来作为内存与处理器之间的缓冲：将运算需要使用的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存中。

对于多处理器系统，每个处理器都有自己的高速缓存，而它们又共享同一个主内存。因此就存在缓存一致性的问题。当多个处理器的运算任务都涉及同一块主内存区域时，就可能导致各自的缓存数据不一致。为了解决一致性问题，需要遵循一些协议（如MSI, MESI, MOSI等）。

![image](/myresource/images/image_blog_-2015-01-31-19.55.58.png)

乱序执行（Out-Of-Order Execution）优化。为了使处理器内部的运算单元能尽量充分利用，处理器可能会对代码进行乱序执行优化，在计算之后将结果重组，保证该结果与顺序执行的结果一致。也就是处理器并不保证各条语句执行的先后顺序与输入顺序一致。JIT也有类似的指令重排序（Instruction Recorder）优化。

## 2. Java内存模型
### 2.1 主内存与工作内存
JVM规范定义了Java内存模型来屏蔽各种硬件和OS的内存访问差异。该模型规定所有变量都存储在主内存（仅是虚拟机内存的一部分）中，每条线程还有自己的工作内存，线程的工作内存保存了该线程使用到的变量（不是对象，而是对象的引用）的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。

![image](/myresource/images/image_blog_-2015-01-31-20.27.06.png)

### 2.2 内存间交互操作
关于主内存与工作内存之间的交互，Java内存模型定义了8种操作来完成，每种操作都是原子操作。

* lock: 作用于主内存变量，把一个变量标识为一条线程独占状态
* unlock: 作用于主内存变量，释放一个锁定的变量，可以被其他线程锁定
* read: 作用于主内存变量，把一个变量的值从主内存传输到线程的工作内存中，以便load动作使用。
* load: 作用于工作内存变量，把read操作从主内存中得到的变量值放入工作内存变量副本中。
* use: 作用于工作内存变量，把工作内存中的变量的值传递给执行引擎。每当虚拟机遇到一个需要使用变量的值的字节码指令时会执行这个操作。
* assign: 作用于工作内存变量，把从执行引擎接收到的值赋给工作内存变量。每当虚拟机遇到一个给变量赋值的字节码指令时执行此操作。
* store: 作用于工作内存变量，把工作内存中一个变量的值传送到主内存中，以便write操作使用。
* write: 作用于主内存的变量，把store操作从工作内存中得到的变量的值放入主内存的变量中。

### 2.3 volatile变量
#### 2.3.1 可见性
对于volatile变量，具备两个特性：一是保证此变量对所有线程的可见性，即当一个线程修改了这个变量的值，新值对于其他线程来说可以立即得知。实际上volatile变量在各线程的工作内存中也可以存在不一致的情况，但是由于使用之前都要先刷新，因此可以认为不存在一致性问题。但由于Java中的运算不是原子操作，因此volatile在并发下也不一定是安全的。例如下面的代码：

```java
public static volatile int race = 0;

public static void increase() {
	race++;
}

//测试代码：
for(int i = 0; i < 20; i++) {
	...//用20个线程调用increase()方法
	public void run() {
		for(int j = 0; j < 10000; j++) {
			increase();
		}
	}
}

//当20个线程结束后，race的值通常会少于20万。
```

volatile变量与普通变量的区别在于，前者保证新值能立即同步到主内存，并且每次使用前都立即从主内存刷新。对于volatile变量，如果不符合以下两条规则，则仍然要通过加锁来实现同步：

1. 运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。
2. 变量不需要与其他的状态变量共同参与不变约束。

#### 2.3.2 禁止指令重排序优化
volatile变量也用于禁止指令重排序。直接看伪代码：

```java
volatile boolean initialized = false;

//线程A
initConfig() //做一些初始化的工作
initialized = true;

//线程B
while(! initialized) { sleep();}
//使用线程A中初始化好的配置信息
doSomethingWithConfig();
```

如果变量initialized不声明为volatile，则指令重排序后，有可能线程A中的`initialized = true`比`initConfig()`提前执行。导致线程B无法正确获取配置信息。

## 3. Java与线程
主流操作系统都提供了线程实现，Java语言则提供了在不同硬件和操作系统平台下对线程操作的统一处理。线程实现主要有3种方式：

### 3.1 使用内核线程实现
内核线程是由操作系统内核（Kernel）支持的线程。程序并不直接使用内核线程，而是使用轻量级进程（Light Weight Process, LWP）。LWP就是我们通常意义上所讲的线程。每个LWP与内核线程是1：1关系。

内核线程的缺点是调用代价高，需要在用户态和内核态来回切换。同时LWP要消耗一定的内核资源。因此一个系统支持LWP的数量是有限的。

### 3.2 使用用户线程实现
用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核帮助。因此可以支持更大的线程数量，不需要切换到内核，快速且消耗低。进程与用户线程的关系为1：N关系。

由于没有系统内核支援，所有线程操作都需要用户程序自己处理，因此程序比较复杂。Java曾经使用过用户线程，但最终放弃使用它。

### 3.3 使用用户线程加LWP混合实现
这种混合实现方式即存在用户线程，也存在LWP。用户线程还是完全建立在用户空间中，因此创建、切换等操作依然廉价，并且可以支持大规模用户线程并发。而操作系统提供支持的LWP则作为用户线程与内核线程之间的桥梁，可以使用内核提供的线程调度功能及处理器映射，用户线程的系统调用通过LWP完成，大大降低了整个进程被完全阻塞的风险。用户线程与LWP的数量比不定，即N:M的关系。

### 3.4 Java线程的实现
JDK1.2之前使用用户线程实现。从1.2开始，线程模型基于操作系统原生线程模型来实现。对于SunJDK，Windows和Linux版都是使用1：1的线程模型，即一条Java线程映射到一条LWP。而Solaris，HP-UX等则由于操作系统的线程特性，可以同时支持1：1及N:M模型。

## 4. 线程安全
Brian Goetz对线程安全的定义：当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象就是线程安全的。

### 4.1 Java语言中的线程安全
#### 4.1.1 不可变
Java中不可变的对象一定是线程安全的。如果共享的数据是一个基本数据类型，只要在定义时使用了final关键字就可以保证它是不可变的。如果共享数据是一个对象，则需要保证对象的行为不会对其状态产生任何影响。

#### 4.1.2 绝对线程安全
Java API中标注为线程安全的类，大多数都不是绝对的线程安全。例如java.util.Vector是线程安全的容器，其get(), remove()和size()方法都是同步的。但如果不在方法调用端做额外的同步措施，代码仍然是不安全的：

```java
//如果一个线程在操作Vector时，另一个线程删除了了个元素，导致i元素不可再用，就会抛出异常。
private static Vector<Integer> vector = new Vector<Integer>();

public static void main(String[] args) {
	while(true) {
		for(int i = 0; i < 10; i++) {vector.add(i);}
		
		Thread removeThread = new Thread(new Runnable(){
			public void run() {
				for(int i = 0; i < vector.size(); i++) {
					vector.remove(i);
				}
			}
		});
		
		Thread printThread = new Thread(new Runnable(){
			public void run() {
				for(int i = 0; i < vector.size(); i++) {
					System.out.println((vector.get(i)));
				}
			}
		});
		
		removeThread.start();
		printThread.start();
		
		while(Thread.activeCount() > 20);
	}
}
```

#### 4.1.3 相对线程安全
这就是我们平时说的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用时不需要做额外的保障措施。但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。

#### 4.1.4 线程兼容
对象本身并不是线程安全的，但是可以在调用端正确使用同步手段来保证对象在并发环境下可以安全使用。

#### 4.1.5 线程对立
无论调用端是否采取了同步措施，都无法在多线程环境中并发使用。Java中这种代码很少，但Thread的suspend()和resume()方法就是个例子。如果并发情况下，一个尝试中断，另一个尝试恢复线程，无论调用时是否进行了同步，目标线程都存在死锁风险。这两个方法已经声明为Deprecated.

### 4.2 线程安全的实现方法
#### 4.2.1 互斥同步
Java中最基本的互斥同步手段是synchronized关键字。这是一个相对重量级的操作，因为需要进行用户态和核心态的转换。

ReentranLock是另一个同步实现方法。它与synchronized相比，有以下高级功能：

* 等待可中断：如果持有锁的线程长期不释放锁，正在等待锁的线程可以选择放弃。
* 公平锁：多个线程在等待同一个锁时，必须按照申请的顺序依次获得锁。（synchronized是非公平的。 ReentranLock默认也是非公平的，但通过参数可以要求用公平锁）
* 锁绑定多个条件：一个ReentranLock对象可以同时绑定多个Condition对象。

JDK6之后，虚拟机对synchronized性能进行了优化，已经与ReentranLock持平了，未来优化还会偏向于synchronized。因此如果性能满足需要时，可以优先考虑使用synchronized来同步。

#### 4.2.2 非阻塞同步
互斥同步是一种悲观的并发策略，因为不论是否真的存在竞争，它都会加锁。随着硬件指令集的发展，有了另一种选择。基于冲突检测的乐观并发策略，就是先进行操作，如果没有其他线程急用共享数据，那操作就成功。如果产生了冲突，再采取其他的补偿措施。这种乐观的并发策略不需要把线程挂起，因此称为非阻塞同步。

非阻塞同步需要了解CAS指令。它有3个操作数，分别是内存位置（V）、旧的预期值(A)和新值（B）。CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值B更新V的值，否则它就不执行更新。但是无论是否更新了V的值，都会返回V的旧值，这是一个原子操作。

CAS指令看起来很美，但可能产生“ABA”问题。如果V初次读取时是A，并且在准备赋值时检查到它仍然是A，并不能说明它没有被其他线程修改过。因此在此过程中，它可能被改为B，然后再改为A。这时候CAS操作就误以为它从来没有被改变过。当然大部分情况下ABA问题不会影响程序的正确性。

### 4.3 JDK的锁优化
#### 4.3.1 自旋锁与自适应自旋
互斥同步对性能最大的影响是阻塞的实现，因为线程挂起和恢复操作都要转入内核态中完成。很多应用中共享数据的锁定状态只会持续很短的时间，为了这个时间去挂起和恢复线程并不值得。因此不妨让后面的请求线程“稍等一下”，执行一个忙循环（自旋），这就是自旋锁。

自旋锁如果占用时间长了，就失去了自旋的意义，因此JDK6之前的自旋锁超过10次仍然没有成功获得锁，就会改用传统的方式去挂起线程。

JDK6引入了自适应的自旋锁，也就是自旋的时间不固定了，会根据前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。例如前几次成功了，就认为后面也会成功。如果自旋很少成功，以后就可能直接省略自旋，避免浪费资源。

#### 4.3.2 锁消除
通常基于逃逸分析，如果堆上的数据不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们是线程私有的，同步加锁就无须进行。

#### 4.3.3 锁粗化
大部分情况下，我们都要将同步代码块限制得尽量小。但是如果一系列的连续操作导致对同一个对象反复加锁、解锁，虚拟机会把加锁同步的范围扩大，只需要加一次锁就行了。

#### 4.3.4 轻量级锁
轻量级锁的依据是：对于绝大部分锁，在整个同步周期内都是不存在竞争的。因此可以在没有多线程竞争的前提下，减少传统重量级锁使用操作系统互斥量产生的性能消耗。实现原理是在对象头（Object Header）的内存中加入锁标志位，利用CAS操作来实现。

#### 4.3.5 偏向锁
如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不做了。



