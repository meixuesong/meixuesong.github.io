<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Others | 码出人生]]></title>
  <link href="http://blog.ubone.com/blog/categories/others/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2015-11-12T21:48:14+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git常用命令]]></title>
    <link href="http://blog.ubone.com/blog/2015/04/24/gitchang-yong-ming-ling/"/>
    <updated>2015-04-24T18:27:40+08:00</updated>
    <id>http://blog.ubone.com/blog/2015/04/24/gitchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<p>Git是一个分布式版本控制系统。分布式版本控制系统最大的反传统之处在于，可以不需要集中式的版本库，每个人都工作在通过克隆建立的本地版本库中。也就是说每个人都拥有一个完整的版本库，查看提交日志、提交、创建里程碑和分支、合并分支、回退等所有操作都直接在本地完成而不需要网络连接。</p>

<!--more-->


<h2>1. Git配置</h2>

<p>在开始Git之旅之前，我们需要设置一下Git的配置变量，这是一次性的工作。即这些设置会在全局文件（用户主目录下的.gitconfig）或系统文件（如/etc/gitconfig）中做永久的记录。</p>

<p><code>
git config --global user.name "meixuesong"   
git config --global user.email "meixuesong@gmail.com"
git config --global color.ui true #在Git命令输出中开启颜色显示
git config --global alias.co checkout #设置别名
git config --global alias.ci commit #设置别名
git config --global alias.st status #设置别名
git config --global alias.br branch #设置别名
git config -l  # 列出所有配置
</code></p>

<h2>2. 创建版本库</h2>

<p>```</p>

<h1>在工作目录中初始化新仓库</h1>

<p>git init</p>

<h1>从现有仓库克隆</h1>

<p>git clone git://github.com/schacon/grit.git</p>

<h1>从现有仓库克隆，并重命名文件夹</h1>

<p>git clone git://github.com/schacon/grit.git myproject
```</p>

<h2>3. Git的基本概念</h2>

<p>Git工作在三个区，理解这几个概念有助于理解git相关命令：</p>

<ul>
<li>工作目录：git clone 后获得的一份本地的代码，也包括新编辑的，尚未加入版本控制的代码。</li>
<li>暂存区域：git add 后暂存起来，尚未git commit 的代码。</li>
<li>本地仓库：git commit 后正式被版本控制记录起来的代码。</li>
</ul>


<p>如下图所示：</p>

<p><img src="/myresource/images/image_blog_-2015-04-24git_3_kingdom.png" alt="image" /></p>

<p>在工作目录中做的变更，如增加/修改/删除文件，需要使用git add/rm命令将其放到暂存区，git commit命令将暂存区的内容提交到本地仓库。</p>

<h2>4. Git基本操作</h2>

<h3>4.1 检查当前文件状态</h3>

<p><code>git status</code>命令用于确定哪些文件当前处于什么状态。</p>

<p><code>
git status
git status -s
</code></p>

<h3>4.2 跟踪文件</h3>

<p>```</p>

<h1>将指定文件放入暂存区</h1>

<p>git add <file></p>

<h1>将所有修改过的工作文件放入暂存区</h1>

<p>git add .</p>

<h1>进入交互模式，对添加多个文件比较方便</h1>

<p>git add -i
```</p>

<p>对于修改的文件，也是使用git add命令进行暂存。如果同一个文件修改了两次，第一次修改使用git add进行了暂存，第二次没有暂存，则git commit时，只会提交第一次修改的内容。</p>

<h3>4.3 忽略文件</h3>

<p>编辑.gitignore文件，列出要忽略的文件模式。文件 .gitignore 的格式规范如下：</p>

<ul>
<li>所有空行或者以注释符号<code>＃</code>开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配。</li>
<li>匹配模式最后跟反斜杠<code>/</code>说明要忽略的是目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号<code>!</code>取反。</li>
</ul>


<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。示例如下：</p>

<p>```</p>

<h1>此为注释 – 将被 Git 忽略</h1>

<h1>忽略所有 .a 结尾的文件</h1>

<p>*.a</p>

<h1>但 lib.a 除外</h1>

<p>!lib.a</p>

<h1>仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</h1>

<p>/TODO</p>

<h1>忽略 build/ 目录下的所有文件</h1>

<p>build/</p>

<h1>会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</h1>

<p>doc/*.txt</p>

<h1>ignore all .txt files in the doc/ directory</h1>

<p>doc/<em>*/</em>.txt
```</p>

<h3>4.4 查看已暂存和未暂存的更新</h3>

<p>尚未暂存的文件更新了哪些部分，不加参数直接输入git diff. 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p>

<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff &mdash;cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff &mdash;staged，效果是相同的）</p>

<h3>4.5 提交更新</h3>

<p>将暂存区的内容提交到本地版本库。</p>

<p>```</p>

<h1>会启动文本编辑器以便输入备注</h1>

<p>git commit</p>

<h1>直接加上备注</h1>

<p>git commit -m &ldquo;Story 182: Fix benchmarks for speed&rdquo;</p>

<h1>自动把所有已经跟踪过的文件暂存起来一并提交，相当于add和commit</h1>

<p>git commit -a -m &lsquo;added new benchmarks&rsquo;
```</p>

<h3>4.6 移除文件</h3>

<p>git rm 从已跟踪文件清单中移除文件，并从工作目录中删除指定的文件。如果删除之前文件修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f，以防误删除文件后丢失修改的内容。</p>

<p>如果我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中，可以使用: git rm &mdash;cached readme.txt</p>

<p>也可以在移除命令中使用glob 模式，例如：</p>

<p>```</p>

<h1>删除log文件夹下的所有.log文件(*之前的\为转义符)</h1>

<p>$ git rm log/*.log</p>

<h1>递归删除当前目录及其子目录中所有.log文件</h1>

<p>$ git rm *.log
```</p>

<h3>4.7 移动文件</h3>

<p>Git 并不跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么。</p>

<p><code>
$ git mv file_from file_to
</code></p>

<h2>5. 查看提交历史</h2>

<p>git log用于查看提交历史。常用的选项包括：</p>

<ul>
<li>git log -p 展开显示每次提交的内容差异</li>
<li>git log -2 限制输出数量，只显示最近2两次的提交</li>
<li>git log &mdash;pretty=format:&ldquo;%an, %cr %s&rdquo; 格式化输出，显示为：“作者 提交时间 备注”</li>
</ul>


<p>还有按照时间作限制的选项，比如 &mdash;since 和 &mdash;until。下面的命令列出所有最近两周内的提交：<code>$ git log --since=2.weeks</code>. 你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。</p>

<p>还可以给出若干搜索条件，列出符合的提交。用 &mdash;author 选项显示指定作者的提交，用 &mdash;grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 &mdash;all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）。</p>

<p>另一个真正实用的git log选项是路径(path)，如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（&mdash;）隔开之前的选项和后面限定的路径名。</p>

<p>```</p>

<h1>2008 年 10 月期间，gitster提交的但未合并的位于项目t/ 目录下的文件</h1>

<p>$ git log &mdash;pretty=&ldquo;%h &ndash; %s&rdquo; &mdash;author=gitster &mdash;since=&ldquo;2008-10-01&rdquo; \
   &mdash;before=&ldquo;2008-11-01&rdquo; &mdash;no-merges &mdash; t/
```</p>

<h2>6. 撤消操作</h2>

<h3>6.1 修改最后一次提交</h3>

<p>可以使用<code>--amend</code>选项修改最后一次提交。例如下面的三条命令只产生一个提交：</p>

<p><code>
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
</code></p>

<p>第一条命令是普通的提交，提交后才想起来少暂存了一个文件，因此使用第二条命令进行暂存，然后第三条命令修改上一次提交。最终只产生了一次提交。</p>

<h3>6.2 取消已经暂存的文件</h3>

<p>当文件已经暂存，运行<code>git reset HEAD &lt;file&gt;</code>可以取消暂存，即文件又回到已修改未暂存的状态。</p>

<h3>6.3 取消工作区中文件的修改</h3>

<p>相当于svn的revert命令。在git中使用的命令是：<code>git checkout -- &lt;file&gt;</code>。注意，文件将恢复到修改前的版本，可能造成数据丢失。</p>

<h2>7. 远程仓库的使用</h2>

<h3>7.1 查看当前的远程库</h3>

<p><code>git remote</code>会列出每个远程仓库的简短名称。如果克隆了某个项目，至少可以看到一个名为origin的远程库。Git 默认使用这个名字来标识你所克隆的原始仓库。<code>git remote -v</code>显示对应的克隆地址。</p>

<h3>7.2 从远程仓库抓取数据</h3>

<p><code>git fetch [remote-name]</code>会到远程仓库中拉取所有你本地仓库中还没有的数据。<code>git pull</code>从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p>

<h3>7.3 推送数据到远程仓库</h3>

<p><code>git push [remote-name] [branch-name]</code>将本地仓库中的数据推送到远程仓库。通常为：<code>git push origin master</code></p>

<h2>8. 分支</h2>

<p>关于分支，此处只列出常用命令。<a href="http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E4%BD%95%E8%B0%93%E5%88%86%E6%94%AF">这篇教程</a>以图示方式对分支进行了详细说明。</p>

<table>
<thead>
<tr>
<th>命令 </th>
<th> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td>git branch </td>
<td> 列出所有分支</td>
</tr>
<tr>
<td>git branch testing </td>
<td> 创建分支testing</td>
</tr>
<tr>
<td>git checkout testing </td>
<td> 切换到testing 分支</td>
</tr>
<tr>
<td>git checkout -b testing </td>
<td> 相当于执行了上面两个命令</td>
</tr>
<tr>
<td>git merge hotfix </td>
<td> 将hotfix分支修改的内容合并到当前分支</td>
</tr>
<tr>
<td>git branch -d hotfix </td>
<td> 删除hotfix分支</td>
</tr>
<tr>
<td>git branch &mdash;merged </td>
<td> 查看哪些分支已被并入当前分支</td>
</tr>
<tr>
<td>git branch &mdash;no-merged </td>
<td> 查看尚未与当前分支合并的分支</td>
</tr>
<tr>
<td>git push [remote-repository-name] [branch-or-commit-name] </td>
<td> 在远程服务器建立分支. eg. git push origin issue56</td>
</tr>
</tbody>
</table>


<h2>附1 示例：将现有项目提交到Github</h2>

<p>```
cd projectHome
git init
git remote add origin git@github.com:someone/fooproject.git
git pull origin master</p>

<h1>pushes up the repo and its refs for the first time</h1>

<p>git push -u origin &mdash;all</p>

<h1>日常上传</h1>

<p>git push origin master
```</p>

<h2>附2 常用别名</h2>

<p>当使用了<a href="http://ohmyz.sh/">Oh My Zsh</a>，自动开启了git插件，可以使用以下git常用别名：</p>

<table>
<thead>
<tr>
<th></th>
<th> Alias </th>
<th> Command </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> g                    </td>
<td> git                                                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> ga                   </td>
<td> git add                                                                                                                                 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gaa                  </td>
<td> git add &mdash;all                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gapa                 </td>
<td> git add &mdash;patch                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gb                   </td>
<td> git branch                                                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gba                  </td>
<td> git branch -a                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbda                 </td>
<td> git branch &mdash;merged \</td>
<td> command grep -vE &ldquo;^(*\|\s<em>master\s</em>$)&rdquo; \| command xargs -n 1 git branch -d                                      |</td>
</tr>
<tr>
<td></td>
<td> gbl                  </td>
<td> git blame -b -w                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbnm                 </td>
<td> git branch &mdash;no-merged                                                                                                                  </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbr                  </td>
<td> git branch &mdash;remote                                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbs                  </td>
<td> git bisect                                                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbsb                 </td>
<td> git bisect bad                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbsg                 </td>
<td> git bisect good                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbsr                 </td>
<td> git bisect reset                                                                                                                        </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gbss                 </td>
<td> git bisect start                                                                                                                        </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gc                   </td>
<td> git commit -v                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gc!                  </td>
<td> git commit -v &mdash;amend                                                                                                                   </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gca                  </td>
<td> git commit -v -a</td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcam                 </td>
<td> git commit -a -m                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gca!                 </td>
<td> git commit -v -a &mdash;amend                                                                                                                </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcan!                </td>
<td> git commit -v -a -s &mdash;no-edit &mdash;amend                                                                                                   </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcb                  </td>
<td> git checkout -b                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcf                  </td>
<td> git config &mdash;list                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcl                  </td>
<td> git clone &mdash;recursive                                                                                                                   </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gclean               </td>
<td> git reset &mdash;hard &amp;&amp; git clean -dfx                                                                                                      </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcm                  </td>
<td> git checkout master                                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcmsg                </td>
<td> git commit -m                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gco                  </td>
<td> git checkout                                                                                                                            </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcount               </td>
<td> git shortlog -sn                                                                                                                        </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcp                  </td>
<td> git cherry-pick                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gcs                  </td>
<td> git commit -S                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gd                   </td>
<td> git diff                                                                                                                                </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gdca                 </td>
<td> git diff &mdash;cached                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gdt                  </td>
<td> git diff-tree &mdash;no-commit-id &mdash;name-only -r                                                                                             </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gdw                  </td>
<td> git diff &mdash;word-diff                                                                                                                    </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gf                   </td>
<td> git fetch                                                                                                                               </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gfa                  </td>
<td> git fetch &mdash;all &mdash;prune                                                                                                                 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gfo                  </td>
<td> git fetch origin                                                                                                                        </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gg                   </td>
<td> git gui citool                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gga                  </td>
<td> git gui citool &mdash;amend                                                                                                                  </td>
<td></td>
</tr>
<tr>
<td></td>
<td> ggpull               </td>
<td> ggl                                                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> ggpur                </td>
<td> ggu                                                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> ggpush               </td>
<td> ggp                                                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> ggsup                </td>
<td> git branch &mdash;set-upstream-to = origin/$(current_branch)                                                                                 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gignore              </td>
<td> git update-index &mdash;assume-unchanged                                                                                                     </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gignored             </td>
<td> git ls-files -v \</td>
<td> grep &ldquo;^[[:lower:]]&rdquo;                                                                                                  |</td>
</tr>
<tr>
<td></td>
<td> git-svn-dcommit-push </td>
<td> git svn dcommit &amp;&amp; git push github master:svntrunk                                                                                      </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gk                   </td>
<td> \gitk &mdash;all &mdash;branches                                                                                                                  </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gke                  </td>
<td> \gitk &mdash;all $(git log -g &mdash;pretty = format:%h)                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gl                   </td>
<td> git pull                                                                                                                                </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glg                  </td>
<td> git log &mdash;stat &mdash;color                                                                                                                  </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glgg                 </td>
<td> git log &mdash;graph &mdash;color                                                                                                                 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glgga                </td>
<td> git log &mdash;graph &mdash;decorate &mdash;all                                                                                                        </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glgm                 </td>
<td> git log &mdash;graph &mdash;max-count = 10                                                                                                        </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glgp                 </td>
<td> git log &mdash;stat &mdash;color -p                                                                                                               </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glo                  </td>
<td> git log &mdash;oneline &mdash;decorate &mdash;color                                                                                                    </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glog                 </td>
<td> git log &mdash;oneline &mdash;decorate &mdash;color &mdash;graph                                                                                            </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glol                 </td>
<td> git log &mdash;graph &mdash;pretty = format:&lsquo;%Cred%h%Creset &ndash;%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset&rsquo; &mdash;abbrev-commit       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glola                </td>
<td> git log &mdash;graph &mdash;pretty = format:&lsquo;%Cred%h%Creset &ndash;%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset&rsquo; &mdash;abbrev-commit &mdash;all </td>
<td></td>
</tr>
<tr>
<td></td>
<td> glp                  </td>
<td> _git_log_prettily                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gm                   </td>
<td> git merge                                                                                                                               </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gmom                 </td>
<td> git merge origin/master                                                                                                                 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gmt                  </td>
<td> git mergetool &mdash;no-prompt                                                                                                               </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gmtvim               </td>
<td> git mergetool &mdash;no-prompt &mdash;tool = vimdiff                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gmum                 </td>
<td> git merge upstream/master                                                                                                               </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gp                   </td>
<td> git push                                                                                                                                </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gpd                  </td>
<td> git push &mdash;dry-run                                                                                                                      </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gpoat                </td>
<td> git push origin &mdash;all &amp;&amp; git push origin &mdash;tags                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gpu                  </td>
<td> git push upstream                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gpv                  </td>
<td> git push -v                                                                                                                             </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gr                   </td>
<td> git remote                                                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gra                  </td>
<td> git remote add                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grb                  </td>
<td> git rebase                                                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grba                 </td>
<td> git rebase &mdash;abort                                                                                                                      </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grbc                 </td>
<td> git rebase &mdash;continue                                                                                                                   </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grbi                 </td>
<td> git rebase -i                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grbm                 </td>
<td> git rebase master                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grbs                 </td>
<td> git rebase &mdash;skip                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grh                  </td>
<td> git reset HEAD                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grhh                 </td>
<td> git reset HEAD &mdash;hard                                                                                                                   </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grmv                 </td>
<td> git remote rename                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grrm                 </td>
<td> git remote remove                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grset                </td>
<td> git remote set-url                                                                                                                      </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grt                  </td>
<td> cd $(git rev-parse &mdash;show-toplevel \</td>
<td>\| echo &ldquo;.&rdquo;)                                                                                       |</td>
</tr>
<tr>
<td></td>
<td> gru                  </td>
<td> git reset &mdash;                                                                                                                            </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grup                 </td>
<td> git remote update                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> grv                  </td>
<td> git remote -v                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsb                  </td>
<td> git status -sb                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsd                  </td>
<td> git svn dcommit                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsi                  </td>
<td> git submodule init                                                                                                                      </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsps                 </td>
<td> git show &mdash;pretty = short &mdash;show-signature                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsr                  </td>
<td> git svn rebase                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gss                  </td>
<td> git status -s                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gst                  </td>
<td> git status                                                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsta                 </td>
<td> git stash                                                                                                                               </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gstaa                </td>
<td> git stash apply                                                                                                                         </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gstd                 </td>
<td> git stash drop                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gstl                 </td>
<td> git stash list                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gstp                 </td>
<td> git stash pop                                                                                                                           </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsts                 </td>
<td> git stash show &mdash;text                                                                                                                   </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gsu                  </td>
<td> git submodule update                                                                                                                    </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gts                  </td>
<td> git tag -s                                                                                                                              </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gunignore            </td>
<td> git update-index &mdash;no-assume-unchanged                                                                                                  </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gunwip               </td>
<td> git log -n 1 \</td>
<td> grep -q -c &ldquo;--wip--&rdquo; &amp;&amp; git reset HEAD~1                                                                            |</td>
</tr>
<tr>
<td></td>
<td> gup                  </td>
<td> git pull &mdash;rebase                                                                                                                       </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gupv                 </td>
<td> git pull &mdash;rebase -v                                                                                                                    </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gvt                  </td>
<td> git verify-tag                                                                                                                          </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gwch                 </td>
<td> git whatchanged -p &mdash;abbrev-commit &mdash;pretty = medium                                                                                    </td>
<td></td>
</tr>
<tr>
<td></td>
<td> gwip                 </td>
<td> git add -A; git rm $(git ls-files &mdash;deleted) 2> /dev/null; git commit -m &ldquo;&mdash;wip&mdash;&rdquo;                                                      </td>
<td></td>
</tr>
</tbody>
</table>


<h2>附3 常用命令：</h2>

<p><img src="/myresource/images/git-2015-07-26.png" alt="image" /></p>

<p>参考： <a href="http://git-scm.com/book/zh/v1">http://git-scm.com/book/zh/v1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA Mac快捷键]]></title>
    <link href="http://blog.ubone.com/blog/2015/04/02/intellij-idea-mackuai-jie-jian/"/>
    <updated>2015-04-02T11:12:07+08:00</updated>
    <id>http://blog.ubone.com/blog/2015/04/02/intellij-idea-mackuai-jie-jian</id>
    <content type="html"><![CDATA[<p>从Eclipse换成IntelliJ IDEA，记录常用的快捷键。</p>

<!--more-->


<table>
<thead>
<tr>
<th>快捷键 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^+space</code> </td>
<td> 代码提示</td>
</tr>
<tr>
<td><code>Shift+Command+回车</code> </td>
<td> 代码提示后的操作，Choose Lookup Item and Invoke Complete Statement</td>
</tr>
<tr>
<td><code>^+.</code> </td>
<td> 代码提示后的操作，Choose Lookup Item Dot</td>
</tr>
<tr>
<td><code>^+Shift+数字</code> </td>
<td> Toggle bookmark 0-9，然后再按^+数字可以返回此处</td>
</tr>
<tr>
<td><code>Command + [ or ]</code> </td>
<td> 将光标移到代码块的“｛”或者“｝”处。</td>
</tr>
<tr>
<td><code>Command + Shift + [ or ]</code> </td>
<td> 将光标移到代码块的“｛”或者“｝”处，同时完成选择操作。</td>
</tr>
<tr>
<td><code>Command+Y</code> </td>
<td> 删除当前行</td>
</tr>
<tr>
<td><code>Option+Delete</code> </td>
<td> 往前删除一个单词</td>
</tr>
<tr>
<td><code>Command+D</code> </td>
<td> 复制一行或者代码块</td>
</tr>
<tr>
<td><code>^+Shift+J</code> </td>
<td> 合并行</td>
</tr>
<tr>
<td><code>Command+左右箭头</code> </td>
<td> 光标移到行首或行尾，加上shift键可以选择</td>
</tr>
<tr>
<td><code>Command+上下箭头</code> </td>
<td> 屏幕上移一行或下移一行。</td>
</tr>
<tr>
<td><code>Command+Shift+上下箭头</code> </td>
<td> 将当前行上移或下移，交换位置</td>
</tr>
<tr>
<td><code>Option++左右箭头</code> </td>
<td> 光标左右移动，每次一个单词，加上shift键可以选择</td>
</tr>
<tr>
<td><code>Command+W</code> </td>
<td> 选中当前单词</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>菜单快捷键 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^+N ^+Return</code> </td>
<td> 生成Getter/Setter等代码</td>
</tr>
<tr>
<td><code>Command+,</code> </td>
<td> preferences</td>
</tr>
<tr>
<td><code>Command+;</code> </td>
<td> Project structure</td>
</tr>
<tr>
<td><code>Command+S</code> </td>
<td> Save all</td>
</tr>
<tr>
<td><code>Option+Command+Y</code> </td>
<td> Synchronize</td>
</tr>
<tr>
<td><code>Command+Q</code> </td>
<td> Exit</td>
</tr>
<tr>
<td><code>Shift+Command+Z</code> </td>
<td> Redo</td>
</tr>
<tr>
<td><code>Command+F</code> </td>
<td> Find&hellip;</td>
</tr>
<tr>
<td><code>Command+R</code> </td>
<td> Replace&hellip;</td>
</tr>
<tr>
<td><code>F3</code> </td>
<td> Find next</td>
</tr>
<tr>
<td><code>Shift+F3</code> </td>
<td> Find Previous</td>
</tr>
<tr>
<td><code>Command+F3</code> </td>
<td> 查找当前单词</td>
</tr>
<tr>
<td><code>Control+Command+G</code> </td>
<td> Select All Occurrences</td>
</tr>
<tr>
<td><code>Control+G</code> </td>
<td> Select Next Occurrence</td>
</tr>
<tr>
<td><code>Control+Shift+G</code> </td>
<td> Unselect Occurrence</td>
</tr>
<tr>
<td><code>Control+Shift+F</code> </td>
<td> Find in Path</td>
</tr>
<tr>
<td><code>Control+Shift+R</code> </td>
<td> Replace in Path</td>
</tr>
<tr>
<td><code>Shift+Command+S</code> </td>
<td> Search Structurally</td>
</tr>
<tr>
<td><code>Option+F7</code> </td>
<td> Find Usages</td>
</tr>
<tr>
<td><code>Command+F7</code> </td>
<td> Find Usages in File</td>
</tr>
<tr>
<td><code>Command+1</code> </td>
<td> Tool Windows &ndash; Project</td>
</tr>
<tr>
<td><code>Command+2</code> </td>
<td> Tool Windows &ndash; Favorites</td>
</tr>
<tr>
<td><code>Command+3</code> </td>
<td> Tool Windows &ndash; Find</td>
</tr>
<tr>
<td><code>Command+4</code> </td>
<td> Tool Windows &ndash; Run</td>
</tr>
<tr>
<td><code>Command+5</code> </td>
<td> Tool Windows &ndash; Debug</td>
</tr>
<tr>
<td><code>Command+6</code> </td>
<td> Tool Windows &ndash; TODO</td>
</tr>
<tr>
<td><code>Command+7</code> </td>
<td> Tool Windows &ndash; Structure</td>
</tr>
<tr>
<td><code>Option+F12</code> </td>
<td> Terminal</td>
</tr>
<tr>
<td><code>Shift+Command+I</code> </td>
<td> Quick Definition. 快速显示光标所在方法名的定义/实现</td>
</tr>
<tr>
<td><code>Control+J</code> </td>
<td> 显示光标所在方法名的文档</td>
</tr>
<tr>
<td><code>Command+F1</code> </td>
<td> 显示光标所在代码的错误信息</td>
</tr>
<tr>
<td><code>F4</code> </td>
<td> 从当前方法名跳转到代码</td>
</tr>
<tr>
<td><code>Command+E</code> </td>
<td> 最近的文件</td>
</tr>
<tr>
<td><code>Command+Shift+E</code> </td>
<td> 最近修改的文件</td>
</tr>
<tr>
<td><code>Control+Command+F</code> </td>
<td> Toggle Full Screen</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>Navigate快捷键 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Command+N</code> </td>
<td> 打开Class</td>
</tr>
<tr>
<td><code>Command+Shift+N</code> </td>
<td> 打开文件</td>
</tr>
<tr>
<td><code>Option+Shift+Command+N</code> </td>
<td> Symbol&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+左箭头</code> </td>
<td> Back</td>
</tr>
<tr>
<td><code>Option+Command+右箭头</code> </td>
<td> Forward</td>
</tr>
<tr>
<td><code>Shift+Command+Backspace</code> </td>
<td> Last Edit Location</td>
</tr>
<tr>
<td><code>Option+F1</code> </td>
<td> Select In&hellip;</td>
</tr>
<tr>
<td><code>Command+B</code> </td>
<td> 跳转到方法声明</td>
</tr>
<tr>
<td><code>Option+Command+B</code> </td>
<td> 跳转到方法实现</td>
</tr>
<tr>
<td><code>Shift+Command+T</code> </td>
<td> Test</td>
</tr>
<tr>
<td><code>Command+F12</code> </td>
<td> 显示当前文件的结构（方法列表）</td>
</tr>
<tr>
<td><code>Control+H</code> </td>
<td> 显示当前类的继承结构</td>
</tr>
<tr>
<td><code>Shift+Command+H</code> </td>
<td> Method Hierarchy</td>
</tr>
<tr>
<td><code>Control+Alt+H</code> </td>
<td> Call Hierarchy</td>
</tr>
<tr>
<td><code>F2</code> </td>
<td> Next Highlighted Error</td>
</tr>
<tr>
<td><code>Shift+F2</code> </td>
<td> Previous Highlighted Error</td>
</tr>
<tr>
<td><code>Option+Command+上箭头</code> </td>
<td> Previous Occurrence</td>
</tr>
<tr>
<td><code>Option+Command+下箭头</code> </td>
<td> Next Occurrence</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>Code快捷键 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Command+O</code> </td>
<td> Override Methods&hellip;</td>
</tr>
<tr>
<td><code>Command+I</code> </td>
<td> Implement Methods&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+T</code> </td>
<td> Surround With&hellip;</td>
</tr>
<tr>
<td><code>Control+Space</code> </td>
<td> Basic Completion</td>
</tr>
<tr>
<td><code>Command+ +/-</code> </td>
<td> 将当前代码块卷起或展开</td>
</tr>
<tr>
<td><code>Command+J</code> </td>
<td> Insert Live Template&hellip;</td>
</tr>
<tr>
<td><code>Control+Shift+/</code> </td>
<td> Comment with Block Comment</td>
</tr>
<tr>
<td><code>Option+Command+L</code> </td>
<td> Reformat Code&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+O</code> </td>
<td> Optimize Imports&hellip;</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>Refactor快捷键 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Option+Shift+Command+T</code> </td>
<td> Refactor this&hellip;</td>
</tr>
<tr>
<td><code>Shift+F6</code> </td>
<td> Rename&hellip;</td>
</tr>
<tr>
<td><code>Command+F6</code> </td>
<td> Change Signature</td>
</tr>
<tr>
<td><code>F6</code> </td>
<td> Move&hellip;</td>
</tr>
<tr>
<td><code>F5</code> </td>
<td> Copy&hellip;</td>
</tr>
<tr>
<td><code>Command+Delete</code> </td>
<td> Safe Delete&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+V</code> </td>
<td> Extract Variable&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+C</code> </td>
<td> Extract Constant&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+F</code> </td>
<td> Extract Field&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+P</code> </td>
<td> Extract Parameter&hellip;</td>
</tr>
<tr>
<td><code>Option+Command+M</code> </td>
<td> Extract Method&hellip;</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>Build Run 快捷键 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Command+F9</code> </td>
<td> Make Project</td>
</tr>
<tr>
<td><code>Shift+F10</code> </td>
<td> Run</td>
</tr>
<tr>
<td><code>Option+Shift+F10</code> </td>
<td> Run&hellip;</td>
</tr>
<tr>
<td><code>Option+F9</code> </td>
<td> Run to Cursor</td>
</tr>
<tr>
<td><code>Shift+F9</code> </td>
<td> Debug</td>
</tr>
<tr>
<td><code>Option+Shift+F9</code> </td>
<td> Debug&hellip;</td>
</tr>
<tr>
<td><code>Command+F2</code> </td>
<td> Stop</td>
</tr>
<tr>
<td><code>F8</code> </td>
<td> Step Over</td>
</tr>
<tr>
<td><code>Option+Shift+F8</code> </td>
<td> Force Step Over</td>
</tr>
<tr>
<td><code>F7</code> </td>
<td> Step Into</td>
</tr>
<tr>
<td><code>Option+Shift+F7</code> </td>
<td> Force Step Into</td>
</tr>
<tr>
<td><code>F9</code> </td>
<td> Resume Program</td>
</tr>
<tr>
<td><code>Option+F8</code> </td>
<td> Evaluation Expression&hellip;</td>
</tr>
<tr>
<td><code>Option+F10</code> </td>
<td> Show Execution Point</td>
</tr>
<tr>
<td><code>Command+F8</code> </td>
<td> Toggle Line BreakPoint</td>
</tr>
<tr>
<td><code>Shift+Command+F8</code> </td>
<td> View Breakpoints&hellip;</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[发布两款自用的GAE应用]]></title>
    <link href="http://blog.ubone.com/blog/2014/10/27/fa-bu-liang-kuan-zi-yong-de-gaeying-yong/"/>
    <updated>2014-10-27T22:58:19+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/10/27/fa-bu-liang-kuan-zi-yong-de-gaeying-yong</id>
    <content type="html"><![CDATA[<p>今天正式公开我的两款GAE(Google App Engine)应用：RSS2EPUB和背单词应用。供有需要的朋友使用。</p>

<!--more-->


<h2>RSS2EPUB/MOBI</h2>

<p>RSS2EPUB用于将RSS订阅全文转换成Epub或者MOBI格式，每天推送至邮箱或Kindle等阅读器。开发这款应用的目的主要是想专注于阅读，少一些网络的干扰。使用说明见：<a href="https://github.com/meixuesong/rss2epub">https://github.com/meixuesong/rss2epub</a></p>

<p>网址：<a href="rss2epub.appspot.com">http://rss2epub.appspot.com</a></p>

<h2>背单词</h2>

<p>背单词应用是我数年前开发的一款应用，也是第一次使用GAE。之后对页面升级改造过一次。这个应用提供了“词典”和“我的生词本”功能。词典内容来源于Collins英语学习词典和Collins英汉双解词典，并按四、六级和专四、专八进行了分类。系统按照记忆曲线列出您每天应该复习的单词。另外例句默写是非常有效的强化记忆功能，系统自动列出单词的所有例句，将单词空出来，默写完后可以检查答案。</p>

<p>网址：<a href="http://enubone.appspot.com">http://enubone.appspot.com</a></p>

<h2>注</h2>

<p>这两个应用都部署在Google的云上，所以需要翻墙才能使用。翻墙是我等这么多年练出的拿手绝活，应该不在话下。</p>

<p>GAE与几年前相比，不论是功能还是文档都有了长足进步，现在上手已经很简单了，最关键是免费，并且从GAE访问国外资源不会被墙。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终于完成RSS2EPUB的项目]]></title>
    <link href="http://blog.ubone.com/blog/2014/10/18/zhong-yu-wan-cheng-rss2epubde-xiang-mu/"/>
    <updated>2014-10-18T22:37:33+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/10/18/zhong-yu-wan-cheng-rss2epubde-xiang-mu</id>
    <content type="html"><![CDATA[<p>国庆期间，自从10月5日完成博客转EPUB电子书后，脑子突然短路，是不是可以把RSS订阅的内容也自动转成EPUB电子书呢？然后就没停下来，利用业余时间终于完成了，各项功能基本完善！</p>

<p>这个项目运行于GAE平台，接受用户订阅，然后每天把最新内容生成电子书发邮件给用户。</p>

<p>运行于GAE平台的好处是直接使用Google的云服务，特别是邮件服务和图片服务非常棒！但坏处是Google被墙，国内无法直接访问。所以又开发了邮件订阅的方法。总体来说效果不错！</p>

<p>项目地址：<a href="http://rss2epub.appspot.com/">http://rss2epub.appspot.com</a></p>

<p>使用方法参考：<a href="https://github.com/meixuesong/rss2epub">RSS2EPUB</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Jekyll(Octopress)将博客生成EPUB和Mobi电子书]]></title>
    <link href="http://blog.ubone.com/blog/2014/10/05/ji-yu-jekyll-sheng-cheng-dian-zi-shu/"/>
    <updated>2014-10-05T21:03:50+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/10/05/ji-yu-jekyll-sheng-cheng-dian-zi-shu</id>
    <content type="html"><![CDATA[<p>采用Octopress，基于Jekyll，<a href="/blog/2014/06/25/zai-githubshang-xie-bo-ke/">在GitHub上写博客</a>已经快一年了。随着博客的增多，有了一个想法，如果能将这些博客整理成册，变成电子书放入Kindle，有空时温习一下，那该多好。今天进行了尝试，效果还不错。</p>

<!--more-->


<p>Kindle默认支持的电子书格式是Mobi，但开源软件很少支持这种格式。电子书格式最普及的还是EPUB，而Amazon提供了从EPUB转为Mobi的支持。因此我们的第一步是将博客转换成EPUB格式的电子书。</p>

<h2>1. 准备工作</h2>

<p>在Github上找到了一个项目<a href="https://github.com/lmullen/jekyll-ebook">Jekyll E-book</a>，支持将Jekyll博客转换成EPUB电子书。按照其说明，以管理员身份安装：</p>

<p><code>bash
gem install jekyll-ebook
</code></p>

<p>然后安装Pandoc，打开<a href="https://github.com/jgm/pandoc/releases">下载页面</a>，下载相应系统的安装包，安装完成后，确保命令能够识别：</p>

<p><code>bash
pandoc --version
</code></p>

<p>现在就可以开始准备生成EPUB电子书了。需要先定义这本书的标题等信息，以及书中包括哪些博客。这些信息都保存在manifest.yml中，这是一个YAML格式的文件。分两部分说明这个文件的内容，我们先看第一部分：文件的定义。</p>

<p><code>
title: meixuesong blog
author: Jason Mei
date: October 2014
epub-filename: /Users/mxs/Documents/jasonblog.epub
epub-cover-image: myresource/epub/cover.jpg
epub-stylesheet: myresource/epub/stylesheet.css
epub-metadata: myresource/epub/metadata.xml
epub-dir: /Users/mxs/Documents/blog/
header-items:
- title: meixuesong blog
- author: meixuesong
- author-note: na
- citation: na
</code></p>

<p>其中要注意的是路径，<code>epub-dir</code>是博客资源的根路径，其中文件夹如<code>epub-cover-image</code>, <code>epub-stylesheet</code>和<code>epub-metadata</code>都是相对根路径的相对路径。<code>metadata.xml</code>是EPUB文件所需的文件，可以是个空文件。为了美观，我们稍微修改了stylesheet.css：</p>

<p><code>css
/*stylesheet.css*/
body { margin: 5%; text-align: justify; font-size: medium; }
code { font-family: monospace; font-size:0.75em;}
h1 { text-align: center; margin:0px; padding:0px;font-size:1.5em; border-bottom: black solid 1px;}
h2 { text-align: left; margin:0px; padding:0px;font-size:1.2em;}
h3 { text-align: left; margin:0px; padding:0px;font-size:1.1em;}
h4 { text-align: left; margin:0px; padding:0px; font-size:1em;}
h5 { text-align: left; }
h6 { text-align: left; }
h1.title { }
h2.author { }
h3.date { }
ol.toc { padding: 0; margin-left: 1em; }
ol.toc li { list-style-type: none; margin: 0; padding: 0; }
</code></p>

<p>开始定义第二部分，章节定义。这部分比较简单，就是定义书中包含哪几章，名字是什么，每章包括哪些博客。示例如下：</p>

<p>```
content-dir: _posts/   #博客所在的相对路径
contents:
  &ndash; section-title: Articles   #章节名称</p>

<pre><code>files:                    #该章以下包括哪些内容
- article1.markdown
- article2.markdown
</code></pre>

<ul>
<li>section-title: Reviews
files:

<ul>
<li>review.markdown
```</li>
</ul>
</li>
</ul>


<h2>2. 生成EPUB电子书</h2>

<p>完成<code>manifest.yml</code>的定义之后，就可以开始生成电子书了：</p>

<p><code>bash
jekyll-ebook manifest.yml
</code></p>

<p>EPUB电子书就这样生成了，字体完美，甚至还有代码高亮显示功能，电子书的目录默认显示到第三级，在Kindle上看显得多了，需要改为只显示第1级，即目录只显示文章标题，而不用详细到每章的<code>h3</code>级内容。另外图片显示不正常，应该是路径不正确。</p>

<p>先来解决第一个问题，将目录级别改为只显示第1级标题。可以修改文件<code>ebook.rb</code>，在Mac OSX下，这个文件位于：</p>

<p>```ruby</p>

<h1>文件路径：</h1>

<p>/Library/Ruby/Gems/2.0.0/gems/jekyll-ebook-0.0.2/lib/jekyll-ebook/ebook.rb</p>

<h1>修改代码，加上：'toc-depth' => 1,</h1>

<p>PandocRuby.new( self.generate_content ,</p>

<pre><code>               {:f =&gt; :markdown, :to =&gt; :epub},
               'smart', 'o' =&gt; self.manifest['epub-filename'],
               'toc-depth' =&gt; 1,
</code></pre>

<p>```</p>

<p>再来解决图片不显示的问题。该问题主要是因为写博客时，图片的地址为<code>/myresource/images/</code>，因此在生成电子书无法找到这个绝对路径。解决办法使用<code>ln</code>命令在根文件夹下建立一个符号连接myresource，Windows下好像是<code>mklink</code>命令。重新生成电子书，问题解决。</p>

<p>现在，我们的EPUB电子书通过Kindle多看系统阅读已经非常完美了。接下来我们尝试一下Mobi格式的电子书。</p>

<h2>3. 生成Mobi电子书</h2>

<p>Amazon提供了一个工具包<a href="http://www.amazon.com/gp/feature.html?docId=1000765211">KindleGen</a>。该工具可以将html、EPUB等转换成Mobi格式。下载解压缩后，就可以执行命令转换了：</p>

<p><code>bash
./kindlegen -locale zh aaa.epub
</code>
分别在原生Kindle和多看系统下查看这个mobi电子书，整体效果还是不错的，但是相比EPUB来说，还是差了那么一点点。例如h1到h3的标题下方空白的内容太多，也就是CSS中的margin-bottom值太大，但不论怎么修改，Mobi格式的显示效果好像都没有变化。最后还是选择继续使用多看系统，阅读EPUB格式的电子书。</p>

<p>【Update,2014-12-21】现在使用<a href="http://rss2epub.appspot.com/">RSS2EPUB</a>已经可以直接生成Epub或Kindle电子书了。</p>
]]></content>
  </entry>
  
</feed>
