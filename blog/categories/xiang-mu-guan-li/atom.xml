<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 项目管理 | 码出人生]]></title>
  <link href="http://blog.ubone.com/blog/categories/xiang-mu-guan-li/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2014-11-02T23:18:25+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[采用界面原型和系统用例描述需求]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/30/xu-qiu-yu-yong-li/"/>
    <updated>2014-06-30T20:26:24+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/30/xu-qiu-yu-yong-li</id>
    <content type="html"><![CDATA[<p>需求、文档是软件开发过程中两个最头疼的问题。什么是需求？软件没开发出来时，看不见摸不着。文档化是一种办法，但各种各样的文档、标准和格式。还没开始写就已经让人望而却步了。文档并不是越少越好，也不是越多越好，应该根据项目的的特点决定采用何种方式去描述需求。</p>

<!--more-->


<p>对于非关键性应用，我认为采用界面原型＋系统用例是一种很好的描述需求的方法。界面原型描述了系统的界面元素，用例描述了用户与这些界面元素的交互过程。这种方式既能够避免文档过重，又可以为开发和测试人员提供完整而明确的指引，迅速推动项目进程。</p>

<h2>1.一个例子</h2>

<p>在产品经理的眼中，一图胜千言，有了界面原型，或者有了高保真图，开发人员就明白需求是什么，就可以开发产品了。真的是这样吗？</p>

<p>我们来看一个最简单的例子：系统登录。产品经理提供的需求包括一个Excel表格和一些原型图。Excel中列出了所有的功能需求，其中有一行记录，标题是“系统登录”，内容是“使用手机号和密码登录”。产品经理心里想，这么简单的东西还要写文档吗？给，这还有一张高保真图，需求够明确了吧！</p>

<p><img src="/myresource/images/img_blog_20140629.jpg" alt="image" /></p>

<p>开发人员拿到需求后，有几种可能：</p>

<ol>
<li>新手甲：这个太简单了，马上就开始干。结果很可能不是你想像。</li>
<li>老手乙：这个简单，原来做过类似的功能，按既定方针办！但每个系统都有其特点，并不能完全抄袭。</li>
<li>老手丙：好像比较简单，但是又感觉不好下手，貌似还有些问题不确定：</li>
</ol>


<blockquote><ul>
<li>如果输入的手机号长度不够怎么办？登录按钮可用吗？</li>
<li>密码最少要几位数？要限制吗？如果长度不够，登录按钮可用吗？</li>
<li>如果手机号或者密码不正确怎么办？弹出对话框进行提示？这种体验好像不太好，把错误信息显示在某个地方？错误信息写成啥呢？“手机号码或密码不正确！” or “请输入正确的手机号码和密码！” or &hellip;</li>
<li>这是个企业应用，手机号应该是服务端已经存在的。如果用户输入的手机号在服务端不存在，应该怎么提示？</li>
<li>这个记住密码是什么意思？下次打开应用不需要再输入密码？下次打开应用直接跳过这个登录窗口？</li>
<li>记住密码是默认打勾？</li>
<li>手机号码要记住吗？</li>
</ul>
</blockquote>

<p>看来不确定的问题太多，看看腾讯的微信是怎么做的。啥？它没有“记住密码”的功能？</p>

<p>你看，一个最简单的需求就可能让开发人员产生这么多的疑问。你能理解丙内心的纠结吗？</p>

<p>我们永远无法用文档去描述所有的需求，但我们应该尽可能地把需求准确、完整地描述出来。否则开发出来的产品一定不是你要的结果。尽管我们可以通过沟通来解决一些问题，可是别忘了：越早解决问题，成本越低。</p>

<p>而用例分析可以帮助产品经理从系统的角度去分析需求，产出明确、完整的需求文档。</p>

<h2>2.用例是什么？</h2>

<p>用例是各干系人就系统行为所达成的契约。用例描述了在不同条件下，系统对Actor的请求进行响应时发生的行为。用例是需求，它可以准确地描述系统行为。但用例不代表所有的需求，它只是一部分非常重要的需求，可能占1/3，还有很多其它的需求，例如外部接口、数据格式、业务规则和公式等等。</p>

<p>用例的另一个主要作用体现在对异常情况的描述上。产品讨论时，很容易集中在成功场景。如果那些离散的用例步骤和失败情况没有集中讨论，那么许多错误和异常情况就不能在程序员编码前发现，然后就会因为各种原因（沟通不畅、上线期限、重新组织讨论的难度等等）导致这些异常情况得不到很好的确认和处理，程序员就只能想当然地按自己的想法开发。这最终将会影响代码和产品的质量。</p>

<h2>3.用例示例</h2>

<p>我们以系统登录为例，尝试编写一个用例：</p>

<p>```
用例编号：UC1-001
用例名称：系统登录
用例描述：</p>

<pre><code>    系统登录。
</code></pre>

<p>参与者：</p>

<pre><code>所有用户。 
</code></pre>

<p>前置条件：</p>

<pre><code>无
</code></pre>

<p>后置条件：</p>

<pre><code>Actor成功登录。    
</code></pre>

<p>基本路径</p>

<pre><code>1. 系统显示登录窗口，“记住密码”默认选中，登录按钮不可用。
2. Actor输入11位手机号码和至少6位密码。
3. 系统将“登录”按钮变为可用。
4. Actor点击“登录”按钮。
5. 系统验证成功后完成登录，打开首页。
</code></pre>

<p>扩展点：</p>

<pre><code>1a. 上次登录成功且勾选了“记住密码”：系统直接完成登录，并打开首页。    
    1a1. 系统直接登录失败，打开登录窗口，显示之前的手机号和密码，
系统提示：“请输入正确的手机号和密码。”。“登录”按钮可用。

1b. 上次登录成功，但未勾选“记住密码”：则系统显示登录窗口，
“手机号”为上次的手机号，“记住密码”不勾选，“密码”为空。

5a. 手机号或密码不正确：系统提示“请输入正确的手机号和密码。”

5b. 手机号不存在：系统提示“该号码不存在，请与管理员联系。”
</code></pre>

<p>业务规则：</p>

<pre><code>手机号必须输入、且只能输入11位。
密码至少6位。
</code></pre>

<p>非功能性需求：</p>

<p>设计约束：</p>

<p>补充说明：
  所有系统提示都以文本方式显示在上面。详见效果图。
  登录时的loading和mask按系统约定。</p>

<p>```</p>

<p>上面的用例中：</p>

<ul>
<li>基本路径表示一切顺利时的过程。</li>
<li>扩展点表示备选流，相当于分支。例如1a就是一个分支，表示基本路径中第1步的第一个分支，1b表示第1步的第二个分支。1a1表示分支的第1步（注意缩进）。以此类推。</li>
</ul>


<p>通过用例，我们用10几行文字就把系统登录的整个需求描述清楚了。这样的文档花不了多少时间。</p>

<h2>4.如何写用例</h2>

<p>基本路径是系统完成目标的一条主线。扩展点是因为特别条件而出现的分支。如果不区分基本路径和扩展点，文档中就会包括很多的“如果&hellip;否则&hellip;”，最终导致文档很难阅读。</p>

<p>在讨论需求时，要集中讨论所有可能的失败和可选择的过程。扩展条件通常可以加上冒号（：），使读者不会误认为它是一个执行步骤，例如：</p>

<p><code>
无效PIN：
网络中断：
</code></p>

<p>用例可以包含子用例，也可以链接到另一个用例。</p>

<p>编写用例有一些准则：</p>

<ul>
<li>准则1：使用简单的语法。
主语&hellip;谓语动词&hellip;直接宾语&hellip;前置短语。一定要有主语（Actor，系统）。</li>
<li>准则2：描述执行者的意图，而不是动作。不要在界面细节描述过多，否则文档变长，质量变差。</li>
<li>准则3：“确认”而不是“检查是否”。</li>
</ul>


<p>```
修改前：
2. 系统检查密码是否正确。
3. 如果密码正确，系统向用户提供有效的操作。</p>

<p>修改后：
2. 系统验证密码正确。
3. 系统向用户提供有效的操作。
```</p>

<p>用例的格式有多种，包括单列表格式、双列表格式、RUP格式等等。建议采用上述示例中的格式。简单、条理清晰，易执行。</p>

<p>用例只是行为需求，不包括系统性能需求、业务规则等，但这些需求也可以附在用例上，在业务规则、非功能性需求、设计约束和补充说明中进行描述。</p>

<h2>6.总结</h2>

<p>本文以一个非常简单的例子来说明用例的编写方法。用例的编写工作本身非常简单，所花的时间也很少，但这决不表示它很容易。因为编写用例的过程是你思考的过程，只有你思考清楚了，才可能写出清晰完整的用例。这句话反过来说也成立：如果不能把用例描述清楚，说明思路还没有理顺。</p>

<p>采用界面原型＋系统用例来描述需求，能够以最少的文档描述明确的需求，帮助产品经理描述清晰、完整的需求；帮助开发人员理解业务需求，快速投入设计和开发工作；为测试人员提供测试用例设计和执行的依据。</p>

<p>关于需求和文档，从来没有标准答案。只有不断实践才能找到最适合的方法！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[某移动客户端项目开发]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/26/mou-xiang-mu-kai-fa-guo-cheng-zong-jie/"/>
    <updated>2014-06-26T15:20:21+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/26/mou-xiang-mu-kai-fa-guo-cheng-zong-jie</id>
    <content type="html"><![CDATA[<p>新到一家公司，抽调去支援移动客户端团队，经历了一个移动客户端项目的开发过程。按以往的经验看，项目规模不大、业务也比较简单，3、5个人，2－3个月就应该能搞定。但整个项目却历时半年，最多时项目组有10几个人。简单记录一下吧。</p>

<!--more-->


<h3>问题总结</h3>

<ul>
<li>采用不熟悉的技术，但又没有形成好的学习氛围和积极的心态；</li>
<li>跨地域团队管理难，跨地域开发团队管理更难；</li>
<li>落后的硬件配置，搞跨平台移动开发居然没有Mac本！</li>
<li>你觉得可能出问题的地方，将来一定会出问题！所以一定要将问题提前解决，越往后成本越高。</li>
<li>如果由测试和研发人员主导产品开发，只能解决产品的有无问题，无法产出卓越的产品。产品经理不是画个草图、写几句话就可以撒手不管的。</li>
</ul>


<h3>改进要求</h3>

<ul>
<li>专业的人做专业的事。产品经理要把产品设计好，你别让开发人员来思考怎么做好产品。设计人员把设计工作做好，你别让水平低的开发人员去考虑如何设计。</li>
<li>产品经理至少要提供低保真图和用例规约，别让设计和开发人员去考虑产品交互细节。如果你说写文档太麻烦，只能说明你自己其实没想清楚。</li>
<li>要有Code review，要有基本的设计。而不是任务一分就不管了。</li>
</ul>

]]></content>
  </entry>
  
</feed>
