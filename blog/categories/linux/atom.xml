<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 码出人生]]></title>
  <link href="http://blog.ubone.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2016-01-01T19:42:52+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Crontab定时任务]]></title>
    <link href="http://blog.ubone.com/blog/2015/03/28/linux-crontabding-shi-ren-wu/"/>
    <updated>2015-03-28T21:04:50+08:00</updated>
    <id>http://blog.ubone.com/blog/2015/03/28/linux-crontabding-shi-ren-wu</id>
    <content type="html"><![CDATA[<p>通过crontab命令可以固定的间隔时间循环执行指定的命令或shell脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的工作。</p>

<!--more-->


<h2>命令</h2>

<p>crontab有两种命令形式：</p>

<p><code>
crontab [ -u user ] file
crontab [ -u user ] [ -i ] { -e | -l | -r }
</code></p>

<ul>
<li>-u user：用来设定某个用户的crontab服务；</li>
<li>file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</li>
<li>-i：在删除用户的crontab文件时给确认提示。</li>
<li>-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</li>
<li>-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</li>
<li>-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</li>
</ul>


<h2>crontab文件格式</h2>

<p>```</p>

<h1>Example of job definition:</h1>

<h1>.&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; minute (0 &ndash; 59)</h1>

<h1>|  .&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; hour (0 &ndash; 23)</h1>

<h1>|  |  .&mdash;&mdash;&mdash;&mdash;&mdash; day of month (1 &ndash; 31)</h1>

<h1>|  |  |  .&mdash;&mdash;&mdash;&ndash; month (1 &ndash; 12) OR jan,feb,mar,apr &hellip;</h1>

<h1>|  |  |  |  .&mdash;&mdash; day of week (0 &ndash; 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</h1>

<h1>|  |  |  |  |</h1>

<h1>*  *  *  *  * command to be executed</h1>

<p>  23 20 *  *  * shutdown  -r  now
```</p>

<h2>建立cron任务</h2>

<p>```
为当前用户建立cron任务</p>

<h1>crontab -e</h1>

<p>为root建立cron任务</p>

<h1>sudo crontab -e</h1>

<p>```</p>

<p>系统会打开默认编辑器（如果没有会让你选择），然后进行任务编辑。</p>

<h2>cron任务示例</h2>

<p>```</p>

<h1>实例1：每1分钟执行一次myCommand</h1>

<ul>
<li><ul>
<li><ul>
<li><ul>
<li><ul>
<li>myCommand

<h1>实例2：每5分钟执行一次myCommand</h1>

*/5 * * * * myCommand

<h1>实例3：每小时的第3和第15分钟执行</h1>

3,15 * * * * myCommand

<h1>实例4：在上午8点到11点的第3和第15分钟执行</h1>

3,15 8-11 * * * myCommand

<h1>实例5：每隔两天的上午8点到11点的第3和第15分钟执行</h1>

3,15 8-11 */2  *  * myCommand

<h1>实例6：每周一上午8点到11点的第3和第15分钟执行</h1>

3,15 8-11 * * 1 myCommand

<h1>实例7：每晚的21:30重启smb</h1>

30 21 * * * /etc/init.d/smb restart

<h1>实例8：每月1、10、22日的4 : 45重启smb</h1>

45 4 1,10,22 * * /etc/init.d/smb restart

<h1>实例9：每周六、周日的1 : 10重启smb</h1>

10 1 * * 6,0 /etc/init.d/smb restart

<h1>实例10：每天18 : 00至23 : 00之间每隔30分钟重启smb</h1>

0,30 18-23 * * * /etc/init.d/smb restart

<h1>实例11：每星期六的晚上11 : 00 pm重启smb</h1>

0 23 * * 6 /etc/init.d/smb restart

<h1>实例12：每一小时重启smb</h1></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>*/1 * * * /etc/init.d/smb restart

<h1>实例13：晚上11点到早上7点之间，每隔一小时重启smb</h1></li>
<li>23-7/1 * * * /etc/init.d/smb restart
```</li>
</ul>


<h2>注意事项</h2>

<h3>环境变量问题</h3>

<p>我们手动执行某个任务时，是在当前shell环境下进行的，程序能找到环境变量。而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量。因此需要注意：</p>

<ul>
<li>脚本中涉及文件路径时写全局路径；</li>
<li>脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如:</li>
</ul>


<p><code>
cat start_cbp.sh
!/bin/sh
source /etc/profile
export RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf
/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;
</code></p>

<ul>
<li>当手动执行脚本OK，但是crontab执行不成功时,很可能是环境变量惹的祸，可尝试在crontab中直接引入环境变量解决问题。如:</li>
</ul>


<p><code>
*/5 * * * * . /etc/profile;/bin/sh /usr/bin/gitupdateblog.sh
</code></p>

<h3>重定向问题</h3>

<p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，但如果没有配置电子邮件，通过日志会查看到提示信息：</p>

<p>```</p>

<h1>grep CRON /var/log/syslog</h1>

<p>Mar 28 08:30:01 Jasondroplet CRON[26905]: (CRON) info (No MTA installed, discarding output)
```</p>

<p>也可将输出重定向，即在每条命令后面加上<code>/dev/null 2&gt;&amp;1</code>：</p>

<p><code>*/5 * * * * . /etc/profile;/bin/sh /usr/bin/gitupdateblog.sh  &gt;/dev/null 2&gt;&amp;1</code></p>

<p><code>/dev/null 2&gt;&amp;1</code>表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。</p>

<h3>系统级任务调度与用户级任务调度</h3>

<p>系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过”crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p>

<h3>重启服务</h3>

<p><code># service cron restart</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux基础]]></title>
    <link href="http://blog.ubone.com/blog/2015/02/24/linuxji-chu/"/>
    <updated>2015-02-24T11:37:23+08:00</updated>
    <id>http://blog.ubone.com/blog/2015/02/24/linuxji-chu</id>
    <content type="html"><![CDATA[<p>学习Linux的一些基本知识，包括用户身份、文件、目录、程序执行和磁盘管理等。</p>

<!--more-->


<h2>1. 用户身份</h2>

<p>Linux的用户只有两个等级：root和非root。Linux支持最多2<sup>32</sup> -1个用户。Linux还有一些用户是用来完成特定任务的，如nobody, admin, ftp等。但不管这些用户多牛逼，都是普通用户。用户组相当于职业，从更高层面来抽象用户能够访问的文件。有些用户的主要任务就是运行某些程序以确保安全性，如nobody用户就可以用于Nginx的工作进程。这类用户一般不分配密码和shell，甚至home目录也没有。</p>

<h3>1.1 用户</h3>

<p>通过<code>/etc/passwd</code>文件可以查看用户。每一行表示一个用户，其结构为：<code>用户名：密码：UID(User ID):GID(Group ID):用户命名：home目录：shell</code>。当然，密码并没有真正包含在内：</p>

<p><code>
nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
root:*:0:0:System Administrator:/var/root:/bin/sh
daemon:*:1:1:System Services:/var/root:/usr/bin/false
</code></p>

<p>UID的0一般分配给root，1～499分配给系统用户，普通用户从500开始。</p>

<h3>1.2 组</h3>

<p>通过<code>/etc/group</code>查看组，每一行代表一个用户组，其结构为：<code>组名：组密码：GID：用户组内的用户名</code>：</p>

<p><code>
nobody:*:-2:
nogroup:*:-1:
wheel:*:0:root
daemon:*:1:root
</code></p>

<p>同样，密码并没有存放在这。“用户组内的用户名”并不完整，通常只显示兼职的用户，专职的用户已经在<code>/etc/passwd</code>中定义过了。</p>

<h3>1.2 管理用户和组</h3>

<p>通过adduser或useradd命令可以增加用户，这些命令会修改<code>/etc/passwd</code>和<code>/etc/group</code>这两个文件，并通过文件<code>/etc/shadow</code>来管理密码。不同的Linux发行版本中adduser可能有区别，而useradd则是一样的。</p>

<p>```</p>

<h1>useradd jason</h1>

<h1>passwd                //修改当前用户密码</h1>

<h1>passwd jason</h1>

<h1>userdel jason         //删除用户</h1>

<h1>userdel -r jason  //删除用户，并连同home目录一同删除。</h1>

<h1>usermod           //修改用户的群组、账户名、目录、shell等等。</h1>

<p>```</p>

<p>用户组的管理命令包括：groupadd、groupmod、groupdel和gpasswd。组密码很少用到。</p>

<h3>1.3 sudo</h3>

<p>通过sudo可以临时以root身份执行一条命令。但不是所有普通用户都有sudo权限。该权限由<code>/etc/sudoers</code>管理。</p>

<p>```</p>

<h1>User privilege specification</h1>

<p>root    ALL=(ALL:ALL) ALL</p>

<h1>Members of the admin group may gain root privileges</h1>

<p>%admin ALL=(ALL) ALL</p>

<h1>Allow members of group sudo to execute any command</h1>

<p>%sudo   ALL=(ALL:ALL) ALL
```</p>

<p>如果觉得sudo给予的root权限过大，可以限制可执行的命令，例如：</p>

<p>```
%users ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom</p>

<h1>还可以使用!表示禁止</h1>

<p>$users ALL=(ALL) ALL, !/usr/sbin/adduser, !/usr/sbin/useradd
```</p>

<h3>1.4 我是谁？</h3>

<p>用户登录的身份为实际用户，通过su命令转换身份后为有效用户。有些脚本可能需要识别“我是谁？”。可以通过以下几个命令：</p>

<p>```
//以普通用户mxs登录
mxs@Jasondroplet:~$ whoami
mxs
mxs@Jasondroplet:~$ who am i
mxs      pts/1        2015-02-23 23:20 (10.0.0.100)
mxs@Jasondroplet:~$ who
mxs      pts/1        2015-02-23 23:20 (10.0.0.100)</p>

<p>//su后
mxs@Jasondroplet:~$ su
root@Jasondroplet:/usr/mxs# whoami
root
root@Jasondroplet:/usr/mxs# who am i
mxs      pts/1        2015-02-23 23:20 (10.0.0.100)
root@Jasondroplet:/usr/mxs# who
mxs      pts/1        2015-02-23 23:20 (10.0.0.100)
```</p>

<h2>2. 文件与目录</h2>

<p>Linux下用ls命令显示文件和目录时，会采用颜色区分类型。常见的如蓝色表示目录，其他颜色表示文件，绿色表示可执行文件、青色表示符号连接等等。通过<code>ls -l</code>命令可查看详细的属性：</p>

<p><code>
-rw-rw-r--  1 mxs  mxs       692 Oct 24 08:31 log4j.properties
drwxrwxr-x  2 mxs  mxs      4096 Jan 20 10:26 pki
</code></p>

<p>第一个字符用于描述文件类型，可取的值包括：</p>

<ul>
<li>-：普通文件</li>
<li>d：目录</li>
<li>l：软连接，硬连接没有特殊标记</li>
<li>b：设备文件，块设备，如磁盘等</li>
<li>c：设备文件，字符设备，如鼠标键盘等</li>
<li>s：套接字（Socket）文件</li>
<li>p：命名管道文件</li>
</ul>


<p>后面紧跟着的三套“rwx”分别表示所有者、所属用户组和其他用户的读、写和执行权限。对于目录，x权限表示是否能够打开它，r权限表示能否查看这个目录中的文件列表，在该目录创建文件则需要w权限。</p>

<p>文件名前带点号“.”的表示隐藏文件。</p>

<p>之后的数字表示“连接数”。Linux使用的文件系统是一种基于inode的文件系统。每一个新创建的文件都会分配一个inode，且每个文件都有唯一的inode编号。可以将inode理解成一个指针，指向的是文件所在磁盘中的物理位置。上面的文件属性也保存在inode中。为了提高效率，访问过的文件的inode会缓存在内存中。使用ln命令可以建立文件连接。命令<code>ln -s /bin/bash sh</code>建立了一个新的软连接sh指向<code>/bin/bash</code>，软连接也占用一个inode，不影响inode的引用计数。如果去除参数<code>-s</code>则创建的是硬连接。硬连接的属性跟目标文件的属性完全相同，因为引用的是相同的inode，仅仅将inode的引用计数进行了加1操作。由于有<code>.</code>目录的存在，所以每个目录的连接数都为2，而<code>..</code>目录的存在，则导致每增加一个子目录，其连接数都加1.</p>

<h3>2.1 文件属性与权限</h3>

<p>chown可用于修改文件的拥有者，<code>chown [-R] username filename</code> 或者 <code>chown [-R] username:group filename</code>, 后者连同文件所属用户组也一同修改了。参数<code>-R</code>表示目录。</p>

<p>chmod用于修改文件权限，可以使用数字法或文字法。数字法就是用数字代替r(4)、w(2)和x(1)，例如w-x(5), rw-(6)和rwx(7)。例如：<code>chmod 755 .bashrc</code>。文字法则使用四个字母：u(拥有者)、g(所属组)、o(其他)和a(全部)，和三个字符：+(增加)、-(减去)和=（设定）来设置权限。例如：<code>chmod a-x .bashrc</code>, <code>chmod ugo-x .bashrc</code>, <code>chmod ugo=rwx .bashrc</code>。</p>

<p>除了rwx外，Linux还有两个特殊的权限s和t。s可以出现在拥有者的x位置（SUID），也可以出现在所属组的x位置（SGID）。SUID的典型示例是<code>/bin/su</code>命令，其属性为<code>-rwsr-xr-x</code>，表示执行者将具有该程序拥有者（root）的权限，并且仅在执行该程序过程中有效。SGID不常见。<code>t</code>权限用于其他用户的<code>x</code>权限位（SBIT），仅对目录有效。典型例子是<code>/tmp</code>目录，这个目录允许任何用户在里面创建文件，但为了避免文件被其他人误删除，则设置SBIT权限，使得自己创建的文件只能通过自己或者root删除。</p>

<h3>2.2 搜索文件</h3>

<p>Linux有5个搜索文件的命令。</p>

<table>
<thead>
<tr>
<th>命令 </th>
<th> 说明 </th>
<th> 示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>whereis </td>
<td> 搜索可执行文件、联机帮助和源代码文件。基于每天更新一次的数据库（/var/lib/mlocate/），查询快速。</td>
<td> whereis ls</td>
</tr>
<tr>
<td>locate </td>
<td> 与whereis使用相同的数据库，支持复杂的匹配语法。</td>
<td> locate ls 会找到很多结果。</td>
</tr>
<tr>
<td>which </td>
<td> 只在$PATH环境变量中搜索可执行文件。可用于确认系统是否安装了指定软件。</td>
<td> which gcc</td>
</tr>
<tr>
<td>find </td>
<td> 强大的查找工具。<code>find / -mtime -1 -exec ls -l {} \;</code>表示列出一天以内变化的文件的详细信息。<code>-exec</code>表示对找到的文件执行的动作，{}表示占位符，find命令执行过程中会不断地被替换为当前找到的文件，这样ls命令就完整了。分号";&ldquo;是因为<code>-exec</code>的结束标记是分号，在bash中有特殊含义，所以需要转义符<code>\</code>。另一个示例： 在php文件中查找41：  find . -name &lsquo;*.php&rsquo; -type f -exec grep -q 41 {} \; -print</td>
<td> </td>
</tr>
</tbody>
</table>


<h3>2.3 文件打包压缩</h3>

<p>```</p>

<h1>解压缩</h1>

<p>tar -vxf filename</p>

<h1>压缩</h1>

<p>tar -zcvf filename.tar.gz FILES
```</p>

<h2>3. 程序执行</h2>

<p>在命令行下执行命令，Linux只会在$PATH环境变量所指定的那些路径中搜索对应的程序，如果找不到就失败。因此即使是当前路径也需要指定相对路径（./abc.sh）或绝对路径。</p>

<p>管道是Linux系统提供的多任务协调机制，应用十分广泛。通过管道，数据从一端写入，另一端读取（FIFO）。管道分为匿名和命名两种，用竖线“|”表示匿名管道，mkfifo命令可建立命名管道（会在指定路径创建类型为“p”的文件）。I/O重定向（“>”）是Linux提供的一种多任务协调机制。下面的例子演示了管道和重定向：</p>

<p><code>
$ find /boot | cpio -ocB &gt; /tmp/boot.img
</code></p>

<p>find命令查找/boot下的所有文件，并通过匿名管道传给cpio命令，cpio将输出内容重定向到boot.img文件。</p>

<p>Linux命令行下也支持前台和后台任务。前台任务转后台：Ctrl+Z，然后执行bg命令。如果想直接创建一个后台任务，在命令末尾添加“&amp;”符号即可。通过jobs命令查看所有后台任务，要将后台任务切换成前台任务，运行命令<code>fg 任务号</code>即可。</p>

<p>kill命令用于结束一个任务或进程。</p>

<p>计划任务可分为单次和循环，前者使用at命令，后者使用crontab命令。</p>

<p>Linux的守护进程分为stand alone和xinetd。前者可以自行启动，启动后会一直占用内存和系统资源，响应快，例如apache, mysql。后者由一个统一的stand alone守护进程(super daemon)负责唤起，当没有客户端要求时，xinetd类型的守护进程都是未启动的，一旦有客户端要求服务，super daemon就会唤醒具体的xinetd守护进程。</p>

<p>大多数Linux会将stand alone守护进程的启动脚本放在/etc/init.d/目录下，而xinetd守护进程的文件放在/etc/xinetd.d/。</p>

<p>查看当前运行的程序信息，可以使用ps、top和pstree三个命令。ps命令显示某一时刻的程序信息，常见三种用法：<code>ps aux</code>查看系统中所有程序的数据；<code>ps ux</code>查看当前用户所有程序的数据；<code>ps -l</code>查看与当前终端关联的程序数据。top命令可以每隔5秒刷新一次数据，相当于Windows任务管理器。而pstree可以查看进程的父子祖先关系。</p>

<h2>4. 磁盘管理</h2>

<p>Linux的文件系统格式被称为ExtN(N=2,3,4)。ExtN文件系统中包含inode数据结构来代表一个文件，并且存储了这个文件的各种属性和权限。文件的实际数据保存在data block块区中。data block与inode一样，每一个都有一个唯一编号，inode只需要记录这些编号，就能够定位整个文件的任意一段数据。因此ExtN通过inode能够一次性获得文件数据所存放的位置，尽量保证在磁盘只旋转一圈的情况下将所有内容读出来。而FAT32则只有将对应的data block读入之后才知道下一个data block在什么地方，因此效率比较低，这也是Windows系统使用较长时间后，碎片较多，系统变慢的原因。</p>
]]></content>
  </entry>
  
</feed>
