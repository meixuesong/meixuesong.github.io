<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 码出人生]]></title>
  <link href="http://blog.ubone.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2014-10-30T23:05:32+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[再读《重构》]]></title>
    <link href="http://blog.ubone.com/blog/2014/09/19/zhong-gou/"/>
    <updated>2014-09-19T20:04:48+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/09/19/zhong-gou</id>
    <content type="html"><![CDATA[<p>数年前读过Martin Fowler的《重构——改善既有代码的设计》，被这本经典著作所折服。当时读的是英文电子版，今天拿到一本中文版，就想再读一遍，温故而知新。哪成想，读来已经不是当年的感觉了。现在觉得这本经典著作提到的重构方法很普通，都是日常使用的方法。而内容却已经太过时，毕竟作者写书时是Java1.2即将发布，而现在Java 9都快要出来了。像集合与之前比有了质的飞跃，而泛型的使用则更好地提高了代码质量和可读性。这些年设计模式的普及也对重构形成了更有力的理论支撑。所有这些都对重构方法产生了影响。</p>

<p>不论如何，既然又读了一遍，那么就记录于此吧。</p>

<!--more-->


<h2>1. 代码的坏味道</h2>

<p>代码有哪些坏的味道，相应地有哪些重构方法？下面列出了常见的坏味道代码以及相应的重构方法：</p>

<p><strong>重复代码</strong></p>

<blockquote><p>Extract Method, Pull Up Method, Form Template Method, Substitute Algorithm</p></blockquote>

<p><strong>过长函数</strong></p>

<blockquote><p>Extract Method, Replace Temp with Query, Introduce Parameter Object, Preserve Whole Object, Replace Method with Method Object, Decompose Conditional</p></blockquote>

<p><strong>过大的类</strong></p>

<blockquote><p>Extract Class/Subclass/Interface, Dulplicate Observed Data</p></blockquote>

<p><strong>过长参数列</strong></p>

<blockquote><p>Replace Parameter with Method, Preserve Whole Object, Introduce Parameter Object</p></blockquote>

<p><strong>发散式变化</strong></p>

<blockquote><p> Extract Class</p></blockquote>

<p><strong>霰弹式修改</strong></p>

<blockquote><p>Move Method/Field, Inline class</p></blockquote>

<p><strong>依恋情绪</strong></p>

<blockquote><p> Move Method, Extract Method</p></blockquote>

<p><strong>数据泥团</strong></p>

<blockquote><p>Extract Class, Introduce Parameter Object, Preserve Whole Object</p></blockquote>

<p><strong>基本类型偏执</strong></p>

<blockquote><p>Replace Data Value with Object, Replace Type Code with Class/Subclass, Replace Type Code with State/Strategy, Extract Class, Introduce Parameter Object, Replace Array with Object</p></blockquote>

<p><strong>switch惊悚现身</strong></p>

<blockquote><p>Extract Method, Move Method, Replace Type Code with Subclasses/State/Strategy, Replace Conditional with Polymorphism, Replace Parameter with Explicit Methods, Introduce Null Object</p></blockquote>

<p><strong>平行继承体系</strong></p>

<blockquote><p>Move Method, Move Field</p></blockquote>

<p><strong>Lazy Class</strong></p>

<blockquote><p>Collapse Hierarchy, Inline Class</p></blockquote>

<p><strong>夸夸其谈未来性</strong></p>

<blockquote><p>Collapse Hierarchy, Inline Class, Remove Parameter, Rename Method</p></blockquote>

<p><strong>令人迷惑的暂时字段</strong></p>

<blockquote><p>Extract Class, Introduce Null Object</p></blockquote>

<p><strong>过度耦合的消息链</strong></p>

<blockquote><p>Hide Delegate, Extract Method, Move Method</p></blockquote>

<p><strong>中间人</strong></p>

<blockquote><p>Remove Middle Man, Inline Method, Replace Delegation with Inheritance</p></blockquote>

<p><strong>狎昵关系</strong></p>

<blockquote><p>Move Method, Move Field, Change Bidirectional Association to Unidirectional, Extract Class, Hide Delegate, Replace Inheritance with Delegation</p></blockquote>

<p><strong>异曲同工的类</strong></p>

<blockquote><p>Rename Method, Move Method, Extract Superclass</p></blockquote>

<p><strong>不完美的类库</strong></p>

<blockquote><p>Introduce Foreign Method, Introduce Local Extension</p></blockquote>

<p><strong>Data Class</strong></p>

<blockquote><p>Encapsulate Field, Encapsulate Collection, Remove Setting Method, Move Method, Extract Method, Hide Method</p></blockquote>

<p><strong>被拒绝的遗赠</strong></p>

<blockquote><p>Replace Inheritance with Delegation</p></blockquote>

<p><strong>过多的注释</strong></p>

<blockquote><p>避免代码逻辑复杂而加注释。Extract Method, Rename Method, Introduce Assertion</p></blockquote>

<h2>2. 构筑测试体系</h2>

<p>了解了坏味道的代码，在重构之前要拥有一个可靠的测试环境。否则你如何验证重构后有没有问题？不仅如此，<strong>每当你收到bug报告，也请先写一个单元测试来重现bug。</strong></p>

<p><strong>单元测试与功能测试的区别？</strong>功能测试是从客户的角度保障质量，一般是把整个系统当作一个黑箱。对拥有GUI的待测系统，它们通过GUI来操作该系统。对数据库，功能测试只观察特定输入所导致的数据变化。</p>

<p>JUnit就是一个测试框架，其用途是单元测试。关于JUnit，必须知道的知识包括：</p>

<p>```java
//必须继承TestCase
class FileReaderTest extends TestCase {</p>

<pre><code>protected void setUp() {...} //用于在每次测试前准备相应环境
protected void tearDown() {...} //用于测试完后大扫除，例如关闭文件。
public void testXXX() {//注意必须是返回void, 方法名test开始
    //...
    assertEquals(...); //然后就可以assertXXX了
}       
</code></pre>

<p>}
```</p>

<p>执行每一个test测试方法前，都会先运行setUp()。每一个test测试方法执行结束都会运行tearDown()。</p>

<p>别忘了检查预期的异常是否如期出现，例如，如果尝试在关闭流后再读取它，就应该得到一个IOException，这也应该被测试出来：</p>

<p>```java
_input.close();
try{</p>

<pre><code>_input.read();
fail("no exception for read past end");
</code></pre>

<p>} catch(IOException io) {</p>

<pre><code>//...
</code></pre>

<p>}</p>

<p>```</p>

<p>当测试类越来越多，就用得上TestSuite了。TestSuite可以用于只执行某一些测试类，或者某一些测试方法。示例如下：</p>

<p>```java
public class TestAllSort {</p>

<pre><code>public static Test suite() {
    TestSuite suite = new TestSuite("测试分组名称");

    //测试类SortTest的所有测试方法都会运行
    suite.addTestSuite(SortTest.class);

    //只运行测试类SortTest的指定测试方法testSelectSort
    suite.addTest(new SortTest("testSelectSort"));

    return suite;
}
</code></pre>

<p>}</p>

<p>public class SortTest extends TestCase {</p>

<pre><code>//如果要执行指定的测试方法，那么这个构造方法是必须的。name对应测试方法名
public SortTest(String name) {
    super(name);
}

public void testSelectSort() {
    //...
}
</code></pre>

<p>} <br/>
```</p>

<p><strong>边界条件是最容易出错的地方，要把火力集中在那！</strong></p>

<p><strong>重构的基本技巧是：小步前进、频繁测试！</strong></p>

<p>下面开始重构方法的介绍。</p>

<h2>3. 重新组织函数</h2>

<p>几乎所有的问题都源于过长的函数，因此重新组织函数很有必要！</p>

<h3>3.1 Extract Method</h3>

<p>Extract Method是最常用的重构手法之一。</p>

<ol>
<li>如果每个函数的粒度都很小，那么函数被复用的机会就更大。</li>
<li>使得高层的函数读起来就像一系列的注释。</li>
<li>如果函数都是细粒度，覆写也会更容易。</li>
</ol>


<p>关键点：函数名和函数本体之间的语义要匹配。</p>

<p>```java</p>

<pre><code>//before
void printOwing(double amount) {
    printBanner();

    //print details
    System.out.println("name: " + _name);
    System.out.print("amount: " + amount);
}

//after
void printOwing(double amount) {
    printBanner();

    printDetails(amount);
}

void printDetails(double amount) {
    System.out.println("name: " + _name);
    System.out.print("amount: " + amount);
}
</code></pre>

<p>```</p>

<h3>3.2 Inline Method</h3>

<p>如果函数内容和其名称同样清晰，就应该去掉这个函数。</p>

<p>```java</p>

<pre><code>//before
int getRating() {
    return (moreThanFiveLateDeliveries()) ? 2 : 1;
}

boolean moreThanFiveLateDeliveries() {
    return numberOfLateDeliveries &gt; 5;
}

//after
int getRating() {
    return (numberOfLateDeliveries &gt; 5) ? 2 : 1;
}
</code></pre>

<p>```</p>

<h3>3.3 Inline Temp</h3>

<p>适用于一个临时变量，只被一个简单表达式赋值一次，而它妨碍了其他重构手法。</p>

<p>```java
//before
double basePrice = anOrder.basePrice();
return (basePrice > 1000);</p>

<p>//after
return (anOrder.basePrice() > 1000);
```</p>

<h3>3.4 Replace Temp with Query</h3>

<p>你的程序以一个临时变量保存某一表达式的运算结果。将这个表达式提炼到一个独立函数中。</p>

<p>```java</p>

<pre><code>//before
double basePrice = quantity * itemPrice;
if (basePrice &gt; 1000) 
    return basePrice * 0.95;
else
    return basePrice * 0.98;

//after
if (basePrice() &gt; 1000) 
    return basePrice() * 0.95;
else
    return basePrice() * 0.98;

//...

double basePrice() {
    return quantity * itemPrice;
}
</code></pre>

<p>```</p>

<p>如果你担心性能问题，先不管它，因为十有八九根本不会造成任何影响。如果真有问题，在优化时解决它。</p>

<h3>3.5 Introduce Explaining Variable</h3>

<p>你有一个复杂的表达式，可以将该复杂表达式（或其中一部分）的结果放进一临时变量，以此变量名称来解释用途。</p>

<p>```java
//before
if ((platform.toUpperCase().indexOf(&ldquo;MAC&rdquo;) > -1) &amp;&amp;</p>

<pre><code>    (browser.toUpperCase().indexOf("IE") &gt; -1) &amp;&amp;
    wasInitialized() &amp;&amp; resize &gt; 0) {
//do something
</code></pre>

<p>}</p>

<p>//after
final boolean isMacOs = platform.toUpperCase().indexOf(&ldquo;MAC&rdquo;) > -1;
final boolean isIEBrowser = browser.toUpperCase().indexOf(&ldquo;IE&rdquo;) > -1;
final boolean wasResized = resize > 0;</p>

<p>if (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) {</p>

<pre><code>//do something
</code></pre>

<p>}
```</p>

<p>这种重构方法虽然很常见，但几乎总是可以用Extract Method来处理。因此常在Extract Method难以解决，或需要花费更大工作量时使用。</p>

<h3>3.6 Split Temporary Variable</h3>

<p>如果某个临时变量被赋值超过一次，即不是循环变量，也不是用于收集计算结果，那么可以针对每次赋值创建一个独立的临时变量。</p>

<p>```java
// before
double temp = 2 * (height + width);
System.out.println(temp);
temp = height * widht;
System.out.println(temp);</p>

<p>// after
final double perimeter = 2 * (height + width);
System.out.println(perimeter);
final double area = height * widht;
System.out.println(area);
```</p>

<p>临时变量有各种不同的用途，如果同一临时变量被多次赋值，且意义不同，就会令代码难以阅读。</p>

<h3>3.7 Remove Assignments to Parameters</h3>

<p>不要对参数赋值。因为Java对于参数传递的处理方式是按值传递。对参数赋值同样容易让人犯糊涂。</p>

<p>```java
//before
int discount(int inputVal, int quantity, int yearToDate) {</p>

<pre><code>if (inputVal &gt; 50) inputVal -= 2;
</code></pre>

<p>}</p>

<p>//after
int discount(int inputVal, int quantity, int yearToDate) {</p>

<pre><code>int result = inputVal;
if (inputVal &gt; 50) result -= 2;
</code></pre>

<p>}
```</p>

<h3>3.8 Replace Method with Method Object</h3>

<p>对于一个大型函数，其中的局域变量使你无法采用Extract Method时，可以将这个函数放进一个单独对象中。</p>

<p>```java
class Order&hellip;</p>

<pre><code>double price() {
    double basePrice;
    double secondPrice;
    double otherPrice;
    //复杂的运算
}
</code></pre>

<p>```</p>

<p>上面的代码可以这样重构：</p>

<p><img src="/myresource/images/image_blog_20140920_235546.jpg" alt="image" /></p>

<h3>3.9 Substitute Algorithm（替换算法）</h3>

<p>如果发现一件事可以有更清晰的方式（更好的解决方案/算法），就应该以较清晰的方式取代复杂的方式。</p>

<p>```java
//before
String foundPerson(String[] people) {</p>

<pre><code>for (int i = 0; i &lt; people.length; i++) {
    if (people[i].equals("Don")) {
        return "Don";
    }
    if (people[i].equals("John")) {
        return "John";
    }
    if (people[i].equals("Kent")) {
        return "Kent";
    }
}

return "";
</code></pre>

<p>}</p>

<p>//after
String foundPerson(String[] people) {</p>

<pre><code>List candidates = Arrays.asList(new String[]{"Don", "John", "Kent"});
for(String str : people) {
    if (candidates.contains(str)) {
        return str;
    }
}

return "";
</code></pre>

<p>}
```</p>

<h2>4. 在对象之间搬移特性</h2>

<p>在对象的设计过程中，“决定把责任放在哪儿”是最重要的事情之一。</p>

<h3>4.1 Move Method</h3>

<p>如果某个函数与另一个类进行更多交流，调用它或者被它调用。那么可以在该函数最常引用的类中建立一个有着类似行为的新函数。将旧函数变成一个单纯的委托函数，或者将旧函数完全移除。</p>

<h3>4.2 Move Field</h3>

<p>如果某个字段被另一个类更多地用到，那么可以在目标类新建一个字段，修改源字段的所有用户，令它们改用新字段。</p>

<h3>4.3 Extract Class</h3>

<p>如果某个类做了应该由两个类做的事，那么可以新建一个类，将相关的字段和函数搬移到新类。</p>

<p>例如订单包括地址的详细信息（城市、街道、邮编等等），可以考虑新建一个地址类。</p>

<h3>4.4 Inline Class</h3>

<p>与Extract Class正好相反，如果某个类不再承担责任，不再有单独存在的理由，可以考虑将这个类的所有特性搬移到另一个类中，然后移除原类。</p>

<p><img src="/myresource/images/image_blog_20140921_171841.jpg" alt="image" /></p>

<h3>4.5 Hide Delegate</h3>

<p>当客户通过一个委托类来调用另一个对象，可以在服务类上建立客户所需的所有函数，用以隐藏委托关系。</p>

<p><img src="/myresource/images/image_blog_20140921_180822.jpg" alt="image" /></p>

<p>封装意味着每个对象都应该尽可能少了解系统的其它部分。这其实也是迪米特法则的不和陌生人说话。</p>

<h3>4.6 Remove Middle Man</h3>

<p>如果某个类做了过多的简单委托动作，可以让客户直接调用受托类。这与Hide Delegate正好相反：</p>

<p><img src="/myresource/images/image_blog_20140921_180823.jpg" alt="image" /></p>

<h3>4.7 Introduce Foreign Method</h3>

<p>你需要为提供服务的类增加一个函数，但你无法修改这个类。此时，可以在客户类中建立一个函数，并以第一个参数形式传入一个服务类实例。</p>

<p>```java
//before
Date newStart = new Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate() + 1);</p>

<p>//after
Date newStart = nextDay(previousEnd);</p>

<p>private static Date nextDay(Date arg) {</p>

<pre><code>return new Date(arg.getYear(), arg.getMonth(), arg.getDate() + 1);
</code></pre>

<p>}
```</p>

<p>你正在使用一个类，它工作得很好。但你又需要一项新服务，这个类无法提供。如果可以修改代码，你就可以自行添加一个函数。但如果不能，你就得在客户端编码，补足你要的那个函数。如果需要多次使用，就应该放到同一个函数中。</p>

<p>如果发现自己为一个服务类建立了大量外加函数，或者发现有许多类都需要同样的外加函数，就不应该使用本项重构，而是应该使用下面这个重构方法：Introduce Local Extension。</p>

<h3>4.8 Introduce Local Extension</h3>

<p>你需要为服务类提供一些额外函数，但你无法修改这个类。此时你可以建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。</p>

<p><img src="/myresource/images/image_blog_20140921_184031.jpg" alt="image" /></p>

<p>其实就是通过聚合或者继承扩展一个类。</p>

<h2>5. 重新组织数据</h2>

<h3>5.1 Self Encapsulate Field</h3>

<p>就是不要直接访问域，而是通过方法，如getter/setter访问。</p>

<h3>5.2 Replace Data Value with Object</h3>

<p>例如早期类Order有个String类型的属性customer表示客户姓名，随着开发的进行，customer可能需要变成一个类，用customer.name表示姓名。</p>

<h3>5.3 Change Value to Reference</h3>

<p>就是值对象改为引用对象。当组合变为聚合时，就需要将值对象改为引用。</p>

<h3>5.4 Change Reference to Value</h3>

<p>与前一方法正好相反。</p>

<h3>5.5 Replace Array with Object</h3>

<p>在Effective Java中，对数组也有较多描述。数组是不安全的类型，而泛型则安全得多。而此处所说的方法，则是说应该用面向对象的类去取代数组，以及依附于数组的操作。这样做具有更好的安全性和可读性。</p>

<h3>5.6 Duplicate Observed Data</h3>

<p>一个分层良好的系统，应该将处理用户界面和处理业务逻辑的代码分开。因为你可能需要使用不同的用户界面来表现相同的业务逻辑，与GUI隔离之后，领域对象的维护和演化都会更容易。尽管可以轻松地将“行为”划分到不同部分，“数据”却往往不能如此。将界面数据复制到一个领域对象中，建立一个Observer模式，用以同步领域对象和GUI对象内的重复数据。</p>

<h3>5.7 Change Unidirectional Association to Bidirectional</h3>

<p>将两个类之间的单向关联改为双向关联。</p>

<h3>5.8 Change Bidirectional Association to Unidirectional</h3>

<p>将两个类之间的双向关联改为单向关联。双向关联很有用，但你必须为它付出代价，那就是维护双向连接、确保对象被正确创建和删除而增加的复杂度。只在必要的时候才使用双向关联。</p>

<h3>5.9 Replace Magic Number with Symbolic Constant</h3>

<p>以字面常量取代魔法数。魔法数是指拥有特殊意义，却又不能明确表现出这种意义的数字。</p>

<p>```java
//before
double potentialEnergy(double mass, double height) {</p>

<pre><code>return mass * 9.81 * height;
</code></pre>

<p>}</p>

<p>//after
static final double GRAITATIONAL_CONSTANT = 9.81;</p>

<p>double potentialEnergy(double mass, double height) {</p>

<pre><code>return mass * GRAITATIONAL_CONSTANT * height;
</code></pre>

<p>}
```</p>

<h3>5.10 Encapsulate Field</h3>

<p>如果类中存在public的属性，将它声明为private，并提供相应的访问函数（如getter, setter方法）。</p>

<h3>5.11 Encapsulate Collection</h3>

<p>让函数只返回集合的只读副本(例如Collection.unmodifiableXXX())，并提供添加/删除元素的函数。</p>

<p><img src="/myresource/images/image_blog_20140921_222518.jpg" alt="image" /></p>

<h3>5.12 Replace Record with Data Class</h3>

<p>将传统编程环境中的记录结构转换成数据类。</p>

<h3>5.13 Replace Type Code with Class</h3>

<p>这个重构方法有点过时了，更好的方式应该是使用枚举类型。</p>

<h3>5.14 Replace Type Code with Subclasses</h3>

<p>如果类型码会影响宿主类的行为，那么最好的办法就是借助多态来处理变化行为。即以类型码的宿主类为基类，针对每种类型建立相应的子类。例如针对员工类型建立子类（工程师，业务员）。</p>

<p>但有两种情况你不能那么做：类型码值在对象创建之后发生了改变；由于某些原因，宿主类已经有了子类。这时候可能需要状态模式或者策略模式。</p>

<h3>5.15 Replace Type Code with State/Strategy</h3>

<p>参考<a href="/blog/2014/08/18/she-ji-mo-shi-zhuang-tai-mo-shi/">状态模式</a>与<a href="/blog/2014/08/09/she-ji-mo-shi-ce-lue-mo-shi/">策略模式</a>。</p>

<h3>5.16 Replace Subclass with Fields</h3>

<p>建立子类的目的是为了增加新我或改变其行为。有一种变化行为称为“常量函数”，就是返回一个硬编码的值。你可以让不同的子类返回不同的值。但如果子类只有常量函数，则没有足够的存在价值，完全可以在父类中用一个属性来代替。</p>

<h2>6. 简化条件表达式</h2>

<h3>6.1 Decompose Conditional(分解条件表达式)</h3>

<p>从if, then, else三个段落中分别提炼出独立函数：</p>

<p>```java
//before
if (date.before(SUMMER_START) || date.after(SUMMER_END))</p>

<pre><code>charge = quantity * _winterRate + _winterServiceCharge;
</code></pre>

<p>else</p>

<pre><code>charge = quantity * _summerRate;
</code></pre>

<p>//after
if (notSummer(date))</p>

<pre><code>charge = winterCharge(quantity);
</code></pre>

<p>else</p>

<pre><code>charge = summerCharge(quantity);        
</code></pre>

<p>```</p>

<p>和任何大块头的代码一样，你可以将它分解为多个独立函数。</p>

<h3>6.2 Consolidate Conditional Expression（合并条件表达式）</h3>

<p>如果有一系列条件测试，都得到相同的结果，你可以将它们合并为一个表达式，并提炼成一个函数。</p>

<p>```java
//before
double disabilityAmount() {</p>

<pre><code>if (_seniority &lt; 2) return 0;
if (_monthsDisabled &gt; 12) return 0;
if (_isPartTime) return 0;
//...
</code></pre>

<p>}</p>

<p>//after
double disabilityAmount() {</p>

<pre><code>if (isNotEligibleForDisability()) return 0;
//...
</code></pre>

<p>}
```</p>

<h3>6.3 Consolidate Duplicate Conditional Fragments</h3>

<p>合并重复的条件片段。</p>

<p>```java
//before
if (isSpecialDeal()) {</p>

<pre><code>total = price * 0.95;
send();
</code></pre>

<p>} else {</p>

<pre><code>total = price * 0.98;
send();
</code></pre>

<p>}</p>

<p>//after
if (isSpecialDeal()) {</p>

<pre><code>total = price * 0.95;
</code></pre>

<p>} else {</p>

<pre><code>total = price * 0.98;
</code></pre>

<p>}
send();
```</p>

<h3>6.4 Remove Control Flag</h3>

<p>类似下面的代码，应该以break或return语句取代控制标记。</p>

<p>```
set done to false
while not down</p>

<pre><code>if (condition)
    do something
    set done to true
next step of loop
</code></pre>

<p>```</p>

<h3>6.5 Replace Nested Conditional with Guard Clauses</h3>

<p>```java
//before
double getPayAmount() {</p>

<pre><code>double result;
if (_isDead) 
    result = deadAmount();
else {
    if (_isSeparated)
        result = separatedAmount();
    else {
        if (_isRetired)
            result = retiredAmount();
        else
            result = normalPayAmount;
    }
}

return result;
</code></pre>

<p>}</p>

<p>//after
double getPayAmount() {</p>

<pre><code>if (_isDead) return deadAmount();
if (_isSeparated) return separatedAmount();
if (_isRetired) return retiredAmount();
return normalPayAmount();
</code></pre>

<p>}
```</p>

<h3>6.6 Replace Conditional with Polymorphism</h3>

<p>用多态取代条件表达式。例如下面的类</p>

<p>```java
//before
double getSpeed() {</p>

<pre><code>switch(type) {
    case EUROPEAN:
        return getBaseSpeed();
    case AFRICAN:
        return getBaseSpeed() - xxx;
    case NORWEGIAN_BLUE:
        return ...
}
</code></pre>

<p>}</p>

<p>//after, 以Bird为基类，European, African, Norwegian Blue为子类，实现多态方法getSpeed()。
```</p>

<h3>6.7 Introduce Null Object</h3>

<p>如果你需要再三检查某个对象是否为null，可以将null值替换为null对象。</p>

<p>```java
if (customer == null)</p>

<pre><code>plan = BillingPlan.basic();
</code></pre>

<p>else</p>

<pre><code>plan = customer.getPlan();
</code></pre>

<p>```</p>

<p>上面的代码可以重构为：</p>

<p><img src="/myresource/images/image_blog_20140922_200250.jpg" alt="image" /></p>

<p>其好处在于，你不必再向对象询问“你是什么类型”，你只管调用该行为就是了。空对象一定是常量，它们的任何成分都不会发生变化，因此可以用单例模式来实现。</p>

<p><strong>只有当大多数客户代码都要求空对象做出相同响应时，这样的重构才有意义。</strong></p>

<p>你可以针对不同的情况拥有几种不同的空对象。例如没有顾客、不知名顾客等。本质上这是一个比Null Object模式更大的模式：Special Case模式，即特例类，也就是某个类的特殊情况。</p>

<h3>6.8 Introduce Assertion</h3>

<p>断言是一个条件表达式，应该总是为真。如果它失败，表示程序员犯了错误。</p>

<p>注意不要滥用断言。不要使用它来检查“你认为应该为真”的条件，应该只使用它来检查“一定必须为真”的条件。你该问自己：如果断言所指示的约束条件不能满足，代码是否仍能正常运行？如果可以，就把断言拿掉。</p>

<h2>7. 简化函数调用</h2>

<p>前三个太简单的重构方法：Rename Method, Add Parameter, Remove Parameter。</p>

<h3>7.4 Separate Query from Modifier</h3>

<p>将查询函数和修改函数分离。如果某个函数即返回对象状态值，又修改对象状态，可以考虑建立两个不同的函数，其中一个负责查询，另一个负责修改。</p>

<p><strong>任何有返回值的函数，都不应该有看得到的副作用。</strong>请尽量遵守这条规则。</p>

<h3>7.5 Parameterize Method</h3>

<p>如果若干函数做了类似的工作，但函数体中却包含了不同的值，可以考虑建立一个单一函数，以参数形式表达那些不同的值。</p>

<p><img src="/myresource/images/image_blog_20140922_204225.jpg" alt="image" /></p>

<h3>7.6 Replace Parameter with Explicit Methods</h3>

<p>如果一个函数，其行为取决于参数值，那么可以考虑针对该参数的每一个可能值，建立一个独立函数。</p>

<p>```java
//before
void setValue(String name, int value) {</p>

<pre><code>if (name.equals("height")) {
    height = value;
    return;
}

if (name.equals("width")) {
    width = value;
    return;
}
</code></pre>

<p>}</p>

<p>//after
void setHeight(int value) {</p>

<pre><code>height = value;
</code></pre>

<p>}</p>

<p>void setWidth(int value) {</p>

<pre><code>width = value;
</code></pre>

<p>}
```</p>

<h3>7.7 Preserve Whole Object</h3>

<p>如果你从某个对象中取出若干值，将它们作为某一次函数调用时的参数，可以考虑改为传递整个对象。</p>

<p>```java
//before
int low = daysTempRange().getLow();
int hight = daysTempRange().getHigh();
withinPlan = plan.withinRange(low, high);</p>

<p>//after
withinPlan = plan.withinRange(daysTempRange());
```</p>

<h3>7.8 Replace Parameter with Methods</h3>

<p>对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能调用前一个函数。那么<strong>让参数接受者去除该项参数，并直接调用前一个函数。</strong></p>

<p>```java
//before
int basePrice = quantity * itemPrice;
discountLevel = getDiscountLevel();
double finalPrice = discountedPrice(basePrice, discountLevel);</p>

<p>//after
int basePrice = quantity * itemPrice;
double finalPrice = discountedPrice(basePrice);
```</p>

<p>如果函数本身可以通过其他途径获得参数值，那么它就不应该通过参数取得该值。应尽量缩短参数的数量。</p>

<h3>7.9 Introduce Parameter Object</h3>

<p>如果函数的参数数量太多，可以考虑用一个对象封装这些数据。</p>

<h3>7.10 Remove Setting Method</h3>

<p>类中的某个字段应该在对象创建时被设值，然后就不再改变，那么可以去掉该字段的所有setter方法。如果你提供了setter方法，就暗示这个字段值可以改变。去除setter方法，改为构造方法中传入就是一种好的重构方法。</p>

<h3>7.11 Hide Method</h3>

<p>如果一个函数，从来没有被其他任何类用到，可以考虑将其修改为private。</p>

<p>理想情况下，可以使用工具检查所有函数，指出可被隐藏起来的函数。</p>

<h3>7.12 Replace Constructor with Factory Method</h3>

<p>如果你希望在创建对象时，不仅仅是做简单的构建动作，可以考虑将构造方法替换为工厂方法。</p>

<h3>7.13 Encapsulate Downcast</h3>

<p>封装向下转型。如果某个函数返回的对象，需要由函数调用者执行向下转型，可以将向下转型动作移到函数中。</p>

<p>```java
//before
Object lastReading() {</p>

<pre><code>return readings.lastElement();
</code></pre>

<p>}</p>

<p>//after
Reading lastReading() {</p>

<pre><code>return (Reading) readings.lastElement();
</code></pre>

<p>}</p>

<p>```</p>

<p>向下转型也许是不可避免的，但仍然应该尽可能少做。通常在返回迭代器和集合的函数上会发生。</p>

<p>其实对于Java5之后，已经有泛型了，这条重构方法完全可以被泛型所取代。</p>

<h3>7.14 Replace Error Code with Exception</h3>

<p>某个函数返回一个特定的代码，用以表示错误情况，这种情况可以改用异常。</p>

<p>```java
//before
int withdraw(int amount) {</p>

<pre><code>if (amount &gt; balance)
    return -1;
else {
    balance -= amount;
    return 0;
}
</code></pre>

<p>}</p>

<p>//after
void withdraw(int amount) throws BalanceException {</p>

<pre><code>if (amount &gt; balance) throw new BalanceException();
balance -= amount; 
</code></pre>

<p>}
```</p>

<p>这种方式之所以更好，是因为它清楚地将普通程序和错误处理分开了，使程序更容易理解。</p>

<h3>7.15 Replace Exception with Test</h3>

<p>如果select()方法可能抛出异常，你可以将其变成两个方法：canSelect(), select()。如果你可以合理期望调用者在调用函数之前先检查某个条件，那么就应该提供一个测试方法。</p>

<h2>8. 处理继承关系</h2>

<p>几种常见的方法：</p>

<ul>
<li>将属性和方法上移：Pull Up Field, Pull Up Method, Pull Up Constructor Body</li>
<li>将属性和方法下移：Pull Down Field, Pull Down Method</li>
</ul>


<h3>8.6 Extract Subclass</h3>

<p>如果类中的某些属性只被某些（而非全部）实例用到，那么可以新建一个子类，将那些属性移到子类 中。</p>

<h3>8.7 Extract Superclass</h3>

<p>如果两个类有类似特性，就可以为它们建立一个父类，将相同特性移到父类。</p>

<h3>8.8 Extract Interface</h3>

<p>如果若干个客户使用类接口中的同一个子集，或者两个类的接口有部分相同，那么可以将相同的子集提炼到一个独立的接口中。</p>

<h3>8.9 Collapse Hierarchy</h3>

<p>如果超类和子类无太大区别，那么可以考虑将它们合并成一个类。</p>

<h3>8.10 Form Template Method</h3>

<p>说的就是模板方法模式。</p>

<h3>8.11 Replace Inheritance with Delegation</h3>

<p>说的就是组合/聚合模式。</p>

<h3>8.12 Replace Delegation with Inheritance</h3>

<p>与上一个正好相反。如果你发现自己需要使用受托类中的所有函数，并且费了很大力气编写所有极简的委托函数，那么你可以考虑回头使用继承。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java I/O]]></title>
    <link href="http://blog.ubone.com/blog/2014/09/14/java-i-slash-o/"/>
    <updated>2014-09-14T21:22:58+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/09/14/java-i-slash-o</id>
    <content type="html"><![CDATA[<p>本文是《Java编程思想》第18章Java I/O系统的读书笔记。涉及Java I/O, NIO和压缩等内容。</p>

<!--more-->


<h2>1. File类</h2>

<h3>1.1 目录列表器</h3>

<p>下面的代码示例，通过正则表达式过滤并返回指定文件的下级列表：</p>

<p>```java</p>

<pre><code>public static String[] dirList(String path, final String ptn) {
    File file = new File(path);
    if (ptn == null || "".equals(ptn.trim())) {
        return file.list();
    }

    FilenameFilter fnf = new FilenameFilter() {
        private Pattern pattern = Pattern.compile(ptn);
        @Override
        public boolean accept(File dir, String name) {
            return pattern.matcher(name).matches();
        }
    };

    return file.list(fnf);
}
</code></pre>

<p>```</p>

<h3>1.2 目录实用工具</h3>

<p>```java</p>

<pre><code>public static File[] local(File dir, final String regex) {
    return dir.listFiles(new FilenameFilter() {
        private Pattern pattern = Pattern.compile(regex);

        public boolean accept(File dir, String name) {
            return pattern.matcher(new File(name).getName()).matches();
        }
    });
}
</code></pre>

<p>以及File类的exists(), isDirectory(), isFile(), mkdirs(), delete(), renameTo()等方法。
```</p>

<h2>2. I/O流的典型使用方式</h2>

<h3>2.1 缓冲输入文件</h3>

<p>下面的例子适用于字符输入：</p>

<p>```java
public class BufferedInputFile {</p>

<pre><code>// Throw exceptions to console:
public static String read(String filename) throws IOException {
    // Reading input by lines:
    BufferedReader in = new BufferedReader(new FileReader(filename));
    String s;
    StringBuilder sb = new StringBuilder();
    while ((s = in.readLine()) != null)
        sb.append(s + "\n");
    in.close();
    return sb.toString();
}

public static void main(String[] args) throws IOException {
    System.out.print(read("BufferedInputFile.java"));
}
</code></pre>

<p>}
```</p>

<h3>2.2 从内存输入</h3>

<p>在下面的示例中，从BufferedInputFile.read()读入的String结果被用来创建一个StringReader。然后调用read()每次读取一个字符：</p>

<p>```java
public static class MemoryInput {</p>

<pre><code>public static void main(String[] args) throws IOException {
    StringReader in = new StringReader(
            BufferedInputFile.read("MemoryInput.java"));
    int c;
    while ((c = in.read()) != -1)
        System.out.print((char) c);
}
</code></pre>

<p>}
```</p>

<h3>2.3 格式化的内存输入</h3>

<p>```java
DataInputStream in = new DataInputStream(</p>

<pre><code>    new ByteArrayInputStream(
            BufferedInputFile.read("FormattedMemoryInput.java")
            .getBytes()));
</code></pre>

<p>in.readInt();
in.readChar();</p>

<p>DataInputStream in2 = new DataInputStream(</p>

<pre><code>    new BufferedInputStream(
            new FileInputStream("TestEOF.java")));                          
</code></pre>

<p>while (in.available() != 0)</p>

<pre><code>System.out.print((char) in.readByte());
</code></pre>

<p>/<em>注意available()的工作方式会随着媒介类型的不同而不同。
  表示“在没有阻塞的情况下所能读取的字节数”，
  对于文件，这意味着整个文件，但不同类型的流可能不是这样。
</em>/
```</p>

<h3>2.4 基本的文件输出</h3>

<p>FileWriter可用于向文件写入数据，通常会用BufferedWriter将其包装。下例写入文本文件：</p>

<p>```java
PrintWriter out = new PrintWriter(</p>

<pre><code>    new BufferedWriter(
            new FileWriter("something.out")));
</code></pre>

<p>out.println(&ldquo;Hello!&rdquo;);
out.close();</p>

<p>//对于文本文件有快捷方式：
PrintWriter out = new PrintWriter(file);
out.println(&ldquo;Hello!&rdquo;);
out.close();
```</p>

<h3>2.5 存储和恢复数据</h3>

<p>```java
public class StoringAndRecoveringData {
  public static void main(String[] args)
  throws IOException {</p>

<pre><code>DataOutputStream out = new DataOutputStream(
  new BufferedOutputStream(
    new FileOutputStream("Data.txt")));
out.writeDouble(3.14159);
out.writeUTF("That was pi");
out.writeDouble(1.41413);
out.writeUTF("Square root of 2"); 
out.close();
DataInputStream in = new DataInputStream(
  new BufferedInputStream(
    new FileInputStream("Data.txt")));
System.out.println(in.readDouble());
// Only readUTF() will recover the
// Java-UTF String properly:
System.out.println(in.readUTF());
System.out.println(in.readDouble());
System.out.println(in.readUTF());
</code></pre>

<p>  }
}
```</p>

<h3>2.6 读写随机访问文件</h3>

<p>使用RandomAccessFile，类似于组合使用DataInputStream和DataOutputStream。它不支持装饰，所以不能与InputStream和OutputStream子类的任何部分组合起来。可以假定其已经被正确地缓冲。</p>

<p>```java
public class UsingRandomAccessFile {
  static String file = &ldquo;rtest.dat&rdquo;;
  static void display() throws IOException {</p>

<pre><code>RandomAccessFile rf = new RandomAccessFile(file, "r");
for(int i = 0; i &lt; 7; i++)
  System.out.println(
    "Value " + i + ": " + rf.readDouble());
System.out.println(rf.readUTF());
rf.close();
</code></pre>

<p>  }
  public static void main(String[] args)
  throws IOException {</p>

<pre><code>RandomAccessFile rf = new RandomAccessFile(file, "rw");
for(int i = 0; i &lt; 7; i++)
  rf.writeDouble(i*1.414);
rf.writeUTF("The end of the file");
rf.close();
display();
rf = new RandomAccessFile(file, "rw");
rf.seek(5*8);
rf.writeDouble(47.0001);
rf.close();
display();
</code></pre>

<p>  }
}
```</p>

<h2>3. NIO</h2>

<p>新的I/O速度提升来自于所使用的结构更接近于操作系统执行I/O的方式：通道和缓冲器。我们只和缓冲器交互，并把缓冲器派送到通道。通道要么从缓冲器获得数据，要么向缓冲器发送数据。以下示例演示了三种类型的流，用以产生可写、可读可写以及可读的通道。</p>

<p>```java
public class GetChannel {</p>

<pre><code>private static final int BSIZE = 1024;

public static void main(String[] args) throws Exception {
    // Write a file:
    FileChannel fc = new FileOutputStream("/Users/mxs/Desktop/data.txt")
            .getChannel();
    fc.write(ByteBuffer.wrap("Some text ".getBytes()));
    fc.close();
    // Add to the end of the file:
    fc = new RandomAccessFile("/Users/mxs/Desktop/data.txt", "rw")
            .getChannel();
    fc.position(fc.size()); // Move to the end
    fc.write(ByteBuffer.wrap("Some more".getBytes()));
    fc.close();
    // Read the file:
    fc = new FileInputStream("/Users/mxs/Desktop/data.txt").getChannel();
    ByteBuffer buff = ByteBuffer.allocate(BSIZE);
    fc.read(buff);
    buff.flip();
    while (buff.hasRemaining())
        System.out.print((char) buff.get());
}
</code></pre>

<p>} /<em>
 * Output: Some text Some more
 </em>/// :~</p>

<p>```</p>

<h3>3.1 转换数据</h3>

<p>```java
public class BufferToText {</p>

<pre><code>private static final int BSIZE = 1024;

public static void main(String[] args) throws Exception {
    FileChannel fc = new FileOutputStream("/Users/mxs/Desktop/data2.txt").getChannel();
    fc.write(ByteBuffer.wrap("Some text".getBytes()));
    fc.close();
    fc = new FileInputStream("/Users/mxs/Desktop/data2.txt").getChannel();
    ByteBuffer buff = ByteBuffer.allocate(BSIZE);
    fc.read(buff);
    buff.flip();
    // Doesn't work:
    System.out.println(buff.asCharBuffer());
    // Decode using this system's default Charset:
    buff.rewind();
    String encoding = System.getProperty("file.encoding");
    System.out.println("Decoded using " + encoding + ": "
            + Charset.forName(encoding).decode(buff));
    // Or, we could encode with something that will print:
    fc = new FileOutputStream("/Users/mxs/Desktop/data2.txt").getChannel();
    fc.write(ByteBuffer.wrap("Some text".getBytes("UTF-16BE")));
    fc.close();
    // Now try reading again:
    fc = new FileInputStream("/Users/mxs/Desktop/data2.txt").getChannel();
    buff.clear();
    fc.read(buff);
    buff.flip();
    System.out.println(buff.asCharBuffer());
    // Use a CharBuffer to write through:
    fc = new FileOutputStream("/Users/mxs/Desktop/data2.txt").getChannel();
    buff = ByteBuffer.allocate(24); // More than needed
    buff.asCharBuffer().put("Some text");
    fc.write(buff);
    fc.close();
    // Read and display:
    fc = new FileInputStream("/Users/mxs/Desktop/data2.txt").getChannel();
    buff.clear();
    fc.read(buff);
    buff.flip();
    System.out.println(buff.asCharBuffer());
}
</code></pre>

<p>}
/<em>
 * Output: ???? Decoded using Cp1252: Some text Some text Some text
 </em>/// :~
```</p>

<h3>3.2 获取基本类型</h3>

<p>下面的示例演示了怎样插入和抽取各种数值：</p>

<p>```java
public class GetData {</p>

<pre><code>private static final int BSIZE = 1024;

public static void main(String[] args) {
    ByteBuffer bb = ByteBuffer.allocate(BSIZE);
    // Allocation automatically zeroes the ByteBuffer:
    int i = 0;
    while (i++ &lt; bb.limit())
        if (bb.get() != 0)
            print("nonzero");
    print("i = " + i);
    bb.rewind();
    // Store and read a char array:
    bb.asCharBuffer().put("Howdy!");
    char c;
    while ((c = bb.getChar()) != 0)
        printnb(c + " ");
    print();
    bb.rewind();
    // Store and read a short:
    bb.asShortBuffer().put((short) 471142);
    print(bb.getShort());
    bb.rewind();
    // Store and read an int:
    bb.asIntBuffer().put(99471142);
    print(bb.getInt());
    bb.rewind();
    // Store and read a long:
    bb.asLongBuffer().put(99471142);
    print(bb.getLong());
    bb.rewind();
    // Store and read a float:
    bb.asFloatBuffer().put(99471142);
    print(bb.getFloat());
    bb.rewind();
    // Store and read a double:
    bb.asDoubleBuffer().put(99471142);
    print(bb.getDouble());
    bb.rewind();
}
</code></pre>

<p>}</p>

<p>/<em> Output:
i = 1025
H o w d y !
12390
99471142
99471142
9.9471144E7
9.9471142E7
</em>///:~
```</p>

<h3>3.3 视图缓冲器</h3>

<p>视图缓冲器（View buffer）可以让我们通过某个特定的基本数据类型的视窗查看其底层的ByteBuffer。</p>

<p>```java
public class IntBufferDemo {
  private static final int BSIZE = 1024;
  public static void main(String[] args) {</p>

<pre><code>ByteBuffer bb = ByteBuffer.allocate(BSIZE);
IntBuffer ib = bb.asIntBuffer();
// Store an array of int:
ib.put(new int[]{ 11, 42, 47, 99, 143, 811, 1016 });
// Absolute location read and write:
System.out.println(ib.get(3));
ib.put(3, 1811);
// Setting a new limit before rewinding the buffer.
ib.flip();
while(ib.hasRemaining()) {
  int i = ib.get();
  System.out.println(i);
}
</code></pre>

<p>  }
} /<em> Output:
99
11
42
47
1811
143
811
1016
</em>///:~
```</p>

<p>```java
public class ViewBuffers {
  public static void main(String[] args) {</p>

<pre><code>ByteBuffer bb = ByteBuffer.wrap(
  new byte[]{ 0, 0, 0, 0, 0, 0, 0, 'a' });
bb.rewind();
printnb("Byte Buffer ");
while(bb.hasRemaining())
  printnb(bb.position()+ " -&gt; " + bb.get() + ", ");
print();
CharBuffer cb =
  ((ByteBuffer)bb.rewind()).asCharBuffer();
printnb("Char Buffer ");
while(cb.hasRemaining())
  printnb(cb.position() + " -&gt; " + cb.get() + ", ");
print();
FloatBuffer fb =
  ((ByteBuffer)bb.rewind()).asFloatBuffer();
printnb("Float Buffer ");
while(fb.hasRemaining())
  printnb(fb.position()+ " -&gt; " + fb.get() + ", ");
print();
IntBuffer ib =
  ((ByteBuffer)bb.rewind()).asIntBuffer();
printnb("Int Buffer ");
while(ib.hasRemaining())
  printnb(ib.position()+ " -&gt; " + ib.get() + ", ");
print();
LongBuffer lb =
  ((ByteBuffer)bb.rewind()).asLongBuffer();
printnb("Long Buffer ");
while(lb.hasRemaining())
  printnb(lb.position()+ " -&gt; " + lb.get() + ", ");
print();
ShortBuffer sb =
  ((ByteBuffer)bb.rewind()).asShortBuffer();
printnb("Short Buffer ");
while(sb.hasRemaining())
  printnb(sb.position()+ " -&gt; " + sb.get() + ", ");
print();
DoubleBuffer db =
  ((ByteBuffer)bb.rewind()).asDoubleBuffer();
printnb("Double Buffer ");
while(db.hasRemaining())
  printnb(db.position()+ " -&gt; " + db.get() + ", ");
</code></pre>

<p>  }
}
/<em> Output:
Byte Buffer 0 &ndash;> 0, 1 &ndash;> 0, 2 &ndash;> 0, 3 &ndash;> 0, 4 &ndash;> 0, 5 &ndash;> 0, 6 &ndash;> 0, 7 &ndash;> 97,
Char Buffer 0 &ndash;>  , 1 &ndash;>  , 2 &ndash;>  , 3 &ndash;> a,
Float Buffer 0 &ndash;> 0.0, 1 &ndash;> 1.36E-43,
Int Buffer 0 &ndash;> 0, 1 &ndash;> 97,
Long Buffer 0 &ndash;> 97,
Short Buffer 0 &ndash;> 0, 1 &ndash;> 0, 2 &ndash;> 0, 3 &ndash;> 97,
Double Buffer 0 &ndash;> 4.8E-322,
</em>///:~
```</p>

<h3>3.4 用缓冲器操纵数据</h3>

<p><img src="/myresource/images/image_blog_20140916_001220.jpg" alt="image" /></p>

<h3>3.5 缓冲器的细节</h3>

<p>Buffer由数据和四个索引组成：mark, position, limit, capacity。相关的方法：</p>

<ul>
<li>capacity() 返回缓冲区容量。</li>
<li>clear() 清空缓冲区，position设置为0，limit设置为容量。</li>
<li>flip() 将limit设置为position, position设置为0.用于准备从缓冲区读取已经写入的数据。</li>
<li>limit() 返回limit值。</li>
<li>limit(int lim) 设置limit值。</li>
<li>mark() 将mark设置为position。</li>
<li>position() 返回position值。</li>
<li>position(int pos) 设置position值。</li>
<li>remaining() 返回（limit &ndash; position）。</li>
<li>hasRemaining() 若有介于position和limit之间的元素，则返回true。</li>
</ul>


<h3>3.6 内存映射文件</h3>

<p>它帮助我们创建和修改那些因为太大而不能放入内存的文件。以了它，我们可以假定整个文件都放在内存中，而且可以完全把它当作非常大的数组来访问。映射文件访问往往可以显著地加快速度。</p>

<p>```java
public class LargeMappedFiles {
  static int length = 0x8FFFFFF; // 128 MB
  public static void main(String[] args) throws Exception {</p>

<pre><code>MappedByteBuffer out =
  new RandomAccessFile("test.dat", "rw").getChannel()
  .map(FileChannel.MapMode.READ_WRITE, 0, length);
for(int i = 0; i &lt; length; i++)
  out.put((byte)'x');
print("Finished writing");
for(int i = length/2; i &lt; length/2 + 6; i++)
  printnb((char)out.get(i));
</code></pre>

<p>  }
}
```</p>

<h3>3.7 文件加锁</h3>

<p>```java
public class FileLocking {
  public static void main(String[] args) throws Exception {</p>

<pre><code>FileOutputStream fos= new FileOutputStream("file.txt");
FileLock fl = fos.getChannel().tryLock(); //获得锁
if(fl != null) {
  System.out.println("Locked File");
  TimeUnit.MILLISECONDS.sleep(100);
  fl.release();  //释放锁
  System.out.println("Released Lock");
}
fos.close();
</code></pre>

<p>  }
} /<em> Output:
Locked File
Released Lock
</em>///:~
```</p>

<p>FileChannel调用tryLock()或lock()，可以获得整个文件的FileLock。（SocketChannel, DatagramChannel和ServerSocketChannel不需要加锁）。tryLock()是非阻塞式的，如果不能获得锁将直接返回。lock()是阻塞式的，它将阻塞进程直到获得锁。</p>

<p>也可以锁一部分：</p>

<p>```java
tryLock(long position, long size, boolean shared)
或
lock(long position, long size, boolean shared)</p>

<p>加锁的区域由size &ndash; position决定。shared表示是否是共享锁
```</p>

<h2>4. 压缩</h2>

<h3>4.1 Zip压缩和解压缩</h3>

<p>```java
public static class ZipCompress {</p>

<pre><code>public static void main(String[] args) throws IOException {
    FileOutputStream f = new FileOutputStream("test.zip");
    CheckedOutputStream csum = new CheckedOutputStream(f, new Adler32());
    ZipOutputStream zos = new ZipOutputStream(csum);
    BufferedOutputStream out = new BufferedOutputStream(zos);
    zos.setComment("A test of Java Zipping");
    // No corresponding getComment(), though.
    for (String arg : args) {
        print("Writing file " + arg);
        BufferedReader in = new BufferedReader(new FileReader(arg));
        zos.putNextEntry(new ZipEntry(arg));
        int c;
        while ((c = in.read()) != -1)
            out.write(c);
        in.close();
        out.flush();
    }
    out.close();
    // Checksum valid only after the file has been closed!
    print("Checksum: " + csum.getChecksum().getValue());
    // Now extract the files:
    print("Reading file");
    FileInputStream fi = new FileInputStream("test.zip");
    CheckedInputStream csumi = new CheckedInputStream(fi, new Adler32());
    ZipInputStream in2 = new ZipInputStream(csumi);
    BufferedInputStream bis = new BufferedInputStream(in2);
    ZipEntry ze;
    while ((ze = in2.getNextEntry()) != null) {
        print("Reading file " + ze);
        int x;
        while ((x = bis.read()) != -1)
            System.out.write(x);
    }
    if (args.length == 1)
        print("Checksum: " + csumi.getChecksum().getValue());
    bis.close();
    // Alternative way to open and read Zip files:
    ZipFile zf = new ZipFile("test.zip");
    Enumeration e = zf.entries();
    while (e.hasMoreElements()) {
        ZipEntry ze2 = (ZipEntry) e.nextElement();
        print("File: " + ze2);
        // ... and extract the data as before
    }
    /* if(args.length == 1) */
}
</code></pre>

<p>} /<em> (Execute to see output) </em>/// :~
```</p>

<h3>4.2 Java档案文件</h3>

<p>Jar文件也是zip格式，jar命令如下：</p>

<blockquote><p>jar [options] destination [manifest] inputfile(s)</p></blockquote>

<p>options:
* c 创建一个新的或空的压缩文档
* t 列出目录表
* x 解压所有文件
* x file 解压该文件
* f 意指“我打算指定一个文件名”
* m 表示第一个参数将是用户自建的清单文件的名字
* O 只储存文件，不压缩文件
* M 不自动创建文件清单</p>

<p>常用命令：</p>

<blockquote><p>jar cf myJarFile.jar *.class 创建jar文件，包含当前目录中的所有类文件，以及自动产生的清单文件</p>

<p>jar cvf myApp.jar audio classes image 将三个子目录合并到myApp.jar中。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java并发编程（三）]]></title>
    <link href="http://blog.ubone.com/blog/2014/09/02/javabing-fa-bian-cheng-san/"/>
    <updated>2014-09-02T23:13:06+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/09/02/javabing-fa-bian-cheng-san</id>
    <content type="html"><![CDATA[<p>本文是《Java编程思想》第21章并发的读书笔记。<a href="/blog/2014/08/30/javabing-fa-bian-cheng/">Java并发编程（一）</a>、<a href="/blog/2014/09/02/javabing-fa-er/">Java并发编程（二）</a></p>

<!--more-->


<h2>6. 新类库中的构件</h2>

<p>java.util.concurrent引入的新类库，有助于编写更简单和健壮的并发程序。</p>

<h2>6.1 CountDownLatch</h2>

<p>用于同步一个或多个任务，强制它们等待由其他任务执行的一组操作完成。可以向CountDownLatch对象设置一初始值，任务在这个对象上调用wait()方法都将阻塞，直到计数值为0。其它任务结束工作时，可以调用countDown()来减少这个计数值。</p>

<p>示例代码：</p>

<p>```java
public class LatchDemo {</p>

<pre><code>private static class Latch implements Runnable {
    private CountDownLatch latch;
    Latch(CountDownLatch latch) {
        this.latch = latch;
    }

    @Override
    public void run() {
        try {
            doSomething();
            System.out.println("Latch runing...");
            TimeUnit.SECONDS.sleep(3);
            System.out.println("Latch sleeped 3 seconds.");
            //2. 当完成后，调用countDown()，将计数减1
            latch.countDown();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void doSomething() {}
}

private static class LatchWaiter implements Runnable {
    private CountDownLatch latch;
    LatchWaiter(CountDownLatch latch) {
        this.latch = latch;
    }

    @Override
    public void run() {
        try {
            System.out.println("LatchWaiter waiting...");
            //3. 一直等到latch的计数变为0
            latch.await();
            System.out.println("LatchWaiter exit wait...");
        } catch (InterruptedException e) {
            //todo
        }
    }

    private void doOtherthing() {}
}

public static void main(String[] args) {
    //1. 先赋一个值，例如1
    CountDownLatch latch = new CountDownLatch(1);
    ExecutorService exec = Executors.newCachedThreadPool();
    exec.execute(new Latch(latch));
    exec.execute(new LatchWaiter(latch));
    exec.shutdown();
}
</code></pre>

<p>}
```</p>

<p>注意：CountDownLatch只会触发一次，计数值不能重置。</p>

<h3>6.2 CyclicBarrier</h3>

<p>CyclicBarrier适用于有一组任务，它们并行工作，直到它们全部完成后，才一起向前移动。与CountDownLatch只会触发一次不同，CyclicBarrier可以多次重用。</p>

<p>```java
public class CyclicBarrierDemo {</p>

<pre><code>private static class Horse implements Runnable {
    private CyclicBarrier barrier;
    private String id;
    private int stepCount = 0;
    private static Random rand = new Random(5000);

    Horse(String id, CyclicBarrier barrier) {
        this.id = id;
        this.barrier = barrier;
    }

    @Override
    public void run() {
        doSomething();
        try {
            while (!Thread.interrupted()) {
                synchronized (this) {
                    System.out.println(String.format("Thread %s is doing.",
                            id));
                    stepCount++;
                    TimeUnit.MILLISECONDS.sleep(rand.nextInt(5000));
                    System.out.println(String.format("Thread %s has done.",
                            id));
                }
                // await：待所有线程都在这一步调用await方法。
                barrier.await();
            }
        } catch (InterruptedException e) {
            // ...
        } catch (BrokenBarrierException e) {
            // ...
        }
    }

    private void doSomething() {
    }

    private int getStepCount() {
        return stepCount;
    }
}

public static void main(String[] args) {
    final ExecutorService exec = Executors.newCachedThreadPool();
    int threadCount = 3;
    final Counter cycleCount = new Counter();

    // 注意构造方法的参数
    CyclicBarrier barrier = new CyclicBarrier(threadCount, new Runnable() {
        @Override
        public void run() {
            // 当所有threadCount线程结束时，执行到这里。
            System.out.println("All Thread has done." + cycleCount.count);
            cycleCount.count++;
            if (cycleCount.count == 2) {
                exec.shutdownNow();
            }
        }
    });
    for (int i = 0; i &lt; threadCount; i++) {
        exec.execute(new Horse(String.valueOf(i), barrier));
    }
}

private static class Counter {
    int count = 0;
}
</code></pre>

<p>}</p>

<p>/<em>output:
Thread 1 is doing.
Thread 2 is doing.
Thread 0 is doing.
Thread 1 has done.
Thread 2 has done.
Thread 0 has done.
All Thread has done.0
Thread 0 is doing.
Thread 1 is doing.
Thread 2 is doing.
Thread 2 has done.
Thread 1 has done.
Thread 0 has done.
All Thread has done.1
</em>/
```</p>

<h3>6.3 DelayQueue</h3>

<p>DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，其中的对象只能在其到期时才能从队列中取走。队列是有序的，延迟时间最长的对象最先取出。可以使用多种获取方法：poll(取出并从队列删除，不等待), take(取出并从队列删除，如果队列中还没有则等待), peek(取出但不从队列删除，不等待，可能会返回未过期的)，详细区别见JavaDoc。</p>

<p>DelayQueue适合的场景包括：</p>

<ol>
<li>关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭之。</li>
<li>缓存。缓存中的对象，超过了空闲时间，需要从缓存中移出。</li>
<li>任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求。</li>
</ol>


<h3>6.4 PriorityBlockingQueue</h3>

<p>这是一个很基础的优先级队列，具有可阻塞的读取操作。放入该队列的对象实现Comparable接口就可以轻松实现优先级调度了，优先级越小则优先级越高。代码示例：</p>

<p>```java
PriorityBlockingQueue<Runnable> queue =</p>

<pre><code>    new PriorityBlockingQueue&lt;Runnable&gt;();
</code></pre>

<p>ExecutorService exec = Executors.newCachedThreadPool();
exec.execute(new Producer(queue, exec));
exec.execute(new Consumer(queue));
```</p>

<h3>6.5 ScheduledExecutor</h3>

<p>通过使用ScheduledExecutor.schedule()（运行一次任务）或者scheduleAtFixedRate()（每隔规则的时间重复执行任务），你可以将Runnable对象设置为在将来的某个时刻执行。代码示例：</p>

<p>```java
public class SheduledThreadDemo {</p>

<pre><code>ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(10);

public void repeat(Runnable event, long initialDelay, long period) {
    scheduler.scheduleAtFixedRate(event, initialDelay, period, TimeUnit.SECONDS);
}

public void schedule(Runnable event, long delay) {
    scheduler.schedule(event, delay, TimeUnit.SECONDS);
}
</code></pre>

<p>}
```</p>

<h3>6.6 Semaphore</h3>

<p>普通的锁（concurrent.locks或synchronized锁）在任何时刻都只允许一个任务访问一项资源，而<strong>计数信号量</strong>允许n个任务同时访问这个资源。作为一个示例，Pool是一个对象池，管理者数量有限的对象，要使用对象可以先签出，用完后再签入。</p>

<p>Semaphore 可以很轻松完成信号量控制，Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。比如在Windows下可以设置共享文件的最大客户端访问个数。</p>

<p>Semaphore实现的功能就类似厕所有5个坑，假如有10个人要上厕所，那么同时只能有多少个人去上厕所呢？同时只能有5个人能够占用，当5个人中 的任何一个人让开后，其中等待的另外5个人中又有一个人可以占用了。另外等待的5个人中可以是随机获得优先机会，也可以是按照先来后到的顺序获得机会，这取决于构造Semaphore对象时传入的参数选项。单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，再由另一个线程释放“锁”，这可应用于死锁恢复的一些场合。</p>

<p>```java
public class Pool<T> {</p>

<pre><code>private int size;
private List&lt;T&gt; items = new ArrayList&lt;T&gt;();
private volatile boolean[] checkedOut; //跟踪被签出的对象
private Semaphore available;

public Pool(Class&lt;T&gt; classObject, int size) {
    this.size = size;
    checkedOut = new boolean[size];
    available = new Semaphore(size, true); //size个许可，先进先出:true
    for(int i = 0; i &lt; size; ++i) {
        try {
            //Assums a default constructor
            items.add(classObject.newInstance());
        } catch(Exception e) {
            throw new RuntimeException(e);
        }
    }
}

public T checkOut() throws InterruptedException {
    available.acquire(); //从Semaphore获取一个许可，如果没有将阻塞
    return getItem();
}

public void checkIn(T x) {
    if (releaseItem(x))
        //释放一个permit，返回到Semaphore， 可用许可加1
        available.release();
}

private synchronized T getItem() {
    for(int i=0; i &lt; size; ++i) {
        if (! checkedOut[i]) {
            checkedOut[i] = true;
            return items.get(i);
        }
    }

    return null;
}

private synchronized boolean releaseItem(T item) {
    int index = items.indexOf(item);
    if (index == -1) return false;
    if (checkedOut[index]) {
        checkedOut[index] = false;
        return true;
    }

    return false;
}
</code></pre>

<p>}
```</p>

<h3>6.7 Exchanger</h3>

<p>Exchanger用于实现两个人之间的数据交换，每个人在完成一定的事物后想与对方交换数据，第一个先拿出数据的人将一直等待第二个人拿着数据到来时，才能彼此交换数据。</p>

<p>好比两个毒贩要进行交易，一手交money，一手交drug，不管谁先来到接头地点后，就处于等待状态了，当另外一方也到达接头地点时，两者的数据就立即交换了，然后就可以各忙各的了。</p>

<p>示例代码如下和运行结果如下：</p>

<p>```java
public class ExchangerTest {</p>

<pre><code>public static void main(String[] args) {
    ExecutorService service = Executors.newCachedThreadPool();
    final Exchanger&lt;String&gt; exchanger = new Exchanger&lt;String&gt;();
    service.execute(new Runnable() {
        public void run() {
            try {
                String data1 = "money";
                System.out.println("线程"
                        + Thread.currentThread().getName() 
                        + "正在把数据" + data1 + "换出去");
                Thread.sleep((long) (Math.random() * 10000));
                String data2 = (String) exchanger.exchange(data1);
                System.out.println("线程"
                        + Thread.currentThread().getName() 
                        + "换回数据为" + data2);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    });
    service.execute(new Runnable() {
        public void run() {
            try {
                String data1 = "drug";
                System.out.println("线程"
                        + Thread.currentThread().getName() + "正在把数据"
                        + data1 + "换出去");
                Thread.sleep((long) (Math.random() * 10000));
                String data2 = (String) exchanger.exchange(data1);
                System.out.println("线程"
                        + Thread.currentThread().getName() + "换回数据为"
                        + data2);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    });
}
</code></pre>

<p>}</p>

<p>/<em>* output:
线程pool-1-thread-1正在把数据money换出去
线程pool-1-thread-2正在把数据drug换出去
线程pool-1-thread-2换回数据为money
线程pool-1-thread-1换回数据为drug
</em>/
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java并发编程（二）]]></title>
    <link href="http://blog.ubone.com/blog/2014/09/02/javabing-fa-er/"/>
    <updated>2014-09-02T21:03:49+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/09/02/javabing-fa-er</id>
    <content type="html"><![CDATA[<p>本文是《Java编程思想》第21章并发的读书笔记。<a href="/blog/2014/08/30/javabing-fa-bian-cheng/">Java并发编程（一）</a></p>

<!--more-->


<h2>3. 终结任务</h2>

<h3>3.1 阻塞</h3>

<p>一个任务进入阻塞状态，可能有如下原因：</p>

<ol>
<li>调用sleep(milliseconds)</li>
<li>调用wait()挂起线程，直到线程得到了notify()或notifyAll()（Java5中的signal或signalAll）</li>
<li>等待某个输入/输出完成</li>
<li>试图在某个对象上调用同步控制方法，但对象锁不可用。</li>
</ol>


<p>早期代码中还有suspend()和resume()来阻塞和唤醒线程，但现在已经被废止了（可能导致死锁），还有stop()也已经废止了（因为不释放线程获得的锁）。</p>

<h3>3.2 中断</h3>

<p>有几种方法中断线程。</p>

<p>一是声明一个变量canceled，然后正常的run方法中循环检查它的值，从而决定是否跳出循环，退出run方法。</p>

<p>二是调用Thread类的interrupt()方法，该方法提供了离开run()循环而不抛出异常的第二种方式。这种方式必须持有Thread对象。</p>

<p>如果调用Executor的shutdownNow()，那么它将发送一个interrupt()调用给它启动的所有线程。如果想只中断某一个线程，可以使用Future的cancel方法。下面是各种中断的示例：</p>

<h4>中断Sleep Runnable</h4>

<p>```java
public class ThreadInterrupt {</p>

<pre><code>public static void main(String[] args) {
    ExecutorService exec = Executors.newCachedThreadPool();
    Future f = exec.submit(new SleepInterruptThread());
    try {
        TimeUnit.SECONDS.sleep(1);
        f.cancel(true);

    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    System.out.println("退出主程序");
}
</code></pre>

<p>}</p>

<p>public class SleepInterrupt implements Runnable {</p>

<pre><code>@Override
public void run() {
    try {
        TimeUnit.SECONDS.sleep(10);
        System.out.println("end sleep 10s");
    } catch (InterruptedException e) {
        e.printStackTrace();
    }

    System.out.println("exit SleepInterrupt run");
}
</code></pre>

<p>}
```</p>

<p>上面的代码可以正常中断Sleep线程，捕获了InterruptedException异常。</p>

<h4>中断Sleep Thread</h4>

<p>```java
public class ThreadInterrupt {</p>

<pre><code>public static void main(String[] args) {
    Thread f = new SleepInterruptThread();
    f.start();
    try {
        TimeUnit.SECONDS.sleep(1);
        f.interrupt();
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    System.out.println("退出主程序");
}
</code></pre>

<p>}</p>

<p>public class SleepInterruptThread extends Thread {</p>

<pre><code>@Override
public void run() {
    try {
        TimeUnit.SECONDS.sleep(5);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }

    System.out.println("exit SleepInterrupt run");
}
</code></pre>

<p>}</p>

<p>```</p>

<p>上面的代码可以正常中断Sleep线程，捕获了InterruptedException异常。</p>

<h4>中断IO线程</h4>

<p>```java
public class ThreadInterrupt {</p>

<pre><code>public static void main(String[] args) {
    ExecutorService exec = Executors.newCachedThreadPool();
    Future f = exec.submit(new IOInterrupt(System.in));
    try {
        TimeUnit.SECONDS.sleep(1);
        f.cancel(true);

    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    System.out.println("退出主程序");
}
</code></pre>

<p>}</p>

<p>public class IOInterrupt implements Runnable {</p>

<pre><code>private InputStream in;

public IOInterrupt(InputStream is) {
    in = is;
}

@Override
public void run() {
    try {
        in.read();
    } catch (IOException e) {
        e.printStackTrace();
    }

    System.out.println("exit run");
}
</code></pre>

<p>}</p>

<p>```
<strong>对于IO阻塞线程，则无法进行中断！从catch语句中没有InterruptedException也可以看出。</strong>同样无法中断的还有SynchronizedBlocked，也就是如果线程进入synchronized方法或临界区中后，将无法中断。</p>

<p>对于网络访问这样的IO阻塞，如果不能中断有时挺烦人的。一个较笨的办法是关闭底层资源（例如关闭连接。）示例如下：</p>

<p><code>java
InputStream socketInput = new Socket("localhost", 8080).getInputStream();
exec.execute(new IOBlocked(socketInput));
//...
exec.shutdownNow(); //无法中断线程
//...
socketInput.close(); //关闭后，解除阻塞。
</code></p>

<p><strong>Java提供的各种nio类具有更人性化的I/O中断，被阻塞的nio通道会自动地响应中断。</strong></p>

<p><strong>synchronized方法或临界区上的阻塞，存在锁住程序的可能。而ReentrantLock上的阻塞则具备被中断的能力。</strong>例如当线程1 lock后，线程2也请求lock，在等待的过程中将产生阻塞，调用Thread.interrupt或Future.cancel可以将其中断。</p>

<h3>3.3 检查中断</h3>

<p>当你在线程上调用interrupt()时，如何保证安全地退出run方法，释放该释放的资源？</p>

<p>如果类必须响应interrupt()，那么就必须建立一种策略。当创建了需要清理的对象后，就必须紧跟try-finally子句，使得无论run()循环如何退出，都能正常清理。</p>

<h2>4. 线程之间的协作</h2>

<h3>4.1 wait()与notifyAll()</h3>

<p>调用sleep()和yield()时，锁并没有被释放。而调用wait()时，线程的执行被挂起，对象上的锁被释放。wait()表示无限期等待下去，直到notify或notifyAll，它也可以传入参数表示时间到期后恢复。当wait恢复时，会首先重新获取进入wait时释放的锁，在这个锁变为可用之前，是不会被唤醒的。</p>

<p><strong>只能在同步控制方法或者同步控制块里调用wait(), notify()和notifyAll()！</strong>否则虽然能够编译通过，但运行时将报异常：IllegalMonitorStateException。为什么要这样设计？<a href="http://javarevisited.blogspot.sg/2011/05/wait-notify-and-notifyall-in-java.html">这篇博客</a>作了解释。如果不这样做，就没有锁，就可能导致下一节中的“错失的信号”。</p>

<p>当从wait唤醒时，往往需要判断特定条件是否满足，如果不满足就返回到wait中，惯用的方法就是使用while来编写这种代码。下例是一个汽车打蜡抛光的示例，其它两个线程未列出。</p>

<p>```java
class Car {
private boolean waxOn = false;
public synchronized void waxed() {
waxOn = true;
notifyAll();
}
public synchronized void buffed() {
waxOn = false;
notifyAll();
}
public synchronized void waitForWaxing() throws InterruptedException {
while (waxOn == false) {
wait();
}
}
public synchronized void waitForBuffing() throws InterruptedException {
while (waxOn == true) {
wait();
}
}
}</p>

<p>```</p>

<h4>错失的信号</h4>

<p>当两个线程协作时，要特别注意可能会错过某个信号，例如下例T1通知T2，但是有可能T2收不到这个信号：</p>

<p>```java
T1:
synchronized(shareMonitor) {</p>

<pre><code> //&lt;setup condition for T2&gt;
 shareMonitor.notify();
</code></pre>

<p>}</p>

<p>T2:
while(someCondition) {</p>

<pre><code> //Point 1
 synchronized(shareMonitor) {
      shareMonitor.wait();
 }
</code></pre>

<p>}
```</p>

<p>以上代码运行到Point1时，如果调度到了T1，则T2收不到通知，就会永远在那里等待。T2正确的做法是：</p>

<p>```java
synchronized(shareMonitor) {</p>

<pre><code> while(someCondition) {
      shareMonitor.wait();
 }
</code></pre>

<p>}
```</p>

<h3>4.2 notify()与notifyAll()</h3>

<p>两者的不同之处在于，前者只唤醒一个线程，而后者唤醒同一锁定的所有线程。当有多个等待线程时，notify唤醒哪一个线程由调度决定。notifyAll唤醒多个线程后，它们将先为锁而战，先取得锁的线程先执行。</p>

<p>什么情况下使用notify或者notifyAll？在多个等待的线程中，如果它们都在等同一个条件，并且当条件变为真时，只有一个线程从中受益，那么用notify比notifyAll更好，因为它避免浪费CPU循环。 notify()只唤醒其中一个。因此当你使用notify时要确保只唤醒正确的那个。</p>

<p>notifyAll并不是唤醒所有等待线程，而是等待某个特定锁的所有线程。</p>

<h3>4.3 生产者和消费者</h3>

<p>除了wait()、notify()和notifyAll()方法用于同步方法或者同步代码块外，也可以使用Lock、Condition、await()、signal()和signalAll()方法。示例如下：</p>

<p>```java
class Car {</p>

<pre><code>private Lock lock = new ReentrantLock();
private Condition condition = lock.newCondition();
private boolean waxOn = false;
public void waxed() {
    lock.lock();
    try {
        waxOn = true;
        condition.signalAll();
    } finally {
        lock.unlock();
    }
}

public void waitForWaxing() throws InterruptedException {
    lock.lock();
    try {
        while (waxOn == false) 
            condition.await();
    } finally {
        lock.unlock();
    }
}

//...
</code></pre>

<p>}
```</p>

<p>注意，每个lock()的调用都必须紧跟一个try-finally子句，以保证所有情况都可以释放锁。在await()、signal()或signalAll()之前，必须拥有这个锁。</p>

<p>使用wait()和notifyAll()这样的方法来解决任务互操作的问题比较复杂。在典型的生产者-消费者实现中，常使用先进先出队列来存储被生产和消费的对象。BlockingQueue接口提供了这样的同步队列，该接口有多种实现，常见的是LinkedBlockingQueue和ArrayBlockingQueue(固定尺寸)。</p>

<p>如果消费者试图从队列中获取对象，而此时该队列为空，那么消费者将挂起，直到队列中有可消费的内容。阻塞队列可以解决很多问题，比wait()和notifyAll()相比，要简单得多，也更加可靠。示例如下：</p>

<p>```java
class LiftOffRunner implements Runnable {</p>

<pre><code>private BlockingQueue&lt;LiftOff&gt; rockets;
public LiftOffRunner(BlockingQueue&lt;LiftOff&gt; queue) {
    rockets = queue;
}

public void add(LiftOff lo) {
    try {
        rockets.put(lo);
    } catch(InterruptedException e) {
        print("Interrupted during put");
    }
}

public void run() {
    try {
        while(! Thread.interrupted)) {
            LiftOff rocket = rockets.take(); //阻塞直至rockets中有东西
            rocket.run();
        }
    } catch(InterruptedException e) {
        print("Exiting LiftOffRunner");
    }
}
</code></pre>

<p>}</p>

<p>//其它线程可以往rockets中添加内容，无需同步方法或者锁。
```</p>

<h3>4.4 任务间使用管道进行输入/输出</h3>

<p>通过输入/输出在线程间进行通信也很有用。这种管道在Java IO库中的对应物就是PipedWriter类和PipedReader类。这也是“生产者-消费者”的变体。示例如下：</p>

<p>```java
class Sender implements Runnable {</p>

<pre><code>private PipedWriter out = new PipedWriter();
public PipedWriter getWriter() { return out;}
public void run() {
    try {
        while (true) {
            for(char c = 'A'; c &lt;= 'z'; c++) {
                out.write(c);
                TimeUnit.MILLISECONDS.sleep(rand.nextInt(500));
            }
        }
    } catch(IOException e) {
        //...
    } catch(InterruptedException e ) {
        //...
    }
}
</code></pre>

<p>}</p>

<p>class Receiver implements Runnable {</p>

<pre><code>private PipedReader in;
public Receiver(Sender sender) {
    in = new PipedReader(sender.getWriter());
}

public void run() {
    try {
        while (true) {
            print("read: " + (char) in.read());
        }
    } catch (IOException e) {
        //...
    }
}
</code></pre>

<p>}</p>

<p>//与普通I/O不能interrupt不同，PipedReader是可以中断的。</p>

<p>```</p>

<p>相比之下，BlockingQueue使用起来更加健壮而容易。</p>

<h2>5. 死锁</h2>

<p>当以下四个条件同时满足时，就会发生死锁：</p>

<ol>
<li>互斥条件。任务使用的资源中至少有一个是不能共享的。</li>
<li>至少有一个任务必须持有一个资源且正在等待获取一个当前被别的任务持有的资源。</li>
<li>资源不能被任务抢占，任务必须把资源释放当作普通事件。</li>
<li>必须有循环等待。A等待B持有的资源，B又等待C持有的资源，这样一直下去之后，直到X在等待A所持有的资源。</li>
</ol>


<p>要防止死锁，只需破坏上述四条中的任意一条。破坏第4条是最容易的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java并发编程（一）]]></title>
    <link href="http://blog.ubone.com/blog/2014/08/30/javabing-fa-bian-cheng/"/>
    <updated>2014-08-30T21:58:15+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/08/30/javabing-fa-bian-cheng</id>
    <content type="html"><![CDATA[<p>本文是《Java编程思想》第21章并发的读书笔记。</p>

<!--more-->


<p>操作系统：抢占式（调度机制会周期性地中断线程，将上下文切换到另一个线程）、协作式（每个任务自己放弃控制）。</p>

<h2>1. 基本线程机制</h2>

<h3>1.1 定义任务</h3>

<p>```java
public class LiftOff implements Runnable {</p>

<pre><code> public void run() {
      //...
      Thread.yield(); //声明，我已经干完重要的事，可以把CPU让给其他任务了。
 }
</code></pre>

<p>}
```</p>

<h3>1.2 Thread类</h3>

<p><code>java
Thread t = new Thread(new LiftOff());
t.start();
</code></p>

<h3>1.3 使用Executor</h3>

<p>```java
ExecutorService exec = Executors.newCachedThreadPool(); //or newFixedThreadPool, newSingleThreadExecutor
exec.execute(new LiftOff());</p>

<p>exec.shutdown(); //防止加入新任务。
```</p>

<h3>1.4 从任务中产生返回值</h3>

<p>Runnable不返回任何值，Callable接口可以返回值。两者的区别只是后者的方法是call()而不是run()。</p>

<p>```java
class TaskWithResult implements Callable<String> {</p>

<pre><code> public String call() {
      return "result";
 }
</code></pre>

<p>}</p>

<p>ExecutorService exec = Executors.newSingleThreadExecutor();
Future<String> future = exec.submit(new TaskWithResult());
String result = future.get(); //get方法会一直等线程结束后返回结果。isDone()查询Future是否已经完成。
```</p>

<h3>1.5 休眠</h3>

<p>```java
public class SleepingTask extends LiftOff {</p>

<pre><code> public void run() {
      try {
           while(countDown-- &gt; 0) {
                //...
                TimeUnit.MILLISECONDS.sleep(100);
           }
      } catch(InterruptedException e) {
           //...
      }
 }
</code></pre>

<p>}
```</p>

<h3>1.6 优先级</h3>

<p>```java</p>

<pre><code> public void run() {
      Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
 }
</code></pre>

<p>```</p>

<p>Windows有7个优先级， Solaris有2<sup>31</sup>个优先级。各操作系统不一致，因此建议只使用三个优先级：Thread.MAX_PRIORITY, NORM_PRIORITY, MIN_PRIORITY。</p>

<h3>1.7 后台线程</h3>

<p>后台线程指程序运行时在后台提供通用服务的线程，并且不属性程序中不可或缺的部分。<strong>当所有非后台线程结束时，程序就终止了，同时会杀死所有后台线程。</strong>如果有非后台线程还在运行，则程序不会终止。</p>

<p>要设置为后台线程，必须在线程启动之前调用setDaemon()方法。</p>

<p>```java</p>

<pre><code> Thread daemon = new Thread(new LiftOff() );
 daemon.setDaemon(true); //必须在start()方法前调用
 daemon.start(); 
</code></pre>

<p>```</p>

<p>可以通过定制的ThreadFactory创建后台线程，例如：</p>

<p>```java
public class DaemonThreadFactory implements ThreadFactory {</p>

<pre><code> public Thread newThread(Runnable r) {
      Thread t = new Thread(r);
      t.setDaemon(true);
      //还可以设置优先级、名称等，这些将成为新线程的默认值。

      return t;
 }
</code></pre>

<p>}</p>

<p>ExecutorService exec = Executors.newCachedThreadPool(new DaemonThreadFactory()); //这个Factory将用于创建新的线程。
exec.execute(new LiftOff());
```</p>

<p><code>isDaemon()</code>方法用于判断是否后台线程。后台线程创建的任何线程都将自动设置为后台线程。</p>

<p>注意！对于后台线程，在不会执行<code>finally</code>子句的情况下就会终止其<code>run()</code>方法：</p>

<p>```java
class ADaemon implements Runnable {</p>

<pre><code>public void run() {
    try {
        //...
        TimeUnit.SECONDS.sleep(1);
    } catch(InterruptedException e) {
        //...
        //注意，此时已经是false, 因为异常被捕获时将清理这个标志
        print("isInterrupted(): " + isInterrupted()); 
    } finally {
        print("会运行到这吗？")
    }
}
</code></pre>

<p>}</p>

<p>public class DaemonsDontRunFinally {</p>

<pre><code>public static void main(String[] args) {
    Thread t = new Thread(new ADaemon());
    t.setDaemon(true);
    t.start();
}
</code></pre>

<p>}
```</p>

<p>一旦<code>setDaemon(true)</code>，finally并没有被执行。因为一旦main结束，所有后台线程就立即终止了。</p>

<h3>1.8 编码的变体</h3>

<p>除了实现Runnable，也可以直接继承Thread类。但是由于Java不支持多重继承，所以继承自Thread适应的场景要少一些。</p>

<p>```java
private class SampleThread extends Thread{</p>

<pre><code>public SampleThread() {
    super("线程名称");  //线程名称可通过getName()获取。
}

public void run() {
    //...
}
</code></pre>

<p>}
```</p>

<p>自管理的Runnable</p>

<p>```java
public class SelfManaged implements Runnable {</p>

<pre><code>private Thread t = new Thread(this);
public SelfManaged() {
    t.start();  //注，不建议在构造器中启动线程，可能会有问题，建议使用Executor
}

public void run() {
    //...
}

public static void main(String[] args) {
    new SelfManaged();
}
</code></pre>

<p>}
```</p>

<h3>1.9 加入一个线程</h3>

<p>某个线程在另一个线程t上调用<code>t.join()</code>方法，此线程被挂起，直到t线程结束（即<code>t.isActive() == false</code>）。join方法也可以加超时参数，表示如果时间到期还未结束的话，join()方法总能返回。</p>

<h3>1.10 捕获异常</h3>

<p>线程中的未捕获的异常会导致系统不稳定，但常规方法并不能在外面捕获这些异常，因此需要借助特殊处理。下面的例子创建了一个新类型的ThreadFactory，它将在每个新创建的Thread对象上附着一个Thread.UncaughtExceptionHandler。</p>

<p>```java
class MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {</p>

<pre><code>@Override
public void uncaughtException(Thread t, Throwable e) {
    // TODO Auto-generated method stub
}
</code></pre>

<p>}</p>

<p>class HandlerThreadFactory implements ThreadFactory {</p>

<pre><code>@Override
public Thread newThread(Runnable r) {
    Thread t = new Thread(r);
    t.setUncaughtExceptionHandler(new MyUncaughtExceptionHandler());

    return t;
}
</code></pre>

<p>}</p>

<p>ExecutorService exec = Executors.newCachedThreadPool(new HandlerThreadFactory());
exec.execute(new SomeThread());
```</p>

<p>如果你知道将要在代码中处处使用相同的异常处理器，那么更简单的方式是在Thread类中设置一个表态域，示例如下：</p>

<p><code>
Thread.setDefaultUncaughtExceptionHandler(new MyUncaughtExceptionHandler());
</code></p>

<h2>2. 共享受限资源</h2>

<h3>2.1  解决共享资源竞争</h3>

<p>Java提供了关键字synchronized，为防止资源冲突提供支持。如果某个线程处于一个对synchronized方法的调用中，那么这个线程在从该方法返回之前，其它所有调用类中任何synchronized方法的线程都会被阻塞。也就是说，对于某个特定对象来说，其所有synchronized方法共享同一个锁。</p>

<p>线程可以多次获得对象的锁，例如先调用synchronized方法获得锁后，又调用该类的其它方法获得锁。JVM会跟踪对象加锁的计数，每次调用加1，离开synchronized方法时减1。当计数变为0则锁被完全释放。</p>

<p>synchronized static方法可以在类的范围内防止对static数据的并发访问。</p>

<p>如果你正在写一个变量，它可能接下来被另一个线程读取，或者在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。</p>

<p>Lock对象也用于解决共享资源竞争。它必须被显式地创建、锁定和释放。</p>

<p>```java
public class MutexEvenGenerator extends IntGenerator {</p>

<pre><code>private Lock lock = new ReentrantLock();
public int next() {
    lock.lock();
    try {
        //...

        //注意！必须在try中返回值，以避免lock.unlock之后将数据暴露给其它线程。
        return someValue; 
    } finally {
        lock.unlock();
    }

    //不要在这里返回值
}
</code></pre>

<p>}
```</p>

<p>Lock提供了更细粒度的控制能力。使用Lock，可以更加自由地控制锁。例如尝试获得锁，如果获取不到，可以先干点别的事：</p>

<p>```java
boolean captured = lock.tryLock();</p>

<p>//设置超时时间，超时则触发异常。
try {</p>

<pre><code>boolean captured = lock.tryLock(2, TimeUnit.SECONDS);
</code></pre>

<p>} catch(InterruptedException e) {
}</p>

<p>```</p>

<h3>2.2 原子性和易变性</h3>

<p>原子性可用于除long、double之外的所有基本类型上的“简单操作”（读取和写入）。可以保证它们会被当作不可分（原子）的操作来操作内存。但JVM在读取和写入64位（long和double变量）时，可以拆成两个32位操作。因此可能导致“字撕裂”。作为普通开发者，<strong>不要依赖原子操作而移除了同步，那会得不偿失。</strong></p>

<p>关键字<code>volatile</code>可以帮助获得原子性。<code>volatile</code>还确保了数据的可视性。当一个域声明为<code>volatile</code>时，那么只要对它进行了写操作，即使使用了本地缓存，其它读操作也可以看到这个修改。因为<code>volatile</code>域会被立即写入主内存中，而读取操作就发生在主存中。</p>

<p>非<code>volatile</code>域上的原子操作不必刷新到主存，因此其它任务读取该域时可能看不到新值（修改操作的任务可以看到新值）。如果多个任务(线程)在同时访问某个域，那么这个域就应该是<code>volatile</code>的，否则这个域就应该经由同步来访问。同步也会导致向主存刷新。</p>

<h3>2.3 原子类</h3>

<p>Java引入了AtomicInteger, AtomicLong, AtomicReference等特殊的原子性变量类，它们提供机器级别上的原子性。常规编程很少派上用场，但在涉及性能调优时，会有用武之地。</p>

<p>需要强调的是，Atomic类被设计用来构建java.util.concurrent中的类，因此只有在特殊情况下才在自己的代码中使用它们。通常依赖于锁（Lock, synchronized）更安全一些。</p>

<h3>2.4 临界区(Critical section)</h3>

<p>以下同步控制块就是临界区：</p>

<p>```java
synchronized(synObject) {</p>

<pre><code>//这部分代码一次只能被一个线程访问
</code></pre>

<p>}
```</p>

<p>使用同步控制块，可以防止整个方法都同步，显著提高性能。但要注意，上面例子中，只要没有退出同步控制块，那么被同步对象synObject的所有同步方法都无法被其它线程调用。</p>

<h3>2.5 线程本地存储</h3>

<p>去除变量共享，在线程本地存储也是防止共享资源冲突的一种方法。如果你有5个线程都要使用变量x所表示的对象，那么线程本地存储就会生成5个用于x的不同的存储块。ThreadLocal对象用于线程本地存储。</p>

<p>ThreadLocal对象通常当作静态域存储。示例如下：</p>

<p>```java
public class ThreadLocalVariableHolder {</p>

<pre><code>private static final ThreadLocal&lt;Integer&gt; value = new ThreadLocal&lt;Integer&gt;() {
    @Override
    protected synchronized Integer initialValue() {
        return 10;
    }
};

public static int get() {
    return value.get();
}

public static void increment() {
    value.set(value.get() + 1);
}
</code></pre>

<p>}</p>

<p>public class Accessor implements Runnable {</p>

<pre><code>@Override
public void run() {
    ThreadLocalVariableHolder.increment();
    //..
}
</code></pre>

<p>}
```</p>

<h2>慎用延迟初始化</h2>

<p>在并发编程时，延迟初始化可能导致问题。除非绝对必要，否则就不要使用延迟初始化。</p>

<p><code>java
//正常的初始化
private final FieldType field = computeFieldValue();
</code></p>

<p>如果要使用延迟初始化，就要使用同步方法，例如：</p>

<p>```java
private FieldType field;</p>

<p>synchronized FieldType getField() {</p>

<pre><code> if (field == null) {
      field = computeFieldValue();
 }

 return field;
</code></pre>

<p>}
```</p>

<p>如果出于性能考虑，需要对静态域使用延迟初始化，就使用<strong>Lazy initialization holder class</strong>模式：</p>

<p>```java
private static Class FieldHolder {</p>

<pre><code> static final FieldType field = computefieldValue();
</code></pre>

<p>}</p>

<p>static FieldType getField() { return FieldHolder.field; }
```</p>

<p>如果出于性能考虑，需要对实例域使用延迟初始化，就使用双重检查模式(Double check idiom)：
<code>java
private volatile FieldType field;
FieldType getField() {
FieldType result = field;
if (result == null) {
synchronized(this) {
result = field;
if (result == null) {
field = result = computeFieldValue();
}
}
}
return result;
}
</code></p>

<p>注意上面的代码：</p>

<ol>
<li>使用volatile很重要；</li>
<li>使用局域变量result可以提高性能。据称在作者的机器上使用局域变量要快25%。</li>
<li>对于静态域，没有必要使用双重检查，<strong>Lazy initialization holder class</strong>是更好的选择。</li>
<li>如果延迟初始化可以接受重复初始化的实例域，则可以省去第二次检查。</li>
</ol>

]]></content>
  </entry>
  
</feed>
