<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 项目与产品 | 码出人生]]></title>
  <link href="http://blog.ubone.com/blog/categories/xiang-mu-yu-chan-pin/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2017-01-08T19:03:29+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用户故事与敏捷方法]]></title>
    <link href="http://blog.ubone.com/blog/2015/12/08/yong-hu-gu-shi-yu-min-jie-fang-fa/"/>
    <updated>2015-12-08T20:57:52+08:00</updated>
    <id>http://blog.ubone.com/blog/2015/12/08/yong-hu-gu-shi-yu-min-jie-fang-fa</id>
    <content type="html"><![CDATA[<p>这是一篇《用户故事与敏捷方法》读书笔记。</p>

<!--more-->


<p>第一部分学习如何识别、编写和测试自己的故事。</p>

<h2>1. 概览</h2>

<p>项目开发通常涉及两方：业务方和开发方。任何一方如果把持绝对地位，都不利于项目的成功。当业务方把持主导地位时，结果可能是牺牲质量来换取额外的特性。而如果开发方占主导地位，技术术语会代替业务语言，导致无法倾听业务方面的实际需求。</p>

<p>我们也无法完美地预测软件开发项目。当用户看到软件的早期版本时，他们会想出新的点子，改变他们的观点，导致软件不可控。</p>

<p>因此，我们要确保有一个获取信息的过程，越早越好，越频繁越好。用户故事由此应运而生。</p>

<p>用户故事描述了有价值的功能，由三方面组成：</p>

<ul>
<li>Card: 一份书面的故事描述</li>
<li>Conversation: 有关故事的对话</li>
<li>Confirmation: 用于表达和编档故事细节且可用于确定故事何时完成</li>
</ul>


<blockquote><p>Rachel Davies: 卡片代表客户需求而不是记录需求。</p></blockquote>

<p><strong>卡片包含故事的文字描述，然而需求细节要在对话中获得，并在确认部分得以记录。</strong></p>

<p>一个好的用户故事应该是对客户有价值的故事，是一两个程序员花半天到两周能完成代码和测试的。用户的期望最好以验收测试的形式记录下来。</p>

<p>应该由客户而不是开发人员来编写用户故事。主要原因是：</p>

<ul>
<li>每个故事必须用商业语言来写，而不是技术术语。</li>
<li>客户是主要的产品构想者，最适合描述产品行为。</li>
</ul>


<p>客户团队可以包括测试人员、产品经理、实际用户和交互设计师。</p>

<h2>2. 编写故事</h2>

<p>一个好的故事要具备INVEST特点：</p>

<ul>
<li>Independent (独立的)</li>
<li>Negotiable (可讨论的)</li>
<li>Valuable to Purchasers or Users (对用户或客户有价值)</li>
<li>Estimatable (可估计的)</li>
<li>Small （小的)</li>
<li>Testable (可测试的)</li>
</ul>


<p><strong>Independent</strong></p>

<p>我们要尽量避免故事间的相互依赖。当故事排列优先级、做计划时，相互依赖会导致一些问题。例如高优先级的故事依赖低优先级的。当出现依赖时，可以：</p>

<ul>
<li>将相互依赖的故事合并成一个大的、独立的故事</li>
<li>用一个不同的方式、维度去分割故事</li>
</ul>


<p>理想情况下，故事之间是独立的。有时很难做到这一点，但应尽量实现这一目标。故事之间的交付顺序应该是无关的。可以任意拿一个故事来实现。</p>

<p><strong>Negotiable</strong></p>

<p>故事不是签好的合同。故事卡是功能的简短描述，细节在讨论中产生。它的作用是提醒客户和开发团队在以后进行关于需求的对话。因此它本身不需要包含所有的细节。</p>

<p>当然，如果编写故事的时候已经知道一些重要细节，可以注释的形式记录，例如：</p>

<p>```
公司可以用信用卡支付发布工作信息的费用。</p>

<p>备注：接受Visa，Mastercard和运通卡，考虑支持支付宝
```</p>

<p><strong>Valuable to Purchasers or Users</strong></p>

<p>故事应该对用户（软件使用者）或客户（软件购买者）有价值。避免那些只对开发人员有价值的故事。</p>

<p>保证每个故事对客户或用户有价值的最好方法是让客户来编写故事。</p>

<p><strong>Estimatable</strong></p>

<p>有3个原因导致故事不好估计：</p>

<ul>
<li>缺少领域知道</li>
<li>缺少技术知识</li>
<li>故事太大了</li>
</ul>


<p>如果开发人员缺少领域知道，他应该和写故事的客户一起讨论。但也没必要理解故事的所有细节，只需要对故事有个大概了解。</p>

<p>如果缺少技术知识，可以让一个或多个开发人员实施Spike试验，不需要做十分深入的研究，只要大体了解足够信息来估计这个任务即可。这样一个不可估计的故事就变成两个故事。</p>

<p>如果故事太大，就需要分解成多个更小的故事。但即使故事太大无法估算，这样的Epic故事也是有用的。因为它作为待讨论的一大块功能的占位符。</p>

<p><strong>Small</strong></p>

<p>合适的故事大小最终取决于团队、它的容量及使用的技术。</p>

<p>通常Epic故事可以分为复合故事（Compound story)和复杂故事(Complex story)。</p>

<p>复合故事由多个小故事组成。它比较好拆分成小故事。例如可以按动作分解故事：创建、编辑和删除用户简历。或者根据数据边界来分解，如：用户可以增加、修改教育信息；用户可以增加、修改工作经历。</p>

<p>对于复杂故事，往往由于不确定性而变得复杂。可以分成两个故事，一个做调研（Spike)的故事和一个开发的故事。通常把调研故事放在一轮迭代中，另外的故事放在接下来的一轮或多轮迭代中。如果放在同一轮迭代则不确定性会高于平常。</p>

<p>对于太小的故事，例如缺陷或界面的变更，可以将多个合并到一个故事。</p>

<p><strong>Testable</strong></p>

<p>故事必须是可测试的，如果不能测试，开发人员怎么知道算是完成了呢？通常不可测试的故事发生在一些非功能性需求上。</p>

<p><strong>开发人员的职责</strong></p>

<ul>
<li>负责帮助客户编写故事，这些故事要能提醒你与客户交流，而不是记录详细的需求。</li>
<li>如果被问及采用的技术和基础架构，应该使用对用户和客户有价值的术语来描述。【HOW】</li>
</ul>


<p><strong>客户团队的职责</strong></p>

<ul>
<li>负责编写故事。这些故事要能提醒你同开发人员交谈，而不是记录详细的需求。</li>
</ul>


<h2>3. 用户角色建模</h2>

<p>我们不能从单一的角度或角色出发编写故事，这样会容易忽略一些需求（故事）。因此我们需要选择有用的用户角色集合。通常我们可以：</p>

<ul>
<li>通过头脑风暴列出初始用户角色集合</li>
<li>整理最初的角色集合</li>
<li>整合角色</li>
<li>提炼角色。</li>
</ul>


<p>识别完用户角色后，可以考虑两个额外的技术：</p>

<ul>
<li>虚构人物：给某个重要的用户角色创建一个虚构的人物，取个名字，找张照片，并进行描述。从用户角色或虚构人物的角度描述故事会使故事更加生动。</li>
<li>极端人物：考虑极端人物（如特殊人群）可能会让你编写出原本可能遗漏的故事，带来一两个灵感。但不应投入太多的时间。</li>
</ul>


<h2>4. 搜集故事</h2>

<p>如何与用户一起工作，如何通过与他们沟通来发现故事？</p>

<p>Robertson引入拖网（trawling）来描述收集需求的过程：</p>

<ul>
<li>不同大小的网用来捕获不同大小的需求。例如第一遍用大网，然后再用小一点的网捞中等需求&hellip;</li>
<li>需求像鱼一样，会成长，会死亡。今天漏掉的需求明天可能成长。今天重要的需求明天可能重要性降低。</li>
<li>在某个区域拖网不可能捕获所有的鱼。另外也可能捞到废弃物导致需求膨胀。</li>
<li>技能是发现需求的一个要素。熟练的分析人员更高效。</li>
</ul>


<p>辨别传统规范过程与敏捷过程最简单的方法之一，是看其搜集需求的方式。敏捷项目承认没有一种理想的方法可以在一个单一阶段获取到所有的用户故事。同时承认用户故事有时间维度，它的相关性会有所变化。</p>

<p>但即使如此，我们也应该在早期尝试编写我们可以编写的故事，哪怕许多故事还只能停留在十分笼统的阶段。至少它可以充当占位符，留待以后细化。</p>

<p>搜集故事最有用的一些方法包括：</p>

<ul>
<li>用户访谈</li>
<li>问卷调查</li>
<li>观察</li>
<li>故事编写工作坊</li>
</ul>


<p>用户访谈成功的关键之一是选择正确的受访者。只要有可能，就应该访问真实用户和不同角色的用户。要注意问开放式问题而不是封闭式问题。同时要注意提背景无关的问题。</p>

<p>问卷调查是一种有效的方法。如果你有一个庞大的用户群，问卷是收集优先级信息的好方法。但问卷不适合捕获新故事。</p>

<p>观察用户实际使用软件的情况，这是一个非常不错的方法。可以获得很多提高用户体验或生产力的想法。</p>

<p>故事编写工作坊是快速捕捞故事最有效的方法。建议在开始每个计划前举办。通常可以结合<strong>头脑风暴和简单原型法</strong>。可以画一个简单原型，及软件内部高层次间的交互。对可能要做的事进行头脑风暴，不断构建原型。但注意不要确定实际界面和字段，<strong>只是为了从概念上确定工作流</strong>。</p>

<p>通常从某个角色开始，对他做的每件事，画一条线指向新的方框，写一个故事。这些故事不需要知道界面怎么设计。走一遍流程帮助大家想出尽可能多的故事。深度优先的方法最有效，广度优先非常不容易理解。</p>

<p>在故事编写工作坊期间，要把重点放在数量而不是质量上。不要为每个故事都陷入长时间的讨论中。不要在过程中评价某个故事好或坏，要让大家愿意说出自己的想法。</p>

<h2>5. 与用户代理合作</h2>

<p>客户团队中包括真实用户是极其重要的，遗憾的是，我们很难有机会与实际用户一起工作。这时候我们就需要用户代理，他们在项目中代表着用户。这些用户代理有不同的特点。</p>

<table>
<thead>
<tr>
<th> 角色 </th>
<th> 特点     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 用户的经理       </td>
<td> 用户的经理的确是用户，但他使用的模式肯定与典型用户不同。有时候，用户的经理出于自负或固执己见，认为自己比用户更知道他们需要什么。这种情况下，即要不得罪用户的经理，也要围绕他的同时，想办法接触终端用户。       </td>
</tr>
<tr>
<td> 开发经理 </td>
<td> 这是最坏的选择。他们最想获取的是荣耀。他的优先级可能是那些令人兴奋的新技术。他即没有用户那样的亲身经验，也不是领域专家。</td>
</tr>
<tr>
<td> 销售人员 </td>
<td> 这是危险的选择，对他们来说最重要的故事是那些如果没有实现就会导致“丢单”的故事。但他们是非常好的中转站，可以通过他介绍你给客户。</td>
</tr>
<tr>
<td> 领域专家 </td>
<td> 领域专家是很好的资源，但对你是否有帮助，取决于他是否了解你正在开发的软件。你可以从领域专家那里获得专业帮助，但最好从实际用户那里了解工作流及使用方面的问题。避免最终开发出的软件仅针对那些与领域专家有类似水平的用户。</td>
</tr>
<tr>
<td> 市场营销团队 </td>
<td> 他们通常更关注产品特性的数量而轻视质量。他们可以提供优先级的指导意见，但往往无法提供故事的具体细节。</td>
</tr>
<tr>
<td> 客户 </td>
<td> 他们是做出购买决定的人，如果他们能与用户密切交流，就能成为非常好的用户代理。如果他们自己也是用户，那就是完美的组合。</td>
</tr>
<tr>
<td> 培训师和技术支持 </td>
<td> 要避免最终的系统只能成为一个容易培训或使得支持工作较为容易的系统。他们的优先级排列也很可能与真实用户不同。</td>
</tr>
<tr>
<td> 业务分析师或系统分析师 </td>
<td> 有些分析师遇到问题喜欢空想，而不是去做调查。有时候他们喜欢在项目前期花太多时间。</td>
</tr>
</tbody>
</table>


<p>在与用户代理合作时，如果能接触到用户但受限时，可以启动一个用户顾问团队。这个团队由数量不限的实际用户组成。顾问团队能够提出意见和建议，而用户代理仍然是项目最终的决策者。如果实在无法接触到用户，一种办法是使用多个用户代理。避免开发出的系统仅仅准确地满足了一个人的需求。</p>

<p>在与用户代理而不是实际用户合作时，另一个可用的方法是迟早发布产品。一旦软件交付到早期用户手里，你就打开了一条与用户沟通的途径。</p>

<p>任何时候都要记住，实际用户总是优于用户代理。应该将客户团队建立成一个优势互补的团队。建立客户团队有三步：</p>

<ul>
<li>邀请真实用户加入。最好包括各种类型的用户。</li>
<li>在客户团队中确定一位项目负责人。这个人通常是产品经理，负责协调客户团队的协作。对开发项目来说，必须只能有一个客户声音。</li>
<li>确定项目成功必须的关键因素。</li>
</ul>


<h2>6. 用户故事验收测试</h2>

<p>写验收测试的好处有很多，其中之一客户与开发人员讨论的很多细节可以通过验收测试记录下来，充实很多用户故事的细节。测试是一个两步流程：</p>

<ul>
<li>将测试要点记录在故事卡背面。</li>
<li>将测试要点变成全面的测试。这些测试可以用来演示故事已经正确、完整地实现。</li>
</ul>


<p>为了让开发人员尽早了解故事信息，应当在开发这个故事之前就开始制定验收测试。理想情况下，客户和开发人员讨论故事时，把细节都写成测试。通常可以问类似下面的问题：</p>

<ul>
<li>关于这个故事，开发人员还需要知道什么？</li>
<li>对于怎么实现这个故事，我的想法是什么？</li>
<li>有没有一些特殊情况会使这个故事有不一样的行为？</li>
<li>这个故事什么情况下会出错？</li>
</ul>


<p>验收测试应当由客户来定义，因为它实现了用户的愿景。</p>

<p>多少测试才算够？只要这些测试还在继续为故事增加价值和使它更加清晰，客户就应该继续写测试。如果新的测试对阐明故事细节或者意图没有任何帮助，就不用再写。客户不负责定义所有可能的测试。客户应更专注于那些能向开发团队说明故事意图的测试。</p>

<p>一个非常好的自动化验收测试工具是<a href="fit.c2.com">FIT</a>，<a href="fitnesse.org">FitNesse</a>是一个简化测试编写的FIT扩展。它以电子表格的样式来编写测试，极大降低了编写测试的工作量。</p>

<h2>7. 优秀用户故事准则</h2>

<p>当面对一个大故事时，通常有许多方法可以将它分解成较小的故事。许多开发人员首先想到的是按技术路径分割。例如：</p>

<ul>
<li>求职者可以填写简历</li>
<li>简历被保存到数据库</li>
</ul>


<p>这种做法的缺陷是，没有一个故事是单独对用户很有用的。我们需要换一种方式，保证每个故事都提供某种程度的完整功能。这种是切蛋糕原则。可以改成：</p>

<ul>
<li>求职者可以提交简历，简历史包括基本信息。</li>
<li>求职者可以提交简历，简历包括企业想看的所有信息。</li>
</ul>


<p>采用<strong>切蛋糕</strong>原则有两个原因：</p>

<ul>
<li>在开发中，尽早涉及软件应用程序架构的每一层能够有效降低层次架构方面的风险。</li>
<li>尽管不十分完美，即使只提供部分功能，但只要可以跑，就可以放心地把应用程序发布给客户使用。</li>
</ul>


<p>尽量<strong>编写封闭故事</strong>。一个封闭的故事是指随着一个有意义的目标的实现而结束的故事，能让用户使用后觉得他完成了某个任务。</p>

<p>还有一种特殊的故事卡，称为“<strong>约束</strong>”。对于任何必须要遵守而不需要直接实现的故事，可以在故事卡上标注“约束”(Constrain)。例如软件要便于以后实现国际化。</p>

<p>可以<strong>根据实现时间来确定故事规模</strong>。对于接下来几轮迭代的故事，其大小应该能够安排进那几轮迭代中。而对于更遥远的故事，它们可能会更大，精确度也更低。</p>

<p><strong>用户故事不要过早涉及用户界面</strong>，这很容易将需求和解决方案混在一起。例如：打印对话框允许用户修改打印机列表。用户可以对列表增加或删除打印机。</p>

<p>当软件变得越来越完整，并且故事从全新功能转向修改或扩展现有功能时，用户界面细节可以出现在故事中。</p>

<p>如果需要也可以采用故事卡以外的其它形式来表达需求，例如重要系统间的接口文档。</p>

<p>在故事中包括用户角色能让开发人员脑子里保持重要和形象的位置。例如将”用户可以发布自己的简历“改成”求职者可以发布自己的简历“。故事可以使用下面的格式编写：</p>

<p><code>
我作为（角色），想要（功能），以此（商业价值）
</code></p>

<h2>8. 估算用户故事</h2>

<p>故事点(Story point)估算是一种常用的估算方法。它有个很好的特性是团队可以定义自己认为合适的故事点。一点故事点可以是一个理想日（一天没有任何干扰）的工作，也可以把故事点作为复杂度的测量。</p>

<p>故事估算应该由整个团队集体完成。由于还不确定谁负责完成，因此故事应分配给整个团队而不是个人。而且团队的估算可能比个人估算更有用。如果团队很大（多于7人），则不需要每个人都参加。作者建议采用Wideband Delphi方法进行估算。</p>

<p>采用Delphi方法进行估算时，可以让客户随机抽取一个故事，读给开发人员听。开发人员根据需要尽可能多发问。如果客户不知道答案，可以先猜或者推迟估算这个故事。当没有疑问了，每人写下一个估值，先不要给其他人看。大家都写好后，所有人翻开估值，如果估值差异大，大家进行讨论，然后再进行下一轮估值，直到估值接近。很多情况下，第二轮估值就差不多了，很少会超过三轮。点数要合理，而不是绝对精确。</p>

<p>做了几个估算后，有必要对估算做三角测量。也就是根据这个故事与其他故事的关系来估算。如果一个故事是4个点，另一个故事是2个点。开发人员应该同意4个点的故事大概是2个点故事的两倍。也可以在墙上划出多个泳道，相同点数的卡放在同一泳道。这是一种逐渐改变一个故事点含义的有效方法。</p>

<p>我们用速率(Velocity)来代表一个团队在一轮迭代中完成（或期望完成）的故事点数。</p>

<p>任意分布的独立样本数量之和是符合正态分布的。团队的故事点估算可能倾向于低估、高估或任意方式分布，但当我们从这些分布中取出一轮迭代容量的故事时，它们是常态分布的。因此可以用一轮迭代的速率来预测未来迭代的速率。</p>

<p>一个故事究竟是7个点或8个点，区别是很小的，没有必要纠结。因此可以只用一些预定的值，如：1、2、3、5、8.</p>

<p>采用故事点估算时常有一些迷惑，请记住：</p>

<ul>
<li>你的团队的故事点和我的团队的故事点是不一样的。</li>
<li>一个史诗故事分解成一些小故事后，小故事估算总和不需要与大故事估算相同。</li>
<li>结对编程对故事点估算没有影响，它影响的是团队速率而不是估算。</li>
</ul>


<h2>9. 制定发布计划</h2>

<p>发布计划将粗粒度的故事分配到多轮迭代中。为了制订发布计划，客户必须对故事排优先级。我们可以采用DSDM方法：</p>

<ul>
<li>Must have</li>
<li>Should have</li>
<li>Could have</li>
<li>Won&rsquo;t have this time</li>
</ul>


<p>开发人员和客户共同选择适合他们的迭代长度。通常为1-4周。在开发期间，尽可能地坚持固定的迭代长度。</p>

<p>从故事点到预计工期，我们可以使用速率。例如速率是25，项目总共是100个点，那么我们需要4轮迭代。</p>

<p>初始速率可以使用历史值、执行一轮初始迭代的值，或者猜测。</p>

<p>制定发布计划的最后一步是把故事分配到每轮迭代中。假设100个点的项目，速率为20个点。可以选择优先级最高的20个点放到第一轮迭代中。下一组次高优先级的20个点放到第二轮迭代。如此进行直到全部分配完。</p>

<h2>10. 迭代计划</h2>

<p>发布计划不包含很多细节，是行动的开始。在开始一轮迭代时，需要进一步失迭代计划。</p>

<p>整个团队所有成员都要参加迭代计划会议，为下一轮迭代做计划。团队将仔细研究用户故事，主要内容包括：</p>

<ul>
<li>讨论故事</li>
<li>从故事中分解出任务</li>
<li>开发人员承担每个任务的职责</li>
<li>讨论过所有故事并且接受所有任务后，开发人员单独估计他们承担的任务，以确保不会做出过于乐观的承诺。</li>
</ul>


<p>迭代计划也是客户为团队调整故事优先级的最佳时机。但不宜频繁改变故事的优先级。</p>

<p>迭代计划会议开始时，由客户从最高优先级的故事开始讲解。开发人员通过提问，直到充分理解故事。但也没有必要理解故事的所有细节避免会议变得过长，会后仍可以厘清故事的关键细节。</p>

<p>尽管故事已经比较小（一般占用1-5个理想日），但仍有必要分解出更小的任务。因为实现故事的开发人员可能不止一个，或者故事是用户价值的描述，并不是开发人员的to-do list. 所以分解成任务是有必要的。这个过程其实是一次即时设计，取代瀑布的前期设计阶段。只有当你脑海中至少有一个设计方案时，才可能从故事中分解出任务。</p>

<h2>11. 测量并监控速率</h2>

<p>速率是一个非常重要的度量。它很容易计算，将完成的点数求各。不能将未完成的故事计算在速率中，因为它并没有给用户带来任何价值。</p>

<p>可以通过计划速率和实际速率的曲线图来监控进度。横坐标是迭代次数/天，纵坐标是故事点数。另一个图形化的监控手段是燃尽图。横坐标是迭代次数/天，纵坐标是剩余故事点。</p>

<h2>12. 其它</h2>

<h3>12.1 用户故事不是用例</h3>

<ul>
<li>两者最明显的区别是它们的范围。故事的范围更小，例如故事”当用户试图使用过期信用卡时，系统提示他输入不同的信用卡”可能只是用例“支付招聘广告费用”的一个主要步骤。</li>
<li>两者的完整性也不同。故事可能对应用例的一个扩展步骤。</li>
<li>它们的寿命不同。用例作为工件持续存在，而故事只存在于它所在的迭代。</li>
<li>用例可以包含用户界面细节，而故事在项目早期不应该包括界面细节，用户界面只会在与客户的交谈中产生。</li>
<li>目的不同。用例的目的是客户和开发人员接受的协议，而故事是为了更方便发布计划和迭代计划，是具体需求对话的占位符。</li>
</ul>


<h3>12.2 用户故事的优势和不足</h3>

<p><strong>优势：</strong></p>

<ul>
<li>用户故事强调口头沟通</li>
<li>用户故事容易理解</li>
<li>用户故事的大小适合做计划</li>
<li>用户故事适合于迭代开发。在开始编码前，不需要写出所有的用户故事。很容易对故事本身进行迭代。</li>
<li>用户故事鼓励延迟细节。对于有时间限制的项目，团队可以迅速写出数十个用户故事，让大家有一个整体概念，然后讨论前几个故事的细节并开始编码。</li>
<li>用户故事支持随机应变的开发。我们承认从高层次的需求到代码并没有一条严格线性的路径，用户故事使软件团队能够轻松地在高层及底层思考间来回切换并不断地讨论需求。</li>
<li>用户故事鼓励参与性设计。用户作为软件行为设计团队的一份子，自动成为团队密不可分的一部分。</li>
<li>用户故事传播隐性知识。面对面的沟通能促进团队内隐性知识的积累。</li>
</ul>


<p><strong>不足：</strong></p>

<ul>
<li>在拥有大量用户故事的大型项目中，故事间的关系可能错综复杂，难以捉摸。这时需要使用角色来淡化此问题，尽量保证用户故事不要过于细化，直到开发时才开始细化。</li>
<li>如果需要满足需求的可追溯性，则需要额外的文档。</li>
<li>对特大规模多团队的项目，确实需要把有些交流记录下来，否则难以保证信息的充分共享。</li>
</ul>


<h3>12.3 用户故事与用户界面</h3>

<p>用户故事鼓励延迟讨论，直到开发人员准备好实现故事。这会导致一部分轻微的返工，其成本是合乎情理的。但用户界面则不同。</p>

<blockquote><p>对于用户界面，架构的设计（包括总的结构组织、导航以及观感），必须可以覆盖各种各样的任务。当架构涉及到用户界面，那么后期改进是无法授受的，因为这意味着对那些已经学会或掌握了先前界面的用户更改系统。这可能产生问题。</p></blockquote>

<p>这时候可以采用基于故事的敏捷版以使用为中心的设计：</p>

<ul>
<li>用户角色建模</li>
<li>捕捞高层次的用户故事</li>
<li>排列故事优先级</li>
<li>精炼高优先级和中等优先级的故事</li>
<li>对故事整理分组</li>
<li>建立书面的原型</li>
<li>精炼该原型</li>
<li>开始编程</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《谷歌和亚马逊如何做产品》]]></title>
    <link href="http://blog.ubone.com/blog/2015/03/25/du-gu-ge-he-ya-ma-xun-ru-he-zuo-chan-pin/"/>
    <updated>2015-03-25T10:08:11+08:00</updated>
    <id>http://blog.ubone.com/blog/2015/03/25/du-gu-ge-he-ya-ma-xun-ru-he-zuo-chan-pin</id>
    <content type="html"><![CDATA[<p>最近读了《谷歌和亚马逊如何做产品》这本书，书的内容不多，但都是精华。作者曾先后在Amazon和Google担任研发经理和高级产品经理。该书主要讲软件的交付，分为两部分，一是介绍Amazon和Google如何交付软件产品，二是团队主管带领团队成功交付所需的技术、最佳实践和技能。</p>

<!--more-->


<h2>1. 步步为“赢”</h2>

<p>在介绍Amazon和Google如何交付软件产品时，作者强调了各个阶段的重点，也就是如何步步为“赢”。<strong>包括使命和策略、产品定义、用户体验、项目管理、测试、量化以及发布。</strong></p>

<h3>1.1 赢在使命和策略</h3>

<p>作者表示，成功交付的关键在于快速且充分地满足客户需求。（看起来是句废话？）因此使命就是解决客户的问题，而策略就是找到一种独特的方法来满足这个群体或细分市场的共同需求。</p>

<p>关于如何找到正确的需求，作者提到杰夫.贝索斯（Amazon CEO）一直强调的观点“以客户为导向，而不是以竞争为导向。”同样地，拉里.佩奇（Google CEO）也常说“立足客户，向外拓展。”，所以，<strong>团队应该始终积极地去解决客户的问题，而不是紧盯竞争对手，被动地做出反应。</strong></p>

<p>如何构建卓越的使命？作者表示团队一定要有自己的使命。如果对使命的理解不同而各自为战，就是导致冲突、混乱和痛苦。一个卓越的使命要符合三点要求：</p>

<ol>
<li>能够唤起人们的兴趣</li>
<li>提供言之有物且能指明方向的原则</li>
<li>适合印在T恤上。</li>
</ol>


<p>使命不需要面面俱到，而是要能够反映代表性产品或服务的使命。</p>

<p>如何制订正确的策略？策略是指在竞争对手的压力下，利用公司独特的优势来争取目标客户的粗略计划。需要阐明三件事：客户、公司和竞争。你需要特别注意如何才能长期为客户提供比竞争对手更优质的产品。</p>

<p>当你已经知道谁是产品的忠实用户，以及产品如何保持长期的竞争优势，那么你用最多三段文字写下来，然后再将这些想法的本质浓缩成一段文字。这就是你的策略。越简短的策略越容易实现，也越容易获得他人的认同。</p>

<h3>1.2 赢在产品定义</h3>

<p>通过制订使命和策略，你知道了你的客户是谁，他们的需求是什么，你也知道如何做才能比对手更出色、更具备差异性。然后你就可以细化产品方案。</p>

<p>在细化产品方案时，你会发现很多要解决的客户问题都是你主观臆断的，Amazon和Google都犯过这样的错误。所以要采用一些方法来证明臆断是否正确。即使它们十之八九是正确的，也要经过证明。最好的证明方法就是把产品提供给客户使用，然后听听他们的意见。这也是现在互联网产品常用的方法：最小化可行产品（MVP）。</p>

<p>产品定义过程分为10步：</p>

<h4>1.2.1 撰写新闻稿</h4>

<p>这是由杰夫率先倡导的方法，可以是新闻稿或博客。从用户的视角出发，简明扼要地描述产品是什么、什么时候发布以及为什么要做这个产品。主要包括六大要素：</p>

<ul>
<li>产品命名</li>
<li>发布时间</li>
<li>目标客户</li>
<li>解决了什么问题</li>
<li>如何解决（务必简明扼要）</li>
<li>CEO的公开赞辞</li>
</ul>


<h4>1.2.2 创建并不断更新FAQ文档</h4>

<p>随着产品方案的不断细化，遇到的问题也层出不穷，需要记录一个FAQ文档。它有两大好处：</p>

<ul>
<li>节省你大量回复邮件的时间、抵御一些内部责难（证明你是尽职的）</li>
<li>FAQ中的内部问题和外部问题，以后客户支持团队和科技写作团队需要用到。</li>
</ul>


<h4>1.2.3 绘制线框图和流程图</h4>

<p>在FAQ中撰写问题答案时，用流程图或线框图表述会更好一些，尤其涉及用户体验（UX）的细节时更是如此。</p>

<h4>1.2.4 撰写产品单页和制作10分钟的演示文稿</h4>

<p>接下来你要争取工程团队、管理层、风险投资人(VC)或其它利益相关方的初步支持，弄清楚他们对产品的认可程度，而不是等待第7步功能规格文档都快完成了，而他们还对产品的价值存有疑义。</p>

<p>这一步需要准备产品单页或10分钟的演示文稿，或者两样都要准备。这两份文档是新闻稿的延伸，应该包含5个要素：</p>

<ul>
<li>产品名称</li>
<li>目标客户 +数量有多少</li>
<li>解决了什么问题 + 这个问题对于目标客户来说有多大价值</li>
<li>解决方案 + 这个解决方案类似线上哪个产品，为什么你的方案能让竞争对手在长时间内都无法模仿</li>
<li>何时交付 + 主要的里程碑有哪些</li>
<li>团队背景 （仅针对VC）</li>
</ul>


<h4>1.2.5 在FAQ中增加API文档</h4>

<p>API文档用于说明你的团队如何与其他团队协作、外部开发者如何使用这套系统，以及你需要存储什么数据，也有助于你构建SOA体系。</p>

<h4>1.2.6 撰写功能规格文档</h4>

<p>功能规格文档的读者一般为工程团队、设计团队，偶尔还有市场营销团队。主要包括：</p>

<ol>
<li>简介</li>
<li>目标与非目标</li>
<li>用例或用户场景</li>
<li>原型图或线框图</li>
<li>API</li>
<li>负载规划</li>
<li>依赖</li>
<li>FAQ和开放问题</li>
<li>关键事件</li>
</ol>


<p>其中“非目标”用于告诉别人你不要做什么。例如“不用支持PC端。”用例是指用简要的语句描述那些用户必须执行的操作，用户场景则用叙述故事的方式来描述用户是如何体验产品的（类似于用例实现规约）。用例和用户场景都需要加上优先级，以方便工程团队排定任务。常见的优先级包括：</p>

<ul>
<li>P0 没有此功能产品无法演示</li>
<li>P1 没有此功能无法交付</li>
<li>P2 锦上添花的功能</li>
<li>P3 哈哈哈！</li>
</ul>


<p>负载规划是指对未来一段时间内用户的使用量进行粗略估计并制定应对计划。灾难并不可怕，可怕的是你没有任何准备。应该适当部署一些有效的危机管理系统，如流量限制系统。你需要了解当系统过载时是部分彻底不可用还是整体被拖慢。<strong>不要花太长时间在评估上，只需要花几个小时写个初稿，再找几个团队成员讨论下并将讨论出的数值翻倍就大功告成了。</strong></p>

<p>你需要将全部依赖方及负责人列出来，如果有应急方案也一并列出。功能规格定稿后应该发给各依赖方的负责人，让他们知道你需要他们的支持。</p>

<p>如果有一些硬性时间要求（例如某某开发者大会），这些时间也需要放入文档。最好列出主要事件的达成时间，如特性完成时间，可信测试者版发布时间。</p>

<h4>1.2.7 找出边界情况并得到团队认可</h4>

<p>这时候最困难的部分已经过去，你写了一份超级大的文档，可能没有人能全部读完。这时候你需要时间仔细地、创造性地思考用户会如何弄坏你的软件或者在某种意义上没有按照你的预期来使用软件。当你“漫步”时，请将想到的所有可能的边界情况以及应对策略写在FAQ或者产品需求文档中。</p>

<p>这一步充满风险。一方面你必须承认并整合所有你的团队找到的边界情况，另一方面还必须捍卫产品的核心原则。如果工程团队都不买账的产品，你如何指望你的客户会买账？你并不需要团队的每一个人都相信你的规划是完美的，而是需要他们同意朝一个方向前进并把产品视作是一个极有可能成功的实验！</p>

<h4>1.2.8 客户测试</h4>

<p>找一批现存的或潜在的客户，向他们介绍你的产品设想和原型，听听他们的反馈。在产品演示文稿准备妥当之后，应该马上安排持续3周，每周3至5次的面向潜在客户的产品演示。</p>

<h4>1.2.9 想清楚基本的商业要素——命名、定价和收益</h4>

<p>讨论名称是一件极其主观且争议较大的事情。其实名称并没有那么重要，它再出色也不能帮做成一个产品或者毁掉一个产品，不要浪费太多时间纠结，赶紧定一个！</p>

<p>产品定价有三个基本方法：按成本定价、按价值定价以及对比定价。软件业通常不适合按成本定价，因为难以统计也不知道明天的成本。按价值定价，你需要去调研客户，看什么价位他们愿意购买。但客户很少如实回答，这个方法看起来合理但不具备可操作性。对比定价与前面两个方法相比要合理得多。它有两个前提：1是有一个合理的比较目标；2是假定市场是弹性的，即产品会在价格下降时销量增加。</p>

<p>有了定价就可以制定收益模型，这也是一个拍脑袋出来的东西。可以做一个简单的Excel表格，设定相应的变量和计算步骤，反复进行预测。</p>

<h4>1.2.10 取得上层的认可</h4>

<p>在向位高权重的人汇报产品方案时，首先确保你了解产品的所有信息。如果你注定做不到这点，也需要尽力做好一些。万一问到你不清楚的问题时，不要试着糊弄过去，承认错误也没有什么大不了的，这不过是向他们证明作为一个菜鸟你无法理解他们有多优秀。</p>

<h4>1.2.11 去构建产品</h4>

<p>驱动你的团队在现实的重重困境中构建出可靠的软件。</p>

<h3>1.3 赢在用户体验</h3>

<p>首先了解一些概念：</p>

<ul>
<li>用户体验（UX, User Experience）通过制作流程图或原型图来说明用户体验。</li>
<li>用户界面（UI, User Interface）用户体验的旧称，更关注单个页面的设计。</li>
<li>视觉设计（VisD, Visual Design）通过一种既赏心悦目、夺人眼球又清晰明了的方式来展示内容。</li>
<li>用户体验研究（UXR, User Experience Research）专注于研究用户是如何看待你的产品。</li>
</ul>


<p>要交付一套卓越的用户体验，必须回答6个问题：</p>

<ol>
<li>该用户界面要求用户完成的最重要的任务是什么？</li>
<li>这是最简单的解决方案吗？</li>
<li>信息是否组织得当？</li>
<li>设计是否易用且一目了然？</li>
<li>标准是否一致？</li>
<li>是否减少用户点击次数？</li>
</ol>


<p>作者推荐使用<a href="https://www.omnigroup.com/omnigraffle">Omnigraffle</a>制作线框图，但可惜不是免费的。</p>

<h3>1.4 赢在测试</h3>

<p>如果你交付的软件无法工作，卖不出去是一方面，更糟糕的是你会因此蒙羞。遵循下面8个步骤可以对产品质量产生重大影响：</p>

<ol>
<li>坚持测试驱动开发（<strong>“调试过劳死，测试嗨翻天”</strong>）</li>
<li>围绕优秀的测试主管组建测试团队</li>
<li>亲自评审测试计划和测试用例</li>
<li>自动化测试</li>
<li>虔诚地推行内部试用（Dogfood，欲卖狗食，必先偿之。不要自己团队吃人食，让用户吃狗食）</li>
<li>开展找虫总动员</li>
<li>勤勉且有条理地处理Bug</li>
<li>任命可信测试者以构建最后一道防线。</li>
</ol>


<h3>1.5 赢在发布</h3>

<p>如何确保发布质量？</p>

<ol>
<li>对改动说不（发布手中有的，而非脑中想的）</li>
<li>开启作战室</li>
<li>营造紧迫的气氛</li>
<li>核查发布清单</li>
<li>撰写博文</li>
<li>发布软件</li>
<li>亲自验证软件</li>
<li>应对发布带来的各种影响</li>
</ol>


<p>关于应对发布带来的各种影响，书中提到需要做的5件事情：</p>

<ol>
<li>应对回滚（只要成功回滚，发布就还没有失败。最好的防守是制定周详的撤退计划。Google和Amazon也经常回滚，甚至回滚5次。）</li>
<li>处理产品危机（做事之前，先做准备）</li>
<li>演示产品</li>
<li>应对媒体和客户</li>
<li>庆祝发布</li>
</ol>


<h2>2. 掌握卓越技能</h2>

<p>产品经理在交付软件的过程中，应该努力学习多种技能，包括：团队、技术、沟通、决策和从容，然后在周期轮回中不断升华。</p>

<h3>2.1 胜在团队</h3>

<p>软件业中团队角色：</p>

<h4>项目集成经理</h4>

<p>项目集成经理的职责重点在于整合不同团队和不同工作职能，专注于“黏合与润滑”。通常他们比产品经理更少关注业务，比项目经理更少关注技术。</p>

<h4>产品经理</h4>

<p>通常产品经理的职责更偏重业务方面。如专注于品牌、定价、市场进入策略等。在谷歌，产品经理需要做除了写代码之外的任何事，甚至有些连代码也写过。</p>

<h4>项目经理</h4>

<p>项目经理主要职责在于排定项目计划和协调团队工作，通常称为技术项目经理。</p>

<h4>工程经理</h4>

<p>工程经理通常由老牌程序员担任。最佳的工程经理是那些由于热爱团队、善解人意、精通交付并乐于构建卓越产品而晋升到该职位的人。产品经理、项目集成经理或者项目经理，甚至技术项目经理都可以是工程经理的属下，但也可以是合作伙伴。每个工程团队都需要工程经理，但不一定需要产品经理、项目集成经理或项目经理。</p>

<h4>如何雇佣产品经理、项目集成经理或者工程经理</h4>

<p>有5条原则：</p>

<ol>
<li>雇佣比你聪明的人</li>
<li>雇佣懂得自己不是来当老板的人</li>
<li>雇佣表达清晰、言之有物的人</li>
<li>雇佣用数据说话的人</li>
<li>雇佣充满活力的人</li>
</ol>


<h3>2.2 其它</h3>

<p>关于如何做好演示，作者提出的建议是：</p>

<ol>
<li>将演示时间控制在15分钟内</li>
<li>永远传达且只传达一个信息</li>
<li>讲故事</li>
<li>制作“综述单页”</li>
<li>重点演示用户体验</li>
<li>极度专注倾听</li>
</ol>


<p>在演示时，如果你连关键信息是什么都不知道，还是取消演示吧。最好只传递一个信息，去掉与这个信息无关的数据或议题。</p>

<h2>3. 书中的有趣点</h2>

<p>书中提到了很多有趣的点，翻译也很赞！摘录如下：</p>

<p>强调测试驱动开发的重要性：</p>

<blockquote><p>调试过劳死，测试嗨翻天！</p></blockquote>

<p>关于沟通的技巧：</p>

<blockquote><p>狗屎三明治（The Shit Sandwich）是一种有效的反馈技巧。它是说当你给员工反馈时，你可以一开始先表扬他们（第一块面包），然后再给他们一些难以完成的挑战（狗屎夹心），最后提醒他们你有多么看好他们的能力（第二块面包）。</p></blockquote>

<p>关于如何咽下狗屎三明治并生存下去：</p>

<blockquote><p>在某些恶劣的环境中，你可能发现你无时无刻不在吃这些三明治，这不是一个好信号&hellip;在断定自己精神抑郁或缺乏自信之前，先确定你实际上没有被一群白痴包围&hellip;有时候你被要求咽下的三明治的数量和质量都是直接来自和你一起工作的白痴们。当碰到这种情况时，你该换个地方，换个产品去交付了。</p></blockquote>

<p>关于Scrum站会</p>

<blockquote><p>我在Google和Amazon的团队喜欢在11:30或12:00的时候开站会，时间不超过15分钟。因为大家都要吃午饭。
我不赞成Scrum中区分猪和鸡的做法，它只让猪（即开发者）说话&hellip;我的工程团队喜欢听关于业务拓展近况的30秒简述&hellip;我还喜欢让开发主管就项目状态做30秒简报。</p></blockquote>

<p>关于决策</p>

<blockquote><p>几乎所有特性或用户体验的争论最后就会变成像绑匪谈判。你控制了人家的孩子，或者人家控制了你的孩子，除非某一方开出的条件被接受，否则孩子就会被撕票。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[采用界面原型和系统用例描述需求]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/30/xu-qiu-yu-yong-li/"/>
    <updated>2014-06-30T20:26:24+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/30/xu-qiu-yu-yong-li</id>
    <content type="html"><![CDATA[<p>需求、文档是软件开发过程中两个最头疼的问题。什么是需求？软件没开发出来时，看不见摸不着。文档化是一种办法，但各种各样的文档、标准和格式。还没开始写就已经让人望而却步了。文档并不是越少越好，也不是越多越好，应该根据项目的的特点决定采用何种方式去描述需求。</p>

<!--more-->


<p>对于非关键性应用，我认为采用界面原型＋系统用例是一种很好的描述需求的方法。界面原型描述了系统的界面元素，用例描述了用户与这些界面元素的交互过程。这种方式既能够避免文档过重，又可以为开发和测试人员提供完整而明确的指引，迅速推动项目进程。</p>

<h2>1.一个例子</h2>

<p>在产品经理的眼中，一图胜千言，有了界面原型，或者有了高保真图，开发人员就明白需求是什么，就可以开发产品了。真的是这样吗？</p>

<p>我们来看一个最简单的例子：系统登录。产品经理提供的需求包括一个Excel表格和一些原型图。Excel中列出了所有的功能需求，其中有一行记录，标题是“系统登录”，内容是“使用手机号和密码登录”。产品经理心里想，这么简单的东西还要写文档吗？给，这还有一张高保真图，需求够明确了吧！</p>

<p><img src="/myresource/images/img_blog_20140629.jpg" alt="image" /></p>

<p>开发人员拿到需求后，有几种可能：</p>

<ol>
<li>新手甲：这个太简单了，马上就开始干。结果很可能不是你想像。</li>
<li>老手乙：这个简单，原来做过类似的功能，按既定方针办！但每个系统都有其特点，并不能完全抄袭。</li>
<li>老手丙：好像比较简单，但是又感觉不好下手，貌似还有些问题不确定：</li>
</ol>


<blockquote><ul>
<li>如果输入的手机号长度不够怎么办？登录按钮可用吗？</li>
<li>密码最少要几位数？要限制吗？如果长度不够，登录按钮可用吗？</li>
<li>如果手机号或者密码不正确怎么办？弹出对话框进行提示？这种体验好像不太好，把错误信息显示在某个地方？错误信息写成啥呢？“手机号码或密码不正确！” or “请输入正确的手机号码和密码！” or &hellip;</li>
<li>这是个企业应用，手机号应该是服务端已经存在的。如果用户输入的手机号在服务端不存在，应该怎么提示？</li>
<li>这个记住密码是什么意思？下次打开应用不需要再输入密码？下次打开应用直接跳过这个登录窗口？</li>
<li>记住密码是默认打勾？</li>
<li>手机号码要记住吗？</li>
</ul>
</blockquote>

<p>看来不确定的问题太多，看看腾讯的微信是怎么做的。啥？它没有“记住密码”的功能？</p>

<p>你看，一个最简单的需求就可能让开发人员产生这么多的疑问。你能理解丙内心的纠结吗？</p>

<p>我们永远无法用文档去描述所有的需求，但我们应该尽可能地把需求准确、完整地描述出来。否则开发出来的产品一定不是你要的结果。尽管我们可以通过沟通来解决一些问题，可是别忘了：越早解决问题，成本越低。</p>

<p>而用例分析可以帮助产品经理从系统的角度去分析需求，产出明确、完整的需求文档。</p>

<h2>2.用例是什么？</h2>

<p>用例是各干系人就系统行为所达成的契约。用例描述了在不同条件下，系统对Actor的请求进行响应时发生的行为。用例是需求，它可以准确地描述系统行为。但用例不代表所有的需求，它只是一部分非常重要的需求，可能占1/3，还有很多其它的需求，例如外部接口、数据格式、业务规则和公式等等。</p>

<p>用例的另一个主要作用体现在对异常情况的描述上。产品讨论时，很容易集中在成功场景。如果那些离散的用例步骤和失败情况没有集中讨论，那么许多错误和异常情况就不能在程序员编码前发现，然后就会因为各种原因（沟通不畅、上线期限、重新组织讨论的难度等等）导致这些异常情况得不到很好的确认和处理，程序员就只能想当然地按自己的想法开发。这最终将会影响代码和产品的质量。</p>

<h2>3.用例示例</h2>

<p>我们以系统登录为例，尝试编写一个用例：</p>

<p>```
用例编号：UC1-001
用例名称：系统登录
用例描述：</p>

<pre><code>    系统登录。
</code></pre>

<p>参与者：</p>

<pre><code>所有用户。 
</code></pre>

<p>前置条件：</p>

<pre><code>无
</code></pre>

<p>后置条件：</p>

<pre><code>Actor成功登录。    
</code></pre>

<p>基本路径</p>

<pre><code>1. 系统显示登录窗口，“记住密码”默认选中，登录按钮不可用。
2. Actor输入11位手机号码和至少6位密码。
3. 系统将“登录”按钮变为可用。
4. Actor点击“登录”按钮。
5. 系统验证成功后完成登录，打开首页。
</code></pre>

<p>扩展点：</p>

<pre><code>1a. 上次登录成功且勾选了“记住密码”：系统直接完成登录，并打开首页。    
    1a1. 系统直接登录失败，打开登录窗口，显示之前的手机号和密码，
系统提示：“请输入正确的手机号和密码。”。“登录”按钮可用。

1b. 上次登录成功，但未勾选“记住密码”：则系统显示登录窗口，
“手机号”为上次的手机号，“记住密码”不勾选，“密码”为空。

5a. 手机号或密码不正确：系统提示“请输入正确的手机号和密码。”

5b. 手机号不存在：系统提示“该号码不存在，请与管理员联系。”
</code></pre>

<p>业务规则：</p>

<pre><code>手机号必须输入、且只能输入11位。
密码至少6位。
</code></pre>

<p>非功能性需求：</p>

<p>设计约束：</p>

<p>补充说明：
  所有系统提示都以文本方式显示在上面。详见效果图。
  登录时的loading和mask按系统约定。</p>

<p>```</p>

<p>上面的用例中：</p>

<ul>
<li>基本路径表示一切顺利时的过程。</li>
<li>扩展点表示备选流，相当于分支。例如1a就是一个分支，表示基本路径中第1步的第一个分支，1b表示第1步的第二个分支。1a1表示分支的第1步（注意缩进）。以此类推。</li>
</ul>


<p>通过用例，我们用10几行文字就把系统登录的整个需求描述清楚了。这样的文档花不了多少时间。</p>

<h2>4.如何写用例</h2>

<p>基本路径是系统完成目标的一条主线。扩展点是因为特别条件而出现的分支。如果不区分基本路径和扩展点，文档中就会包括很多的“如果&hellip;否则&hellip;”，最终导致文档很难阅读。</p>

<p>在讨论需求时，要集中讨论所有可能的失败和可选择的过程。扩展条件通常可以加上冒号（：），使读者不会误认为它是一个执行步骤，例如：</p>

<p><code>
无效PIN：
网络中断：
</code></p>

<p>用例可以包含子用例，也可以链接到另一个用例。</p>

<p>编写用例有一些准则：</p>

<ul>
<li>准则1：使用简单的语法。
主语&hellip;谓语动词&hellip;直接宾语&hellip;前置短语。一定要有主语（Actor，系统）。</li>
<li>准则2：描述执行者的意图，而不是动作。不要在界面细节描述过多，否则文档变长，质量变差。</li>
<li>准则3：“确认”而不是“检查是否”。</li>
</ul>


<p>```
修改前：
2. 系统检查密码是否正确。
3. 如果密码正确，系统向用户提供有效的操作。</p>

<p>修改后：
2. 系统验证密码正确。
3. 系统向用户提供有效的操作。
```</p>

<p>用例的格式有多种，包括单列表格式、双列表格式、RUP格式等等。建议采用上述示例中的格式。简单、条理清晰，易执行。</p>

<p>用例只是行为需求，不包括系统性能需求、业务规则等，但这些需求也可以附在用例上，在业务规则、非功能性需求、设计约束和补充说明中进行描述。</p>

<h2>6.总结</h2>

<p>本文以一个非常简单的例子来说明用例的编写方法。用例的编写工作本身非常简单，所花的时间也很少，但这决不表示它很容易。因为编写用例的过程是你思考的过程，只有你思考清楚了，才可能写出清晰完整的用例。这句话反过来说也成立：如果不能把用例描述清楚，说明思路还没有理顺。</p>

<p>采用界面原型＋系统用例来描述需求，能够以最少的文档描述明确的需求，帮助产品经理描述清晰、完整的需求；帮助开发人员理解业务需求，快速投入设计和开发工作；为测试人员提供测试用例设计和执行的依据。</p>

<p>关于需求和文档，从来没有标准答案。只有不断实践才能找到最适合的方法！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[某移动客户端项目开发]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/26/mou-xiang-mu-kai-fa-guo-cheng-zong-jie/"/>
    <updated>2014-06-26T15:20:21+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/26/mou-xiang-mu-kai-fa-guo-cheng-zong-jie</id>
    <content type="html"><![CDATA[<p>新到一家公司，抽调去支援移动客户端团队，经历了一个移动客户端项目的开发过程。按以往的经验看，项目规模不大、业务也比较简单，3、5个人，2－3个月就应该能搞定。但整个项目却历时半年，最多时项目组有10几个人。简单记录一下吧。</p>

<!--more-->


<h3>问题总结</h3>

<ul>
<li>采用不熟悉的技术，但又没有形成好的学习氛围和积极的心态；</li>
<li>跨地域团队管理难，跨地域开发团队管理更难；</li>
<li>落后的硬件配置，搞跨平台移动开发居然没有Mac本！</li>
<li>你觉得可能出问题的地方，将来一定会出问题！所以一定要将问题提前解决，越往后成本越高。</li>
<li>如果由测试和研发人员主导产品开发，只能解决产品的有无问题，无法产出卓越的产品。产品经理不是画个草图、写几句话就可以撒手不管的。</li>
</ul>


<h3>改进要求</h3>

<ul>
<li>专业的人做专业的事。产品经理要把产品设计好，你别让开发人员来思考怎么做好产品。设计人员把设计工作做好，你别让水平低的开发人员去考虑如何设计。</li>
<li>产品经理至少要提供低保真图和用例规约，别让设计和开发人员去考虑产品交互细节。如果你说写文档太麻烦，只能说明你自己其实没想清楚。</li>
<li>要有Code review，要有基本的设计。而不是任务一分就不管了。</li>
</ul>

]]></content>
  </entry>
  
</feed>
