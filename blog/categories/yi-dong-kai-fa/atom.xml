<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 移动开发 | 码出人生]]></title>
  <link href="http://blog.ubone.com/blog/categories/yi-dong-kai-fa/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2014-08-10T23:57:24+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Titanium vs Worklight]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/27/titanium-vs-worklight/"/>
    <updated>2014-07-27T13:52:25+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/27/titanium-vs-worklight</id>
    <content type="html"><![CDATA[<p>因工作需要，对两个跨平台移动开发工具（Titanium，Worklight）进行比较的。本文主要从跨平台特性、性能、社区等进行比较。实际上，本文同样适用于Titanium VS Phonegap。</p>

<!--more-->


<h2>Workligt简介</h2>

<p>Worklight是IBM公司的产品，支持HTML5，Hybrid、Native开发方式，涵盖完整的移动应用生命周期，包括开发、运行、安全和管理。</p>

<p>Worklight以Cordova为核心。因此它与Phonegap是非常类似的产品，基于HTML5、CSS3和JavaScript，通过Adapter集成后台REST、SOA等服务。在其PPT中说提供了以下移动开发模式：</p>

<p><img src="/myresource/images/image_blog_2014-07-27_15.16.22.png" alt="image" /></p>

<p><strong>但找遍其资料也未找到Worklight如何使用第4种开发模式。</strong></p>

<p>几乎支持所有移动设备：iOS, Android, BlackBerry, Windows Phone。基于Dojo的可视化UI构造。充分利用现有Javascript框架，如jQuery, dojo, Sencha等。</p>

<p>通过Worklight Server提供对企业数据和系统的安全访问：
<img src="/myresource/images/image_blog_2014-07-27_15.10.37.png" alt="image" /></p>

<h3>Worklight的工作方式</h3>

<p>开发人员采用HTML、CSS和JavaScript在本地开发，就像开发静态Web网站一样。每种移动应用平台都提供了一个嵌入式的Web浏览器，Worklight应用就运行在这样一个浏览器中，因此，Worklight实质上是拥有原生外壳的Html Web应用。</p>

<p>Worklight基于Cordova提供设备的接口，相当于在JavaScript与移动设备的传感器、摄像头间建立了一连接层，使得JavaScript可以访问这些原生接口。</p>

<h3>Worklight的优势</h3>

<p>由于其本质是Web应用，因此只要原生平台有Web view，就可以移植到该平台。因此Worklight几乎支持所有移动平台。</p>

<p>采用Html、CSS和JavaScript的技术门槛比较低，同时也有现成的框架可用，如jQuery, dojo, Sencha等。</p>

<h3>Worklight的劣势</h3>

<p>Worklight应用的UI性能取决于系统的浏览器性能。iOS平台的基于Webkit引擎的浏览器性能更好，而Android平台则有一些限制。对于其它平台，可能跟OS版本有关系。</p>

<p>同时，与Web开发相似，存在一些跨平台的问题要处理。即使是基于Webkit的环境，<a href="http://westcoastlogic.com/slides/debug-mobile/#/17">也存在一些明显的区别</a>。在IBM Worklight介绍的PPT中，一个应用示例在移植到Android时仍然使用了4周的时间，见下图：</p>

<p><img src="/myresource/images/image_blog_2014-07-27_18.46.36.png" alt="image" /></p>

<p>现代浏览器已经越来越强大，但即使如此，要在浏览器中达到原生的UI性能，几乎是不可能的。</p>

<p>Cordova提供的原生API非常有限，主要集中在摄像头、加速传感器、定位传感器等，因此平台集成是很有限的。当然有一些插件来填补这一空白，但是它们的质量和可维护性并不稳定。</p>

<p>移动端不支持Sqlite数据库，保存本地数据比较困难。</p>

<h2>Titanium简介</h2>

<p>Titanium是Appcelerator推出的跨平台移动应用开发工具，支持Android、Blackberry、iOS和Tizen。</p>

<p>Titanium同样采用JavaScript作为主要开发语言，支持Web应用、混合型应用和原生应用开发。</p>

<p>Titanium也同样提供了相应的云服务，包括推送、同步、企业安全认证和数据安全等。</p>

<p>当开发者开发Titanium应用时，可以用JavaScript编写原生应用，而不只是Web应用。但是，为了充分使用原生API的性能，Titanium并不是“一次编写、到处运行”的平台。Titanium可以让开发者充分利用那些平台特定的特性，它对移动开发的支持包括两部分：</p>

<ul>
<li>移动开发核心部分API，是支持跨平台的，因此这部分代码可以复用。</li>
<li>平台特定的API、UI和特性，存在于特定平台中。</li>
</ul>


<p>例如，你可以在Titanium的iOS应用中，使用某个iOS平台特有的组件，而在Android平台，采用其它方案。</p>

<h3>Titanium的工作方式</h3>

<p>Titanium开发的应用在运行时，包括三大组件：</p>

<ul>
<li>JavaScript代码</li>
<li>Titanium的系统原生API</li>
<li>JavaScript解析器（Android: V8或Rhino；iOS：JavaScriptCore）</li>
</ul>


<p>当我们用JavaScript创建一个窗口时，会发生什么呢，见下图：</p>

<p><img src="/myresource/images/images_download_attachments_35621751_create_proxy.png" alt="image" /></p>

<p>可以看到，JavaScript代码会调用原生API，创建的是原生的Window，而不是浏览器中的Web对象！因此所有UI与Java或Objective-c开发的原生应用没有区别，它们就是Native UI。</p>

<p>这就是为什么说Titanium是用JavaScript开发原生应用。它不需要浏览器来执行JavaScript代码，JavaScript代码也不会被编译成Java或者Objective-C。JavaScript是在运行时执行，并且在需要时调用原生的UI组件和方法。</p>

<p>开发者可以以原生的方式，自由地扩展Titanium，包括UI和其它不可见的特性。</p>

<h3>Titanium的优势</h3>

<p>Titanium提供了广泛的原生特性和功能，包括原生UI组件、网络接口、数据库和系统通知等等。因此Titnaium应用的UI是真正的原生组件，具有与原生应用相同的性能。</p>

<p>Titanium具有广泛的原生应用API。提供了90%以上常用的原生平台API，而剩余不常用的10%可以由用户自己实现。</p>

<p>Titanium应用具有更好的外观，它不需要CSS等来模拟原生界面，因为它自己就是原生界面。例如当你创建了NavigationGroup，在iOS上会创建UINavigationController，它的行为和动画效果都是原生的，更符合用户的预期。</p>

<p>具有非常好的扩展性。开发者能够针对指定平台，实现任何原生的UI，并集成到Titanium应用中。例如，你可以实现一个TableView，滚动时以每秒60帧显示。也可以无缝集成一个OpenGL绘图的游戏，并在JavaScript中执行循环。你可以将这些扩展的UI直接集成到应用中。</p>

<p>原生支持Sqlite数据库。</p>

<p>Titanium基于Apache 2.0开源协议，具有广泛的社区支持。</p>

<h3>Titanium的劣势</h3>

<p>Titanium的API范围，使得它在增加一种新的原生平台时，比较困难。这也是为什么现在Titanium只支持iOS、Android、BlackBerry、Tizen和Web的原因。<a href="http://www.appcelerator.com/blog/2014/01/windows-8-support-whats-going-on/">Titanium对Windows Phone的支持预计在2014年第4季度实现。</a></p>

<h2>谁比谁更好？</h2>

<p>从1万米高空看，两者没有太大区别，它们都提供了跨平台的移动应用开发能力。而两者间其实不存在谁比谁更好的问题，只看谁比谁更合适！</p>

<p>对于企业移动应用来说，谁更合适？我们先看看企业移动应用有哪些特点：</p>

<ul>
<li>界面以稳健风格为主</li>
<li>应用稳定可靠</li>
<li>安全性要求高</li>
<li>数据量一般比较大</li>
<li>性能要求高</li>
</ul>


<p>对于前面三点，两者没有太多区别，而关于后面两点，Titanium的性能更占优势，而SQLite数据库的支持也有利于部分企业数据（如通讯录）的本地缓存，提升用户体验。下表总结了两者的一些对比：</p>

<p><img src="/myresource/images/image_blog_2014-07-27_18.41.36.png" alt="image" /></p>

<h3>参考：</h3>

<p><a href="http://www.appcelerator.com/blog/2012/05/comparing-titanium-and-phonegap/">Comparing titanium and phonegap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium移动开发之每日自动构建]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/25/titaniumzi-dong-gou-jian/"/>
    <updated>2014-06-25T11:19:18+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/25/titaniumzi-dong-gou-jian</id>
    <content type="html"><![CDATA[<p>以下脚本用于构建Android 和 iOS版本的Titanium应用。可以将脚本加入cron中，每日定时构建。脚本还实现了自动获取svn日志，生成一个发布网页，直接上传到ftp的功能。</p>

<!--more-->


<p>```</p>

<h1>转到项目文件夹，更新脚本并执行Clean</h1>

<p>cd /Users/mxs/Develop/CI/myProject
svn update
titanium clean</p>

<h1>Android打包</h1>

<p>echo build Android version
titanium build &mdash;log-level warn &mdash;platform android &mdash;build-only &mdash;force -K /Users/mxs/keystore -P company -L oasuit -O /Users/mxs/Develop/CI/build -T dist-playstore > ../android.build.log</p>

<h1>文件名加上时间</h1>

<p>fileTime=&ldquo;OA-<code>date +'%Y-%m-%d_%H%M'</code>&rdquo;
localApkName=&ldquo;/Users/mxs/Develop/CI/build/&rdquo;$fileTime".apk"
localApkZip=$fileTime".apk.zip"
localApkZipSource=$fileTime".apk"
remoteApkName=&ldquo;/moa/test/&rdquo;$fileTime".apk.zip"
oaapk=/Users/mxs/Develop/CI/build/OA.apk
oaapkinfo=&ldquo;&rdquo;
if [ ! -f $oaapk ]
then
  oaapkinfo=&lsquo;<br/><strong><span style="color:red">OA.apk不存在，tiapp.xml配置不正确或者构建失败。</span></strong>&rsquo;
fi
mv $oaapk $localApkName</p>

<h1>iOS打包</h1>

<p>mv /Users/mxs/Develop/CI/i18n /Users/mxs/Develop/CI/myProject/i18n
titanium clean
echo build iOS version
titanium build &mdash;log-level warn &mdash;platform ios &mdash;build-only &mdash;force &mdash;device-family iphone -O /Users/mxs/Develop/CI/build -P XXXXXXX -T dist-adhoc &mdash;distribution-name &ldquo;Company Ltd./&rdquo; > ../ios.build.log
localIpaName=&ldquo;/Users/mxs/Develop/CI/build/&rdquo;$fileTime".ipa"
localIpaZip=$fileTime".ipa.zip"
localIpaZipSource=$fileTime".ipa"
remoteIpaName=&ldquo;/moa/test/&rdquo;$fileTime".ipa.zip"
oaipa=/Users/mxs/Develop/CI/build/OA.ipa
oaipainfo=&ldquo;&rdquo;
if [ ! -f $oaipa ]
then
  oaipainfo=&lsquo;<br/><strong><span style="color:red">OA.ipa不存在，tiapp.xml配置不正确或者构建失败。</span></string>&rsquo;
fi
mv $oaipa $localIpaName
mv /Users/mxs/Develop/CI/myProject/i18n /Users/mxs/Develop/CI/i18n</p>

<h1>获取昨天的日志，只要以#开始的注释</h1>

<p>yesterday=&ldquo;<code>date -v -1d +'%Y-%m-%d'</code>&rdquo;
today=&ldquo;<code>date +'%Y-%m-%d'</code>&rdquo;
svn log -r {$yesterday}:{$today} > ../log.tmp
grep &lsquo;^#&rsquo; ../log.tmp > ../change.log
rm ../log.tmp</p>

<h1>生成releasenote</h1>

<p>releaseFileName=&ldquo;../build/releasenote-<code>date +'%Y-%m-%d'</code>.txt&rdquo;
date &ldquo;+<h2>%Y-%m-%d</h2><hr/><p>构建时间：%Y-%m-%d %H:%M:%S</p>&rdquo; > $releaseFileName
echo &lsquo;<p>下载地址：<a href="'$remoteIpaName'" target="_blank">iOS</a> | <a href="'$remoteApkName'" target="_blank">Android</a></p>&rsquo; >> $releaseFileName
echo &lsquo;&rsquo; >> $releaseFileName
echo &lsquo;<h3>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;变更日志&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h3>&rsquo; >> $releaseFileName
echo &lsquo;<pre>&rsquo; >> $releaseFileName
cat ../change.log >> $releaseFileName
echo &lsquo;</pre>&rsquo; >> $releaseFileName
echo &lsquo;<h3>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;构建日志&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h3>&rsquo; >> $releaseFileName
echo &lsquo;注：只显示警告和错误信息。&rsquo; >> $releaseFileName
echo $oaapkinfo >> $releaseFileName
echo $oaipainfo >> $releaseFileName
echo &lsquo;<h4>Android</h4>&rsquo; >> $releaseFileName
echo &lsquo;<pre>&rsquo; >> $releaseFileName</p>

<h1>删除Titanium构建日志的前4行</h1>

<p>cat ../android.build.log  | sed 1d | sed 1d | sed 1d | sed 1d >> $releaseFileName
echo &lsquo;</pre>&rsquo; >> $releaseFileName
echo &lsquo;<h4>iOS</h4>&rsquo; >> $releaseFileName
echo &lsquo;<pre>&rsquo; >> $releaseFileName
cat ../ios.build.log  | sed 1d | sed 1d | sed 1d | sed 1d >> $releaseFileName
echo &lsquo;</pre>&rsquo; >> $releaseFileName
indexFileName=&ldquo;../build/index.html&rdquo;
historyFileName=&ldquo;../index_history.html&rdquo;
indexTopFileName=&ldquo;../index_top.html&rdquo;
cat $historyFileName >> $releaseFileName
rm $historyFileName
mv $releaseFileName $historyFileName
echo &lsquo;&rsquo; > $indexFileName
cat $indexTopFileName >> $indexFileName
cat $historyFileName >> $indexFileName
rm ../change.log
rm ../android.build.log
rm ../ios.build.log
echo zip</p>

<h1>压缩成zip,必须切换到当前文件夹进行压缩操作，否则zip内容包括路径</h1>

<p>cd ../build
zip $localApkZip $localApkZipSource
zip $localIpaZip $localIpaZipSource</p>

<h1>上传到FTP服务器</h1>

<p>echo &lsquo;ftp action&rsquo;
HOST=&lsquo;192.168&hellip;.&rsquo;
USER=&lsquo;xxx&rsquo;
PASSWD=&lsquo;xxx&rsquo;
remoteIndex=&ldquo;/xxx/index.html&rdquo;
ftp -n $HOST &lt;&lt;END_SCRIPT
quote USER $USER
quote PASS $PASSWD
binary
put $localIpaZip $remoteIpaName
put $localApkZip $remoteApkName
put $indexFileName $remoteIndex
quit
END_SCRIPT
exit 0</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
