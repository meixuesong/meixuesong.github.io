<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[码出人生]]></title>
  <link href="http://blog.ubone.com/atom.xml" rel="self"/>
  <link href="http://blog.ubone.com/"/>
  <updated>2014-07-29T21:41:54+08:00</updated>
  <id>http://blog.ubone.com/</id>
  <author>
    <name><![CDATA[梅雪松]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式在序列生成器的应用]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/28/she-ji-mo-shi-zai-xu-lie-sheng-cheng-qi-de-ying-yong/"/>
    <updated>2014-07-28T22:21:23+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/28/she-ji-mo-shi-zai-xu-lie-sheng-cheng-qi-de-ying-yong</id>
    <content type="html"><![CDATA[<p>序列生成器是常见的一个应用组件。Oracle数据库有Sequence，但不是所有数据库都有序列。本文尝试将单例模式、多例模式应用于序列生成器。采用了以下方式实现：</p>

<ol>
<li>没有数据库的单例实现</li>
<li>有数据库的单例实现</li>
<li>有缓存的单例实现</li>
<li>有缓存的多序列实现</li>
<li>多序列的多例实现。</li>
</ol>


<!--more-->


<h2>1. 没有数据库的单例实现</h2>

<p>当没有数据库时，使用单例实现序列生成器非常简单，示例代码如下，注意<code>synchronized</code>关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 没有数据库的序列键生成器</span>
</span><span class='line'><span class="cm"> * @author mxs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGenerator</span> <span class="o">{</span>    
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">key</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyGenerator</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">KeyGenerator</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">long</span> <span class="nf">getNextKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">key</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>单元测试代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGeneratorTest</span> <span class="kd">extends</span> <span class="n">TestCase</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">KeyGenerator</span> <span class="n">keyGenerator</span> <span class="o">=</span> <span class="n">KeyGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">keyGenerator</span><span class="o">.</span><span class="na">getNextKey</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种实现没有持久化，一旦重启，序列又从0开始。因此我们需要一个有数据库持久化的方案。</p>

<h2>2. 有数据库的单例实现</h2>

<p>当有数据库时，每次获取序列都从数据库读取。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 有数据库的序列键生成器</span>
</span><span class='line'><span class="cm"> * @author mxs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGenerator</span> <span class="o">{</span>    
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyGenerator</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">KeyGenerator</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">long</span> <span class="nf">getNextKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getNextKeyFromDB</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="nf">getNextKeyFromDB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//update t_sequence set seq_value = seq_value + 1</span>
</span><span class='line'>      <span class="c1">//select seq_value from t_sequence</span>
</span><span class='line'>      <span class="c1">//返回结果</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. 有缓存的单例实现</h2>

<p>第2种方法每次都要访问数据库，影响了性能，可以一次多取一些序列放到缓存中，只有缓存都取完时，才访问数据库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 有数据库、带缓存的序列键生成器</span>
</span><span class='line'><span class="cm"> * @author mxs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGenerator</span> <span class="o">{</span>    
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyGenerator</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">cacheSize</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">KeyInfo</span> <span class="n">keyInfo</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">KeyGenerator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">keyInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyInfo</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">long</span> <span class="nf">getNextKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">keyInfo</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyInfo</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">max</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">min</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">nextKey</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">poolSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">KeyInfo</span><span class="o">(</span><span class="kt">int</span> <span class="n">poolSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">poolSize</span> <span class="o">=</span> <span class="n">poolSize</span><span class="o">;</span>
</span><span class='line'>      <span class="n">retrieveFromDB</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">nextKey</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">retrieveFromDB</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">nextKey</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">retrieveFromDB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// update t_sequence set seq_value = seq_value + poolSize</span>
</span><span class='line'>      <span class="c1">// select seq_value from t_sequence</span>
</span><span class='line'>      <span class="c1">//以下为模拟数据库操作</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">value</span> <span class="o">=</span> <span class="n">dbvalue</span><span class="o">[</span><span class="n">dbIndex</span> <span class="o">++];</span>
</span><span class='line'>      <span class="n">min</span> <span class="o">=</span> <span class="n">value</span> <span class="o">-</span> <span class="n">poolSize</span><span class="o">;</span>
</span><span class='line'>      <span class="n">max</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      <span class="n">nextKey</span> <span class="o">=</span> <span class="n">min</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dbvalue</span> <span class="o">=</span> <span class="o">{</span><span class="mi">20</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="mi">80</span><span class="o">,</span> <span class="mi">100</span><span class="o">};</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">dbIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. 有缓存的多序列实现</h2>

<p>要实现多序列，只需要用HashMap改造第3种方法，保持KeyInfo不变，KeyGenerator修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 有数据库、带缓存的多序列键生成器</span>
</span><span class='line'><span class="cm"> * @author mxs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGenerator</span> <span class="o">{</span>    
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyGenerator</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">cacheSize</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">KeyInfo</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">KeyGenerator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">KeyInfo</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">KeyGenerator</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">long</span> <span class="nf">getNextKey</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">KeyInfo</span> <span class="n">keyInfo</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">keyInfo</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">keyInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyInfo</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">);</span>
</span><span class='line'>          <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">keyInfo</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>      <span class="k">return</span> <span class="n">keyInfo</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. 多序列的多例实现</h2>

<p>前面所有实现方案都是基于单例模式，其实还可以使用多例模式。多例模式允许一个类有多个实例，这些实例有自己的状态。保持KeyInfo不变，KeyGenerator修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 有数据库、带缓存的多序列键生成器，采用多例模式</span>
</span><span class='line'><span class="cm"> * @author mxs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGenerator</span> <span class="o">{</span>    
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">cacheSize</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">KeyInfo</span> <span class="n">keyInfo</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">KeyGenerator</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">KeyGenerator</span><span class="o">&gt;(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">KeyGenerator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">keyInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyInfo</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">KeyGenerator</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span> <span class="n">instances</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">KeyGenerator</span> <span class="n">generator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyGenerator</span><span class="o">();</span>
</span><span class='line'>          <span class="n">instances</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">generator</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">long</span> <span class="nf">getNextKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">keyInfo</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//测试代码：</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyGeneratorTest</span> <span class="kd">extends</span> <span class="n">TestCase</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">j</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'>          <span class="n">KeyGenerator</span> <span class="n">keyGenerator</span> <span class="o">=</span> <span class="n">KeyGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">90</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">long</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">keyGenerator</span><span class="o">.</span><span class="na">getNextKey</span><span class="o">();</span>
</span><span class='line'>              <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">ii</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>        
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：
Java与模式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:抽象工厂方法模式]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/28/she-ji-mo-shi-chou-xiang-gong-han-fang-fa-mo-shi/"/>
    <updated>2014-07-28T19:45:29+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/28/she-ji-mo-shi-chou-xiang-gong-han-fang-fa-mo-shi</id>
    <content type="html"><![CDATA[<p>简单工厂方法模式采用静态方法创建产品，工厂方式模式通过多层级的工厂方法创建一种产品等级结构。而抽象工厂方法模式则可以用于创建多个产品等级结构。因此，其类图示意如下：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-28_20.03.46.png" alt="image" /></p>

<!--more-->


<p>从上图可见，有两个产品等级：ProductA和ProductB。抽象工厂模式与工厂方法模式的最大区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则需要面对多个产品等级结构。那么对于多个等级结构的产品，为什么要采用抽象工厂模式呢？</p>

<p>如果采用工厂模式，就要N个独立的工厂等级结构来应对N个产品等级结构。由于这些产品等级结构的相似性，会导致N个平等的工厂等级结构。随着产品等级结构数目的增加，工厂方式模式所给出的工厂等级结构数目也会随之增加。</p>

<p>所以，抽象工厂方法模式的好处是，同一个工厂等级结构应对N个这些相似的产品等级结构。例如上图中的ConcreteCreator1负责创建ProductA1和ProductB1。显然，这种方式更有效率。</p>

<p>什么情况下应当使用抽象工厂模式？</p>

<ol>
<li>满足工厂模式的条件，即：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节时。</li>
<li>多于一个的产品族，而系统只消费其中某一族的产品。如上图中有2个族（1，2），同时只消费其中一个族。</li>
<li>同属于一个产品族的产品是一起使用的。</li>
<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于实现。</li>
</ol>


<p>举一个实际例子就很容易理解为什么需要，以及什么时候需要抽象工厂模式：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-28_21.41.37.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:工厂方法模式]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/27/she-ji-mo-shi-gong-han-fang-fa/"/>
    <updated>2014-07-27T22:11:04+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/27/she-ji-mo-shi-gong-han-fang-fa</id>
    <content type="html"><![CDATA[<p>前文说到简单工厂方法的工厂类，对“开－闭”原则支持不够，当有新产品时，需要修改工厂类。而工厂方法模式可以解决这个问题。工厂方法模式的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。其结构可表示为：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_22.10.30.png" alt="image" /></p>

<!--more-->


<p>上图中，Factory和SomeProduct可以是接口或者抽象类，工厂方法factory的返回类型必须是SomeProduct，这也是针对接口编程的一个体现。</p>

<p>在实际项目中，产品类可能有多个层级，对应工厂类也有多个层级。当使Factory为抽象类时，可以将公共代码尽量往上层抽象。</p>

<p>工厂方法返回的对象不一定是新建的，有可能是之前新建的对象，缓存在那里。但一定是自己创建的，不可以是别的对象传入的对象。</p>

<p>ConcreteFactory1示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteFactory1</span> <span class="kd">implements</span> <span class="n">Factory</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">SomeProduct</span> <span class="nf">factory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">SomeConcreteProduct1</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Client代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Factory</span> <span class="n">concreteFactory1</span><span class="o">,</span><span class="n">concreteFactory2</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">SomeProduct</span> <span class="n">concreteProduct1</span><span class="o">,</span> <span class="n">concreteProduct2</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">concreteFactory1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteFactory1</span><span class="o">();</span>
</span><span class='line'>      <span class="n">concreteProduct1</span> <span class="o">=</span> <span class="n">concreteFactory1</span><span class="o">.</span><span class="na">factory</span><span class="o">();</span>
</span><span class='line'>      <span class="n">concreteFactory2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteFactory2</span><span class="o">();</span>
</span><span class='line'>      <span class="n">concreteProduct2</span> <span class="o">=</span> <span class="n">concreteFactory2</span><span class="o">.</span><span class="na">factory</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium vs Worklight]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/27/titanium-vs-worklight/"/>
    <updated>2014-07-27T13:52:25+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/27/titanium-vs-worklight</id>
    <content type="html"><![CDATA[<p>因工作需要，对两个跨平台移动开发工具（Titanium，Worklight）进行比较的。本文主要从跨平台特性、性能、社区等进行比较。实际上，本文同样适用于Titanium VS Phonegap。</p>

<!--more-->


<h2>Workligt简介</h2>

<p>Worklight是IBM公司的产品，支持HTML5，Hybrid、Native开发方式，涵盖完整的移动应用生命周期，包括开发、运行、安全和管理。</p>

<p>Worklight以Cordova为核心。因此它与Phonegap是非常类似的产品，基于HTML5、CSS3和JavaScript，通过Adapter集成后台REST、SOA等服务。在其PPT中说提供了以下移动开发模式：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_15.16.22.png" alt="image" /></p>

<p><strong>但找遍其资料也未找到Worklight如何使用第4种开发模式。</strong></p>

<p>几乎支持所有移动设备：iOS, Android, BlackBerry, Windows Phone。基于Dojo的可视化UI构造。充分利用现有Javascript框架，如jQuery, dojo, Sencha等。</p>

<p>通过Worklight Server提供对企业数据和系统的安全访问：
<img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_15.10.37.png" alt="image" /></p>

<h3>Worklight的工作方式</h3>

<p>开发人员采用HTML、CSS和JavaScript在本地开发，就像开发静态Web网站一样。每种移动应用平台都提供了一个嵌入式的Web浏览器，Worklight应用就运行在这样一个浏览器中，因此，Worklight实质上是拥有原生外壳的Html Web应用。</p>

<p>Worklight基于Cordova提供设备的接口，相当于在JavaScript与移动设备的传感器、摄像头间建立了一连接层，使得JavaScript可以访问这些原生接口。</p>

<h3>Worklight的优势</h3>

<p>由于其本质是Web应用，因此只要原生平台有Web view，就可以移植到该平台。因此Worklight几乎支持所有移动平台。</p>

<p>采用Html、CSS和JavaScript的技术门槛比较低，同时也有现成的框架可用，如jQuery, dojo, Sencha等。</p>

<h3>Worklight的劣势</h3>

<p>Worklight应用的UI性能取决于系统的浏览器性能。iOS平台的基于Webkit引擎的浏览器性能更好，而Android平台则有一些限制。对于其它平台，可能跟OS版本有关系。</p>

<p>同时，与Web开发相似，存在一些跨平台的问题要处理。即使是基于Webkit的环境，<a href="http://westcoastlogic.com/slides/debug-mobile/#/17">也存在一些明显的区别</a>。在IBM Worklight介绍的PPT中，一个应用示例在移植到Android时仍然使用了4周的时间，见下图：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_18.46.36.png" alt="image" /></p>

<p>现代浏览器已经越来越强大，但即使如此，要在浏览器中达到原生的UI性能，几乎是不可能的。</p>

<p>Cordova提供的原生API非常有限，主要集中在摄像头、加速传感器、定位传感器等，因此平台集成是很有限的。当然有一些插件来填补这一空白，但是它们的质量和可维护性并不稳定。</p>

<p>移动端不支持Sqlite数据库，保存本地数据比较困难。</p>

<h2>Titanium简介</h2>

<p>Titanium是Appcelerator推出的跨平台移动应用开发工具，支持Android、Blackberry、iOS和Tizen。</p>

<p>Titanium同样采用JavaScript作为主要开发语言，支持Web应用、混合型应用和原生应用开发。</p>

<p>Titanium也同样提供了相应的云服务，包括推送、同步、企业安全认证和数据安全等。</p>

<p>当开发者开发Titanium应用时，可以用JavaScript编写原生应用，而不只是Web应用。但是，为了充分使用原生API的性能，Titanium并不是“一次编写、到处运行”的平台。Titanium可以让开发者充分利用那些平台特定的特性，它对移动开发的支持包括两部分：</p>

<ul>
<li>移动开发核心部分API，是支持跨平台的，因此这部分代码可以复用。</li>
<li>平台特定的API、UI和特性，存在于特定平台中。</li>
</ul>


<p>例如，你可以在Titanium的iOS应用中，使用某个iOS平台特有的组件，而在Android平台，采用其它方案。</p>

<h3>Titanium的工作方式</h3>

<p>Titanium开发的应用在运行时，包括三大组件：</p>

<ul>
<li>JavaScript代码</li>
<li>Titanium的系统原生API</li>
<li>JavaScript解析器（Android: V8或Rhino；iOS：JavaScriptCore）</li>
</ul>


<p>当我们用JavaScript创建一个窗口时，会发生什么呢，见下图：</p>

<p><img src="http://blog.ubone.com/myresource/images/images_download_attachments_35621751_create_proxy.png" alt="image" /></p>

<p>可以看到，JavaScript代码会调用原生API，创建的是原生的Window，而不是浏览器中的Web对象！因此所有UI与Java或Objective-c开发的原生应用没有区别，它们就是Native UI。</p>

<p>这就是为什么说Titanium是用JavaScript开发原生应用。它不需要浏览器来执行JavaScript代码，JavaScript代码也不会被编译成Java或者Objective-C。JavaScript是在运行时执行，并且在需要时调用原生的UI组件和方法。</p>

<p>开发者可以以原生的方式，自由地扩展Titanium，包括UI和其它不可见的特性。</p>

<h3>Titanium的优势</h3>

<p>Titanium提供了广泛的原生特性和功能，包括原生UI组件、网络接口、数据库和系统通知等等。因此Titnaium应用的UI是真正的原生组件，具有与原生应用相同的性能。</p>

<p>Titanium具有广泛的原生应用API。提供了90%以上常用的原生平台API，而剩余不常用的10%可以由用户自己实现。</p>

<p>Titanium应用具有更好的外观，它不需要CSS等来模拟原生界面，因为它自己就是原生界面。例如当你创建了NavigationGroup，在iOS上会创建UINavigationController，它的行为和动画效果都是原生的，更符合用户的预期。</p>

<p>具有非常好的扩展性。开发者能够针对指定平台，实现任何原生的UI，并集成到Titanium应用中。例如，你可以实现一个TableView，滚动时以每秒60帧显示。也可以无缝集成一个OpenGL绘图的游戏，并在JavaScript中执行循环。你可以将这些扩展的UI直接集成到应用中。</p>

<p>原生支持Sqlite数据库。</p>

<p>Titanium基于Apache 2.0开源协议，具有广泛的社区支持。</p>

<h3>Titanium的劣势</h3>

<p>Titanium的API范围，使得它在增加一种新的原生平台时，比较困难。这也是为什么现在Titanium只支持iOS、Android、BlackBerry、Tizen和Web的原因。<a href="http://www.appcelerator.com/blog/2014/01/windows-8-support-whats-going-on/">Titanium对Windows Phone的支持预计在2014年第4季度实现。</a></p>

<h2>谁比谁更好？</h2>

<p>从1万米高空看，两者没有太大区别，它们都提供了跨平台的移动应用开发能力。而两者间其实不存在谁比谁更好的问题，只看谁比谁更合适！</p>

<p>对于企业移动应用来说，谁更合适？我们先看看企业移动应用有哪些特点：</p>

<ul>
<li>界面以稳健风格为主</li>
<li>应用稳定可靠</li>
<li>安全性要求高</li>
<li>数据量一般比较大</li>
<li>性能要求高</li>
</ul>


<p>对于前面三点，两者没有太多区别，而关于后面两点，Titanium的性能更占优势，而SQLite数据库的支持也有利于部分企业数据（如通讯录）的本地缓存，提升用户体验。下表总结了两者的一些对比：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_18.41.36.png" alt="image" /></p>

<h3>参考：</h3>

<p><a href="http://www.appcelerator.com/blog/2012/05/comparing-titanium-and-phonegap/">Comparing titanium and phonegap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:简单工厂模式]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/27/she-ji-mo-shi-jian-dan-gong-han-mo-shi/"/>
    <updated>2014-07-27T09:44:35+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/27/she-ji-mo-shi-jian-dan-gong-han-mo-shi</id>
    <content type="html"><![CDATA[<p>简单工厂模式其实就是静态工厂方法模式，即通过静态工厂方法来创建对象。其结构可表示为：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_1.png" alt="image" /></p>

<!--more-->


<p>来看个实际的例子，下图中，有多种水果。客户端不关心具体的水果是如何创建的，只需要告诉工厂方法，需要哪种水果类型，工厂方法负责具体水果的创建工作。</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_2.png" alt="image" /></p>

<p>工厂方法返回的是水果接口。水果接口也可以换成抽象类。这是针对抽象编程的一种体现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FruitFactory</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Fruit</span> <span class="nf">getFruit</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;apple&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">Apple</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;orange&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">Orange</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">FruitFactoryException</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>省略抽象产品角色</h3>

<p>如果具体产品只有一个（即只有一种水果）时，可以省略掉抽象产品角色，变成：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_3.png" alt="image" /></p>

<h3>合并工厂角色与抽象产品角色</h3>

<p>有些情况下，工厂角色可以由抽象产品角色扮演，例如java.text.DateFormat类，如下图所示：</p>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_4.png" alt="image" /></p>

<h3>三个角色全部合并</h3>

<p><img src="http://blog.ubone.com/myresource/images/image_blog_2014-07-27_5.png" alt="image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteProduct</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ConcreteProduct</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">ConcreteProduct</span> <span class="nf">factory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ConcreteProduct</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>多个工厂方法</h3>

<p>工厂类可以有一个或多个工厂方法，分别负责创建不同的产品对象。例如java.text.DateFormat类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">DateFormat</span> <span class="nf">getDateInstance</span><span class="o">();</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">DateFormat</span> <span class="nf">getDateInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">style</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">DateFormat</span> <span class="nf">getDateInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">style</span><span class="o">,</span> <span class="n">Local</span> <span class="n">locale</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>简单工厂模式是非常基本的设计模式，会在较为复杂的设计模式中出现。它的核心是工厂类，客户端完全不关心构建的细节，只需消费产品。因此，简单工厂模式实现了对责任的分割。</p>

<p>但其缺点是当产品结构变得复杂时，工厂类将变得非常复杂。由于静态方法无法继承，因此工厂角色无法形成基于继承的等级结构。</p>

<p>在这种模式中，消费者(Client)和产品（Product）都满足“开－闭原则”，都能在引进新产品时，无需对现有代码进行修改。而工厂（Factory）则必须知道每一种产品以及如何创建它们，因此必须修改这个工厂的代码，不满足“开－闭”原则。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些设计原则]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/25/yi-xie-she-ji-yuan-ze/"/>
    <updated>2014-07-25T21:01:51+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/25/yi-xie-she-ji-yuan-ze</id>
    <content type="html"><![CDATA[<p>关于设计，有一些原则。本文总结一些常见的原则。包括：</p>

<ul>
<li>(S)单一职责原则</li>
<li>(O)开闭原则</li>
<li>(L)里氏替换原则</li>
<li>(I)接口隔离原则</li>
<li>(D)依赖反转原则</li>
<li>迪米特法则</li>
<li>组合/聚合复用原则</li>
</ul>


<!--more-->


<h2>S.单一职责原则</h2>

<p>单一职责原则（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。</p>

<h2>O.开闭原则</h2>

<p>简单地说，就是软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的。这一原则由Bertrand Meyer提出：</p>

<blockquote><p>Software entities should be open for extension, but closed for modification.</p></blockquote>

<p>实现开闭原则的关键是抽象。找到一个系统的可变因素，将它封闭起来，这就是“对可变性的封闭原则”。</p>

<h2>L.里氏替换原则</h2>

<p>派生类（子类）对象能够替换其基类（父类）对象被使用。</p>

<h2>I.接口隔离原则</h2>

<p>接口隔离原则（Interface-segregation principles，ISP）简单地说，就是：使用多个专门的接口比使用单一的总接口要好。</p>

<p>没有客户(client)应该被迫依赖于它不使用方法。接口隔离原则(ISP)拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为角色接口（role interfaces）。接口隔离原则(ISP)的目的是系统解开耦合，从而容易重构，更改和重新部署。</p>

<p>准确而恰当地划分角色以及角色所对应的接口，是面向对象的设计的一个重要的组成部分。</p>

<h2>D.依赖反转原则</h2>

<p>简单地说，就是依赖于抽象，不要依赖于具体。</p>

<p>为什么叫“反转”呢？？看看下面是怎么反转的：</p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140725_1.png" alt="image" /></p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140725_2.png" alt="image" /></p>

<p>两种表述:</p>

<ol>
<li>抽象不应当依赖于细节；细节应该依赖于抽象。</li>
<li>要针对接口编程，不要针对实现编程。</li>
</ol>


<p>针对接口编程是指，应该使用接口和抽象类进行变量的类型声明、参数和方法返回类型的声明，以及数据类型的转换等。</p>

<p>不要针对实现编程是指，不应当使用具体Java类进行变量的类型声明、参数和方法返回类型的声明，以及数据类型的转换等。</p>

<p>如果希望遵循“开－闭原则”，那么依赖反转原则便是达到目标的途径。</p>

<h2>迪米特法则</h2>

<p>迪米特法则又叫做最少知识原则，就是说，一个对象应当对其他对象尽可能少的了解。</p>

<h3>狭义的迪米特法则</h3>

<p>如果两个类不必彼此直接通信，那么这两个类就不应该发生直接的相互作用。就是说如果某人可以通过朋友去调用陌生人的方法，那么就不用直接调用陌生人的方法，而是通过朋友去调用转发。</p>

<p>什么是朋友呢？满足任一条件都是朋友：</p>

<ul>
<li>当前对象本身</li>
<li>以参量形式传入到当前对象方法的对象</li>
<li>当前对象的实例变量直接引用的对象</li>
<li>当前对象的实例变量如果是聚集，那么其中的元素都是朋友</li>
<li>当前对象所创建的对象。</li>
</ul>


<p>狭义的迪米特法则的缺点是：产生大量小方法，与商务逻辑无关；不同模块之间的通信效率降低。</p>

<h3>广义迪米特法则在类的设计上的体现</h3>

<ul>
<li>优先考虑将一个类设置成不变类</li>
<li>尽量降低一个类的访问权限</li>
<li>尽量降低成员的访问权限</li>
</ul>


<h2>组合/聚合复用原则</h2>

<p>实际上说的就是尽量使用聚合/组合，尽量不要使用继承。这在Effective-Java中也有描述。<a href="http://blog.ubone.com/blog/2014/07/08/effective-java-lei-he-jie-kou/">Java类与接口</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一张图看懂UML类图的关系]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/23/yi-zhang-tu-kan-dong/"/>
    <updated>2014-07-23T23:37:18+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/23/yi-zhang-tu-kan-dong</id>
    <content type="html"><![CDATA[<p>在UML类图中，类之间的关系包括：继承、关联、聚合、组合和依赖关系。如何分辨这些关系呢？每种关系使用什么样的连线呢？</p>

<!--more-->


<p><strong>继承关系</strong>，这个太简单，不说了。</p>

<p><strong>关联关系</strong>，在Java中，使用实例变量来实现关系关系。如图中的Driver类有car变量。</p>

<p><strong>聚合关系</strong>，是更强的关联关系。聚合是整体与个体的关系。也需要通过实例变量实现。如果不是很确定是否聚合关系，可以使用关联关系。从Java语法是无法分辨出关联或聚合关系的区别的。</p>

<p><strong>组合关系</strong>，是比聚合关系更强的关系关系。当聚合关系中的整体需要负责个体的生命周期时，就变成了组合关系。例如公司与部门的关系，当公司不存在时，部门也不存在了。</p>

<p><strong>依赖关系</strong>，当A中有个局域变量、方法的参数是B，或者调用了B的静态方法，就是A依赖于B。</p>

<p>下面这张图演示了各种关系：</p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140723.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式系统的基础知识]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/22/fen-bu-shi-xi-tong-de-ji-chu-zhi-shi/"/>
    <updated>2014-07-22T20:04:40+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/22/fen-bu-shi-xi-tong-de-ji-chu-zhi-shi</id>
    <content type="html"><![CDATA[<p>这是一篇学习笔记，内容为《大型网站系统与Java中间件实践》的第一章。</p>

<p>组成计算机的5要素为：输入、输出、运算器、控制器、存储器（内存、外存）。分布式系统也一样，可以分为这5个要素。因此这本书会对分布式系统中，这5个要素的变化进行说明。</p>

<!--more-->


<p>阿姆达尔定律（Amdahl&rsquo;s law）说明程序中可以并行的代码的比例，决定了你增加处理器能带来的速度提升的上限。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>S(N) = 1 / ((1 - P) + P / N)
</span><span class='line'>
</span><span class='line'>P: 可并行的程序在单核上执行时间的占比
</span><span class='line'>N: 处理器的个数
</span><span class='line'>S(N): 程序在N个处理器（总核心数）相对于单个处理器中的速度提升比。
</span><span class='line'>
</span><span class='line'>当P=0.2, S(N)的上限为1.25
</span><span class='line'>当P=0.5, S(N)的上限为2</span></code></pre></td></tr></table></div></figure>


<p>根据阿姆达尔定律，提升P非常的重要！</p>

<h2>1.多线程模式</h2>

<p>这里所说的多线程，是指单进程内的多线程。</p>

<h3>1.1互不通信的多线程模式</h3>

<p>线程之间没有交集，各自执行各自的任务和逻辑。这种模式的编程最简单，与单线程差不多。</p>

<h3>1.2基于共享容器的多线程模式</h3>

<p>例如多个线程共用一个队列。对于存储数据的容器或者对象，分为线程安全和线程不安全。</p>

<ul>
<li>如果是线程不安全的，一般可以通过加锁或者Copy On Write（COW）的方式控制并发。对于加锁的情况，如果是读多写少，可以用读写锁而不是互斥锁。</li>
<li>如果是线程安全的，就可以直接使用。</li>
</ul>


<h3>1.3通过事件协同的多线程模式</h3>

<p>某个线程需要等到某个状态或者事件发生后才能继续自己的工作，而这个状态或者事件与另一个线程有关，这时候就需要完成线程间的协调。<strong>为了防止死锁，一般要原子性地获取所需的多个锁，或者注意以相同的顺序获取多个锁。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//原子性地获取多个锁</span>
</span><span class='line'><span class="n">Thread</span> <span class="mi">1</span>
</span><span class='line'><span class="n">GetLocks</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">);</span> <span class="c1">//伪代码，一次性获取两个锁，不同平台支持不同。</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span> <span class="mi">2</span>
</span><span class='line'><span class="n">GetLocks</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//或者同样的顺序获取多个锁</span>
</span><span class='line'><span class="n">Thread</span> <span class="mi">1</span>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>  <span class="n">B</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'><span class="n">Thread</span> <span class="mi">2</span>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>  <span class="n">B</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'><span class="c1">//两个线程的加锁顺序一致，如果Thread 2中的顺序反过来，则很可能造成锁死。      </span>
</span></code></pre></td></tr></table></div></figure>


<h2>2.多进程模式</h2>

<p>进程之间的内存空间是独立的，因此多进程相对会容易一些。但也正因为内存空间独立，因此数据共享就涉及序列化和反序列化。</p>

<p>对于多进程，单个进程的问题不会造成整体的不可用。</p>

<h2>3.网络基础</h2>

<h3>3.1 OSI七层模型</h3>

<p>OSI七层模型还记得？从上到下依次是：</p>

<ul>
<li>应用层：为应用程序（如Email）提供网络服务。</li>
<li>表示层：确保一个应用层发送的信息可被另一个系统的应用层读取。</li>
<li>会话层：通过传输层建立数据传输的通路。</li>
<li>传输层：定义传输数据的协议和端口。</li>
<li>网络层：在位于不同位置的网络中的两个主机系统之间提供连接和路径选择。</li>
<li>数据链路层：定义如何让格式化数据以进行传输。</li>
<li>物理层：定义物理设备标准，传输比特流。</li>
</ul>


<h3>3.2 网络IO实现方式</h3>

<ul>
<li>BIO（Blocking IO），阻塞方式，一个Socket需要一个线程来处理。</li>
<li>NIO（Nonblocking IO），基于事件驱动思想，采用Reactor模式。</li>
<li>AIO (Asynchronous IO)，异步IO，采用Proactor模式。</li>
</ul>


<p>Reactor模式和Proactor模式，后续要再研究一下。</p>

<h2>4.从单机到分布式</h2>

<h3>4.1 输入、输出设备的变化</h3>

<p>除了传统意义的人机交互输入、输出设备，分布式环境中的其它节点也可以看作是输入或输出设备。</p>

<h3>4.2 控制器的变化</h3>

<p>在单机中，控制器是CPU中的控制器。在分布式系统中，控制器是控制方式。</p>

<ol>
<li>使用硬件负载均衡</li>
<li>使用软件负载均衡，如LVS</li>
<li>通过名称服务器</li>
<li>通过规则服务器</li>
<li>Master + Worker的方式</li>
</ol>


<p>前面两种一般称为透明代理。有两种缺点，一是增加了流量，即代理服务器与请求处理服务器之间多了一次发送和返回。当然，LVS通过配置，可以将请求的处理结果直接返回给客户端，不通过中间代理。二是如果代理出现问题，会影响到所有请求。</p>

<p>第三、四种控制方式，都是客户端先访问名称服务器或者规则服务器，得到真正的请求处理服务器地址，然后直接与该地址进行连接。</p>

<p>第五种一般用来管理任务，由Master把任务分给不同的Worker处理。</p>

<h3>4.3 运算器的变化</h3>

<p>分布式系统中的运算器包括多个节点的计算能力。</p>

<ol>
<li>通过DNS解析，实现调度和控制</li>
<li>使用负载均衡设备或软件</li>
<li>使用Master+Worker方式</li>
<li>使用规则服务器等。</li>
</ol>


<h3>4.4 存储器的变化</h3>

<p>与前面的类似，也可以通过：</p>

<ol>
<li>直接访问存储服务器</li>
<li>通过代理服务器访问存储服务器</li>
<li>使用名称服务</li>
<li>使用规则服务</li>
<li>使用Master控制。但没有Worker了。与规则服务不同，这里的Master根据请求返回存储服务器的地址，而不是返回所有地址。</li>
</ol>


<h2>5. 分布式系统的难点</h2>

<ol>
<li>缺乏全局时钟</li>
<li>面对故障独立性。故障独立性指整个系统的一部分有问题，而其他部分正常。</li>
<li>处理单点故障。如果某个功能或角色只有一台单机在支撑，这个节点就称为单点。它发生的故障就是单点故障（SPoF, Single Point of Failure）</li>
<li>事务的挑战。即ACID和CAP。</li>
</ol>


<p>后续将研究文中提到的COW、读写锁、互斥锁，以及Reactor模式和Proactor模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Pro，送给自己的生日礼物]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/21/xin-mai-zi-ji-de-sheng-ri-li-wu/"/>
    <updated>2014-07-21T23:08:33+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/21/xin-mai-zi-ji-de-sheng-ri-li-wu</id>
    <content type="html"><![CDATA[<p>这台Macbook Pro配置还不错，8G RAM ＋ 256G SSD，用个5、6年应该没问题吧。</p>

<!--more-->


<p>上一次买笔记本还是2007年的事，当时买的T61比这个还贵2000多，一点都不含糊，说买就买了。而这次却犹豫了一段时间。直到快生日时，才给自己找了个借口！:)</p>

<p>Retina屏幕就是爽啊，非常清晰！本来准备买个Air算了，觉得性价比高，最后到苹果店里一对比。Air的屏幕简直惨不忍睹，Retina屏，必须的！</p>

<p><img src="http://blog.ubone.com/myresource/images/IMG_blog_20140721_1.jpg" alt="image" /></p>

<p><img src="http://blog.ubone.com/myresource/images/IMG_blog_20140721_2.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java注解]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/09/javazhu-jie/"/>
    <updated>2014-07-09T22:22:10+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/09/javazhu-jie</id>
    <content type="html"><![CDATA[<p>本文记录Java注解的基本用法。</p>

<!--more-->


<p>注解类型声明与接口声明的唯一区别是，在interface之前增加了一个@符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">TestMethod</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断方法是否有某个注解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Method</span> <span class="nl">method:</span> <span class="n">testClass</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">())</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">TestMethod</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>            
</span></code></pre></td></tr></table></div></figure>


<h3>保留(Retention)</h3>

<p>注解信息的保留策略：</p>

<ul>
<li>RetentionPolicy.SOURCE 在编译时丢弃。</li>
<li>RetentionPolicy.CLASS（缺省） 保存在类文件中，运行时可被VM丢弃。</li>
<li>RetentionPolicy.RUNTIME 保存在类文件中，运行时由VM保留。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">TestMethod</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>注解的目标（Annotation Target）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">TestMethod</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>目标的类别包括：TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPET和PACKAGE。如果没有指定目标，则注解可以修饰任何Java元素。</p>

<h3>单值注解</h3>

<p>为了在注解类型中支持单个参数，需要提供一个名为value的方法，返回适当的类型并且没有任何参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Ignore</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用示例</span>
</span><span class='line'><span class="nd">@Ignore</span><span class="o">(</span><span class="s">&quot;忽略&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testC</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不能将null作为注解的值（value）。</p>

<h3>数组参数</h3>

<p>可指定value方法的返回值为数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Ignore</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用示例</span>
</span><span class='line'><span class="nd">@Ignore</span><span class="o">({</span><span class="s">&quot;忽略&quot;</span><span class="o">,</span> <span class="s">&quot;房价涨了&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testC</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//如果数组只有一个成员，也可以这样写：</span>
</span><span class='line'><span class="nd">@Ignore</span><span class="o">(</span><span class="s">&quot;房价涨了&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testC</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>多个参数的注解</h3>

<p>注解有多个参数时，注解类型的成员名与注解声明的名称一致，如下例中的reasons和initials：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Ignore</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span><span class="o">[]</span> <span class="nf">reasons</span><span class="o">();</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">initials</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用示例</span>
</span><span class='line'><span class="nd">@Ignore</span><span class="o">(</span><span class="n">reasons</span><span class="o">={</span><span class="s">&quot;just because&quot;</span><span class="o">,</span> <span class="s">&quot;and why not&quot;</span><span class="o">},</span> <span class="n">initials</span><span class="o">=</span><span class="s">&quot;jjl&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>缺省值</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Ignore</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span><span class="o">[]</span> <span class="nf">reasons</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;房价涨了&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">initials</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>附加返回类型与复式注解类型</h3>

<p>注解值可以是基本类型、枚举、Class引用、注解类型本身，或者任意这些类型的数组。我们以注解类型为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Date</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">month</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">day</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">year</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Ignore</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Date</span> <span class="nf">date</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用示例</span>
</span><span class='line'><span class="nd">@Ignore</span><span class="o">(</span><span class="n">date</span><span class="o">=</span><span class="nd">@Date</span><span class="o">(</span><span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">year</span><span class="o">=</span><span class="mi">2014</span><span class="o">))</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testC</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>包注解</h3>

<p>注解的目标除了方法、属性等外，还可以是包，那么包注解写在哪呢？方法在在包对应的目录中，创建一个名为package-info.java的源文件，这个文件应该包含所有的包注解，后面跟随适当的package语句。除此之外，这个文件不能够包含其它任何东西。示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@TestPackage</span><span class="o">(</span><span class="n">isPerformance</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span> <span class="kn">package</span> <span class="n">sis</span><span class="o">.</span><span class="na">testing</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Java-类和接口]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/08/effective-java-lei-he-jie-kou/"/>
    <updated>2014-07-08T18:58:31+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/08/effective-java-lei-he-jie-kou</id>
    <content type="html"><![CDATA[<p>本文总结《Effective Java》中“类和接口”的论述。</p>

<!--more-->


<h2>13.使类和成员的可访问性最小化</h2>

<p>最小化可访问性的目的是隐藏信息，隐藏信息的原因主要是为了模块解耦。正确地使用修饰符（private, protected和public）很重要。</p>

<p>第一条规则是：尽可能地使每个类或者成员不被外界访问。对于顶层（非嵌套）类和接口，应该只有两种可能的访问级别：包级私有（即没有修饰符时）和public。包级私有仍然是这个包的实现的一部分，以后可以对它进行修改，无需担心客户端。但如果是public，则有责任永远支持它。</p>

<p>如果一个包级私有的顶层类/接口只在某一个类的内部被使用，仍应该考虑将它变成那个类的私有嵌套类。</p>

<p>长度非零的数组总是可变的，所以，类具有公有的静态final数组域，或者返回这种域的访问方法，这几乎总是错误的！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//潜在安全漏洞</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Thing</span><span class="o">[]</span> <span class="n">VALUES</span> <span class="o">=</span> <span class="o">{...};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//可改为：</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Thing</span><span class="o">[]</span> <span class="n">PRIVATE_VALUES</span> <span class="o">=</span> <span class="o">{...};</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Thing</span><span class="o">&gt;</span> <span class="n">VALUES</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">PRIVATE_VALUES</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">//或者返回一个数组的备份：</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Thing</span><span class="o">[]</span> <span class="n">PRIVATE_VALUES</span> <span class="o">=</span> <span class="o">{...};</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Thing</span><span class="o">[]</span> <span class="n">values</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">PRIVATE_VALUES</span><span class="o">.</span><span class="na">clones</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>  
</span></code></pre></td></tr></table></div></figure>


<h2>14.在public类中使用访问方法而非公有域</h2>

<p>简单说，就是public类的属性不要public，而是提供访问方法（如getter, setter）。如果属性不是final的，直接公开属性将表示放弃对该值的控制。即使该属性是final，但如果它引用了可变对象，一样会存在问题。</p>

<h2>15.使可变性最小化</h2>

<p>不可变类是其实例无法修改的类。不可变类不容易出错，本质上是线程安全的，不要求同步。要使类成为不可变，要遵循以下五条规则：</p>

<ol>
<li>不提供任何会修改对象状态的方法。</li>
<li>保证类不会被扩展。</li>
<li>使所有域都是final的。</li>
<li>使所有域都成为私有的。</li>
<li>确保对任何可变组件的互斥访问。如果类中有指向可变对象的域，必须确保客户端无法获得指向这些对象的引用。<strong>永远不要用客户端提供的对象引用来初始化这样的域，也不要从任何访问方法返回该对象的引用。</strong>可使用保护性拷贝技术。</li>
</ol>


<p>不可变类唯一的缺点是，对每个不同的值都需要一个单独的对象。对大型对象代价会很高。</p>

<p>其中第2条，保证类不会被扩展，除了使类成为final外，也可以将类的构造器为私有或者包级私有，然后提供静态工厂。</p>

<p>如果你选择让自己的不可变类实现Serializable接口，并且它包含指向可变对象的域，就必须提供一个显式的readObject或者readResolve方法，或者使用ObjectOutputStream.writeUnshared和ObjectInputStream.readUnshared方法。否则攻击者可能从不可变类创建可变的实例。</p>

<p>如果类不能被做成不可变的，仍然应该尽可能地限制它的可变性。尽量使域/属性成为final。</p>

<p>构造器应该创建完全初始化的对象。尽量不要在构造器或者静态工厂之外再提供公有的初始化方法。同时也不应该提供“重新初始化”方法。</p>

<h2>16.复合优先于继承</h2>

<p>继承打破了封装性。子类依赖于父类中特定功能的实现细节。父类的实现有可能会随着发行版本的不同而有所变化。</p>

<p>通过复合（Composition），现有类变成了新类的一个组件，新类提供方法调用现有类实例中对应的方法，并返回它的结果。这被称为转发。</p>

<p>包装类几乎没有缺点。但包装类不适用于回调框架中。在回调框架中，对象把自己的引用传递给其他对象，用于后续调用。而被包装起来的对象并不知道它外面的包装对象，所以它传递一个指向自身的引用（this），回调时避开了外面的包装对象。这被称为<strong>SELF问题</strong>。</p>

<p>只有当子类真正是父类的子类型时，即它们是“is-a”的关系时，才适合用继承。</p>

<h2>17.要么为继承而设计，并提供文档说明，要么就禁止继承</h2>

<p>文档必须精确地描述覆盖每个方法所带来的影响。
对于为了继承而设计的类，唯一的测试方法就是编写子类。
<strong>为了允许继承，构造器决不能调用可被覆盖的方法，无论是直接调用还是间接调用！</strong>
对于为了继承而设计的类，实现Cloneable和Serializable这两个接口都不是好主意，因为将实际负担转嫁给了扩展这个类的程序员身上。还要注意clone和readObject这两个方法非常类似于构造器，也不能调用可覆盖的方法，不管是直接还是间接调用。如果实现了Serializable，并且该类还有readResolve或writeReplace方法，就必须将该方法成为protected方法，不能是private。</p>

<p>对于那些并非为了安全地进行子类化而设计和编写文档的类，要禁止子类化。有两种办法：声明为final或者将所有构造器都变成私有或包级私有，并增加一个公有静态工厂。</p>

<h2>18.接口优于抽象类</h2>

<h2>19.接口只用于定义类型</h2>

<p>书中建议不要用接口来定义常量，这是接口的不良使用。接口应该只用于定义类型，而常量可以通过以下方法实现：</p>

<ul>
<li>如果某些常量与某个现有类或接口紧密相关，就应该把这些常量加到这个类或接口中。例如Integer的MIN_VALUE常量。</li>
<li>如果这些常量最好被看作是枚举类型的成员，就应该使用枚举类型。</li>
<li>否则应该使用不可实例化的工具类来定义这些常量，例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhysicalConstants</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">PhysicalConstants</span><span class="o">()</span> <span class="o">{}</span> <span class="c1">//避免实例化</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">AVOGADROS_NUMBER</span> <span class="o">=</span> <span class="mf">6.0221419e23</span><span class="o">;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>20.类层次优于标签类</h2>

<p>标签类（Tagged class）是指那些用一个类来表示多种对象的类。例如用一个类来表示矩形和圆。通过一个标签来区分当前实例是矩形还是圆。</p>

<p>标签类过于冗长，容易出错，而且效率低下。这种情况应该通过类层次来定义。</p>

<h2>21.用函数对象表示策略</h2>

<p>如果一个类，它的方法执行其他对象的操作，这个类仅导出一个这样的方法，它的实例就等同于一个指向该方法的指针。这样的实例就称为函数对象（function object）。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">StringLengthComparator</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这个类没有属性，因此适合于单例。为了把该类的实例传递给方法，应该定义一个接口，并让类实现这个接口。这就是一个策略接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">T</span> <span class="n">t1</span><span class="o">,</span> <span class="n">T</span> <span class="n">t2</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数指针的主要用途就是实现策略模式。为了在Java中实现这种模式，要声明一个接口来表示该策略，并且为每个具体策略声明一个实现了该接口的类。当一个具体策略只使用一次时，通常使用匿名类，如果可以重复使用，通常实现为私有的静态成员类，并通过公有的静态final属性导出，其类型为该策略接口。</p>

<h2>22.优先使用静态成员类</h2>

<p>嵌套类（nested class）有四种：静态成员类、非静态成员类、匿名类和局部类。后面三种都被称为内部类（inner class）。</p>

<p>非静态成员类的每个实例都隐含着与一个外围实例的关联，在其内部可以调用外围实例的方法。非静态成员类的一种常见用法是定义一个Adapter。</p>

<p>如果成员类不要求访问外围实例，就要始终把static放在它的声明中，使它成为静态成员类。</p>

<p>匿名类的适用性受到很多限制，它没有名字，不是外围类的成员。它在使用的同时被声明和实例化。不能实现多个接口或者扩展一个类，并同时扩展类和实现接口。它们必须保持简短，大约10行或更少。它主要用于：</p>

<ul>
<li>创建函数对象，例如匿名的Comparator实例。</li>
<li>创建过程对象，例如Runnable, Thread或者TimerTask实例。</li>
<li>在静态工厂方法的内部。参考第18条。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java泛型]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/02/javafan-xing/"/>
    <updated>2014-07-02T22:24:37+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/02/javafan-xing</id>
    <content type="html"><![CDATA[<p>Java泛型功能强大，用起来也很简单。看到一些代码，有时候用?号，有时候又可以直接使用<code>&lt;T&gt;</code>，都有哪些区别呢？系统地了解一下吧。</p>

<!--more-->


<h2>1.参数化类型</h2>

<p>参数化类型，也就是泛型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Date</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HaspMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Date</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这些都是很常见的用法。或者我们创建一个参数化的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>  <span class="c1">//Java 7中可以省略类型了。   </span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2.擦拭法</h2>

<p>要实现参数化类型，有多种方法。C++采用的方法是为每种参数化类都创建一个全新的类型定义。例如<code>MultiHashMap&lt;Date, String&gt;</code>将会创建一个新类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//注：这不是Java的做法。</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiHashMap</span><span class="o">&lt;</span><span class="n">Date</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但这不是Java的做法。Java使用一种叫做“擦拭法”的方法。每个类型参数缺省使用顶级类如Object，客户端的绑定信息被擦去。例如MultiHashMap会被翻译成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiHashMap</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span> <span class="n">values</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">)</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>这个上限也可以指定，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventMap</span><span class="o">&lt;</span><span class="n">K</span> <span class="kd">extends</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示K必须是Date或者其子类。</p>

<h2>3.通配符</h2>

<p>假设你有个方法想对某种类型的List进行遍历处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">concatenate</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'><span class="err">｝</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦你如上面一样定义了<code>List&lt;Object&gt;</code>参数，则无法将其它类型的列表传入。你可以向<code>List&lt;Object&gt;</code>加入Object及其子类的对象，例如：<code>list.add(new Date())</code>。因为Date是Object的子类。但是，当一个方法的参数是<code>List&lt;Object&gt;</code>时，你不能将<code>List&lt;Date&gt;</code>类型的变量作为参数传入这个方法。原因是<code>List&lt;Date&gt;</code>不是<code>List&lt;Object&gt;</code>的子类！例如将<code>List&lt;String&gt;</code>类型作为参数传入将导致无法编译。这时候你可以使用通配符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">concatenate</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//遍历时就可以使用Object了。</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">Object</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="err">｝</span>
</span></code></pre></td></tr></table></div></figure>


<p>但通配符也隐含了一些问题。例如，下面的代码编译错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">pad</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>错误的原因是<code>List&lt;?&gt;</code>指示了一个未知的类型，编译器无法判断指定的操作是否安全，因此它就全部禁止了。</p>

<blockquote><p><code>List&lt;?&gt;</code>声明了List中包含的元素类型是未知的。通配符所代表的其实是一组类型，但具体的类型是未知的。<code>List&lt;?&gt;</code>所声明的就是所有类型都是可以的。但是<code>List&lt;?&gt;</code>并不等同于<code>List&lt;Object&gt;</code>。<code>List&lt;Object&gt;</code>实际上确定了List中包含的是Object及其子类，在使用的时候都可以通过Object来进行引用。而<code>List&lt;?&gt;</code>则其中所包含的元素类型是不确定。其中可能包含的是String，也可能是 Integer。如果它包含了String的话，往里面添加Integer类型的元素就是错误的。正因为类型未知，就不能通过<code>new ArrayList&lt;?&gt;()</code>的方法来创建一个新的ArrayList对象。因为编译器无法知道具体的类型是什么。</p></blockquote>

<p>那么应该如何解决这个问题呢？可以使用泛型方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">pad</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">T</span> <span class="n">object</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">pad</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="s">&quot;Hello&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//结果为：</span>
</span><span class='line'><span class="o">[</span><span class="n">Hello</span><span class="o">,</span> <span class="n">Hello</span><span class="o">,</span> <span class="n">Hello</span><span class="o">,</span> <span class="n">Hello</span><span class="o">,</span> <span class="n">Hello</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>再来个例子，将通配符与泛型方法结合起来用，将一个List从头至尾交换一遍：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">void</span> <span class="nf">inPlaceReverse</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">swap</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">opposite</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">opposite</span><span class="o">));</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">opposite</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>通配符的上、下界</strong>，super和extends</p>

<p>因为对于<code>List&lt;?&gt;</code>中的元素只能用Object来引用，在有些情况下不是很方便。在这些情况下，可以使用上下界来限制未知类型的范围。 如<code>List&lt;? extends Number&gt;</code>说明List中可能包含的元素类型是Number及其子类。而<code>List&lt;? super Number&gt;</code>则说明List中包含的是Number及其父类。当引入了上界之后，在使用类型的时候就可以使用上界类中定义的方法。比如访问 <code>List&lt;? extends Number&gt;</code>的时候，就可以使用Number类的intValue等方法。</p>

<h2>总结</h2>

<p>擦拭法是理解问题的关键。</p>

<h2>参考</h2>

<ul>
<li>《Agile Java》</li>
<li><a href="http://www.infoq.com/cn/articles/cf-java-generics">http://www.infoq.com/cn/articles/cf-java-generics</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安全HTTP，SSL证书及申请]]></title>
    <link href="http://blog.ubone.com/blog/2014/07/02/an-quan-http,sslzheng-shu-ji-shen-qing/"/>
    <updated>2014-07-02T08:34:08+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/07/02/an-quan-http,sslzheng-shu-ji-shen-qing</id>
    <content type="html"><![CDATA[<p>由于iOS 7.1无法安装企业应用的原因是url必须是https，因此需要将原Tomcat服务器增加SSL支持。总结一下基础知识和配置过程。</p>

<!--more-->


<p>HTTPS是位于安全层之上的HTTP，如下图所示：</p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140702_1.jpg" alt="image" /></p>

<h2>1.基础知识</h2>

<p>数字加密的一些概念：</p>

<ul>
<li>密码</li>
<li>密钥：改变密码行为的数字化参数。例如，加密算法是循环移位N个字符，那么密钥控制N的值。</li>
<li>对称密钥加密系统：加密和解密都使用相同的密钥。</li>
<li>不对称密钥加密系统：加密和解密都使用不同的密钥。</li>
<li>公开密钥加密系统：一种能够使数百万计算机便捷发送机密报文的系统。</li>
<li>数字签名：用加密系统对报文进行签名，说明是谁编写的报文，同时证明报文未被篡改。</li>
<li>数字证书：由受信任组织提供的身份证明。</li>
</ul>


<h3>1.1对称密钥加密技术</h3>

<p>常见的对称密钥加密算法包括：DES、Triple-DES、RC2和RC4。</p>

<p>它们的编、解码算法都是公开的，因此密钥是唯一保密的东西。可用密钥值的数量取决于位数。位数越长则破解难度越大。下表是书中列举的，以1995年的技术进行破解的成本：</p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140702_3.jpg" alt="image" /></p>

<p>对称密钥加密技术的缺点之一是发送和接收者在对话之前，一定要有一个共享的保密密钥。如果在Internet上，Web服务器要与每个用户的浏览器进行安全对话，采用这种加密技术将是一个噩梦。</p>

<h3>1.2公开密钥加密技术</h3>

<p>公开密钥加密技术使用两个非对称密钥：一个用来编码，另一个用来解码。编码密钥是公开的，而解码密钥只有主机自己知道。因此所有用户都可以拥有某个主机的编码密钥，当他向主机发送报文时，使用该主机的公钥进行编码，主机使用自己的解码密钥进行解码。</p>

<p>公开密钥架构（Public-Key Infrastructure, PKI）标准，用于标准化公开密钥技术包。</p>

<p>RSA算法是一个公开密钥加密算法。由麻省理工学院发明，RSA公司将其商业化。</p>

<h3>1.3数字签名</h3>

<p>签名就是为了说明谁编写的报名，并证明其未被篡改过。它是加了密的校验和。下图展示了从节点A向节点B发送一条报文的过程：</p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140702_3.jpg" alt="image" /></p>

<p>节点A对报文提取为定长摘要，将对摘要使用“签名”函数，这个函数接收用户的私有密钥作为参数。计算出签名后，将其附加在报文的末尾，一同发给B。</p>

<p>节点B如何确定报文确实是A写的，而且没被篡改过？B使用公开密钥的反函数，确认拆包后的摘要与自己的摘要版本一致。</p>

<p><a href="http://baike.baidu.com/view/7626.htm?fr=aladdin">百度百科</a>关于签名过程的描述：</p>

<blockquote><p>发送报文时，发送方用一个哈希函数从报文文本中生成报文摘要,然后用自己的私人密钥对这个摘要进行加密，这个加密后的摘要将作为报文的数字签名和报文一起发送给接收方，接收方首先用与发送方一样的哈希函数从接收到的原始报文中计算出报文摘要，接着再用发送方的公用密钥来对报文附加的数字签名进行解密，如果这两个摘要相同、那么接收方就能确认该数字签名是发送方的。</p></blockquote>

<h3>1.4数字证书</h3>

<p>数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，其作用类似于司机的驾驶执照或日常生活中的身份证。它是由一个由权威机构——CA机构，又称为证书授权（Certificate Authority）中心发行的，人们可以在网上用它来识别对方的身份。数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。</p>

<p>证书的主要内容包括：对象的名称（人、服务器、组织等）、过期时间、证书发布者和来自证书发布者的数字签名。</p>

<p>证书的格式没有全球标准，但大多数以X.509 v3作为标准格式。</p>

<h4>服务器证书（SSL证书）</h4>

<p>在服务器上安装服务器证书后，客户端浏览器可以与服务器证书建立SSL连接，在SSL连接上传输的任何数据都会被加密。同时，浏览器会自动验证服务器证书是否有效，验证所访问的站点是否是假冒站点，服务器证书保护的站点多被用来进行密码登录、订单处理、网上银行交易等。全球知名的服务器证书品牌有Globlesign，Verisign，Thawte，Geotrust等。</p>

<p>SSL支持双向认证。将服务器证书承载回客户端，再将客户端的证书回送给服务器。但目前，大部分用户都没有自己的客户端证书，所以服务器很少会要求客户端证书。</p>

<h2>2.为Tomcat安装SSL证书</h2>

<h3>2.1申请SSL证书</h3>

<p>建议使用<a href="https://www.startssl.com/">StartSSL</a>申请一个SSL证书，可以使用一年期免费的证书。必须使用域名！过程主要包括：</p>

<ul>
<li>在StartSSL上注册（Sign-up）。所填资料应是真实的，或者至少看起来是真的。</li>
<li>注册成功后会下载个证书，要导入到浏览器中。</li>
<li>然后就可以进入StartSSL的控制面板了。</li>
<li>验证完Email地址和域名所有权后，申请证书。</li>
<li>按照StartSSL的向导，申请完证书后，本地应该有这么几个文件：</li>
</ul>


<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140702_5.png" alt="image" /></p>

<h3>2.2Tomcat安装SSL证书</h3>

<p>首先要创建pkcs12文件，使用StartSSL ToolBox中的Create PKCS#12 (PFX) File。其中Private Key就是ssl.key的内容，而Certificate则是ssl.crt的内容。创建完后将其保存为out.p12</p>

<p>第二步是生成Keystore文件。利用java的keytool工具：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//XXXXXX为密码
</span><span class='line'>keytool -importkeystore -deststorepass  XXXXXX -destkeystore mykeystore.jks -srckeystore out.p12 -srcstoretype PKCS12 -srcstorepass XXXXXX</span></code></pre></td></tr></table></div></figure>


<p>第三步，导入CA证书：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -import -alias startsslca -file sub.class1.server.ca.pem -keystore mykeystore.jks</span></code></pre></td></tr></table></div></figure>


<p>最后一步，配置Tomcat，修改server.xml，将8443端口取消注释：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8443&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span>
</span><span class='line'>  <span class="na">SSLEnabled=</span><span class="s">&quot;true&quot;</span> <span class="na">maxThreads=</span><span class="s">&quot;150&quot;</span>
</span><span class='line'>  <span class="na">scheme=</span><span class="s">&quot;https&quot;</span> <span class="na">secure=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>  <span class="na">clientAuth=</span><span class="s">&quot;false&quot;</span> <span class="na">sslProtocol=</span><span class="s">&quot;TLS&quot;</span>
</span><span class='line'>  <span class="na">keystoreFile=</span><span class="s">&quot;/Users/mxs/mykeystore.jks&quot;</span>
</span><span class='line'>  <span class="na">keystorePass=</span><span class="s">&quot;XXXXXX&quot;</span><span class="nt">/&gt;</span> <span class="c">&lt;!--XXXXXX是密码--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果启动时报apr错误，可修改server.xml，加上注释：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!--&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>文件类型说明</h2>

<p>PKCS#12是“个人信息交换语法”，常用的后缀有.P12 .PFX。它可以用来将x.509的证书和证书对应的私钥打包，进行交换。比如你在windows下，可以将IE里的证书连带私钥导出，并设置一个口令保护。这个pfx格式的文件，就是按照pkcs#12的格式打包的。当然pkcs#12不仅仅只是作以上用途的。它可以用来打包交换任何信息。你可以和张三李四用PKCS#12来交换私人数据，包括x.509证书和私钥。</p>

<p>.CRT  扩展名CRT用于证书。证书可以是二进制的DER编码，也可以是文本的PEM编码。扩展名CER和CRT几乎是同义词。这种情况在各种unix/linux系统中很常见。</p>

<p>.CER  CRT证书的微软型式。可以用微软的工具把CRT文件转换为CER文件（CRT和CER必须是相同编码的，DER或者PEM）。扩展名为CER的文件可以被IE识别并作为命令调用微软的cryptoAPI（具体点就是rudll32.exe cryptext.dll, CyrptExtOpenCER），进而弹出一个对话框来导入并/或查看证书内容。</p>

<p>.KEY  扩展名KEY用于PCSK#8的公钥和私钥。这些公钥和私钥可以是DER编码或者PEM编码。本文中的ssl.key，以文本方式打开可以看到第一行是：&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;-表示私钥。在StartSSL的向导中，先生成的是加密的key，然后使用命令：openssl rsa -in ssl.key -out ssl.key 将其解密。</p>

<h2>参考：</h2>

<p>《HTTP权威指南》
<a href="http://baike.baidu.com/view/7626.htm?fr=aladdin">百度百科</a>
<a href="http://fengfan.blog.163.com/blog/static/13478622013713114942896/">博客1</a>
<a href="http://blog.csdn.net/googling/article/details/6698255">博客2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[采用界面原型和系统用例描述需求]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/30/xu-qiu-yu-yong-li/"/>
    <updated>2014-06-30T20:26:24+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/30/xu-qiu-yu-yong-li</id>
    <content type="html"><![CDATA[<p>需求、文档是软件开发过程中两个最头疼的问题。什么是需求？软件没开发出来时，看不见摸不着。文档化是一种办法，但各种各样的文档、标准和格式。还没开始写就已经让人望而却步了。文档并不是越少越好，也不是越多越好，应该根据项目的的特点决定采用何种方式去描述需求。</p>

<!--more-->


<p>对于非关键性应用，我认为采用界面原型＋系统用例是一种很好的描述需求的方法。界面原型描述了系统的界面元素，用例描述了用户与这些界面元素的交互过程。这种方式既能够避免文档过重，又可以为开发和测试人员提供完整而明确的指引，迅速推动项目进程。</p>

<h2>1.一个例子</h2>

<p>在产品经理的眼中，一图胜千言，有了界面原型，或者有了高保真图，开发人员就明白需求是什么，就可以开发产品了。真的是这样吗？</p>

<p>我们来看一个最简单的例子：系统登录。产品经理提供的需求包括一个Excel表格和一些原型图。Excel中列出了所有的功能需求，其中有一行记录，标题是“系统登录”，内容是“使用手机号和密码登录”。产品经理心里想，这么简单的东西还要写文档吗？给，这还有一张高保真图，需求够明确了吧！</p>

<p><img src="http://blog.ubone.com/myresource/images/img_blog_20140629.jpg" alt="image" /></p>

<p>开发人员拿到需求后，有几种可能：</p>

<ol>
<li>新手甲：这个太简单了，马上就开始干。结果很可能不是你想像。</li>
<li>老手乙：这个简单，原来做过类似的功能，按既定方针办！但每个系统都有其特点，并不能完全抄袭。</li>
<li>老手丙：好像比较简单，但是又感觉不好下手，貌似还有些问题不确定：</li>
</ol>


<blockquote><ul>
<li>如果输入的手机号长度不够怎么办？登录按钮可用吗？</li>
<li>密码最少要几位数？要限制吗？如果长度不够，登录按钮可用吗？</li>
<li>如果手机号或者密码不正确怎么办？弹出对话框进行提示？这种体验好像不太好，把错误信息显示在某个地方？错误信息写成啥呢？“手机号码或密码不正确！” or “请输入正确的手机号码和密码！” or &hellip;</li>
<li>这是个企业应用，手机号应该是服务端已经存在的。如果用户输入的手机号在服务端不存在，应该怎么提示？</li>
<li>这个记住密码是什么意思？下次打开应用不需要再输入密码？下次打开应用直接跳过这个登录窗口？</li>
<li>记住密码是默认打勾？</li>
<li>手机号码要记住吗？</li>
</ul>
</blockquote>

<p>看来不确定的问题太多，看看腾讯的微信是怎么做的。啥？它没有“记住密码”的功能？</p>

<p>你看，一个最简单的需求就可能让开发人员产生这么多的疑问。你能理解丙内心的纠结吗？</p>

<p>我们永远无法用文档去描述所有的需求，但我们应该尽可能地把需求准确、完整地描述出来。否则开发出来的产品一定不是你要的结果。尽管我们可以通过沟通来解决一些问题，可是别忘了：越早解决问题，成本越低。</p>

<p>而用例分析可以帮助产品经理从系统的角度去分析需求，产出明确、完整的需求文档。</p>

<h2>2.用例是什么？</h2>

<p>用例是各干系人就系统行为所达成的契约。用例描述了在不同条件下，系统对Actor的请求进行响应时发生的行为。用例是需求，它可以准确地描述系统行为。但用例不代表所有的需求，它只是一部分非常重要的需求，可能占1/3，还有很多其它的需求，例如外部接口、数据格式、业务规则和公式等等。</p>

<p>用例的另一个主要作用体现在对异常情况的描述上。产品讨论时，很容易集中在成功场景。如果那些离散的用例步骤和失败情况没有集中讨论，那么许多错误和异常情况就不能在程序员编码前发现，然后就会因为各种原因（沟通不畅、上线期限、重新组织讨论的难度等等）导致这些异常情况得不到很好的确认和处理，程序员就只能想当然地按自己的想法开发。这最终将会影响代码和产品的质量。</p>

<h2>3.用例示例</h2>

<p>我们以系统登录为例，尝试编写一个用例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>用例编号：UC1-001
</span><span class='line'>用例名称：系统登录
</span><span class='line'>用例描述：
</span><span class='line'>      系统登录。
</span><span class='line'>参与者：
</span><span class='line'>  所有用户。 
</span><span class='line'>前置条件：
</span><span class='line'>  无
</span><span class='line'>后置条件：
</span><span class='line'>  Actor成功登录。    
</span><span class='line'>基本路径
</span><span class='line'>  1. 系统显示登录窗口，“记住密码”默认选中，登录按钮不可用。
</span><span class='line'>  2. Actor输入11位手机号码和至少6位密码。
</span><span class='line'>  3. 系统将“登录”按钮变为可用。
</span><span class='line'>  4. Actor点击“登录”按钮。
</span><span class='line'>  5. 系统验证成功后完成登录，打开首页。
</span><span class='line'>  
</span><span class='line'>扩展点：
</span><span class='line'>  1a. 上次登录成功且勾选了“记住密码”：系统直接完成登录，并打开首页。    
</span><span class='line'>      1a1. 系统直接登录失败，打开登录窗口，显示之前的手机号和密码，
</span><span class='line'>  系统提示：“请输入正确的手机号和密码。”。“登录”按钮可用。
</span><span class='line'>  
</span><span class='line'>  1b. 上次登录成功，但未勾选“记住密码”：则系统显示登录窗口，
</span><span class='line'>  “手机号”为上次的手机号，“记住密码”不勾选，“密码”为空。
</span><span class='line'>  
</span><span class='line'>  5a. 手机号或密码不正确：系统提示“请输入正确的手机号和密码。”
</span><span class='line'>  
</span><span class='line'>  5b. 手机号不存在：系统提示“该号码不存在，请与管理员联系。”
</span><span class='line'>  
</span><span class='line'>业务规则：
</span><span class='line'>  手机号必须输入、且只能输入11位。
</span><span class='line'>  密码至少6位。
</span><span class='line'>
</span><span class='line'>非功能性需求：
</span><span class='line'>  
</span><span class='line'>设计约束：
</span><span class='line'>
</span><span class='line'>补充说明：   
</span><span class='line'>  所有系统提示都以文本方式显示在上面。详见效果图。
</span><span class='line'>  登录时的loading和mask按系统约定。
</span><span class='line'>      </span></code></pre></td></tr></table></div></figure>


<p>上面的用例中：</p>

<ul>
<li>基本路径表示一切顺利时的过程。</li>
<li>扩展点表示备选流，相当于分支。例如1a就是一个分支，表示基本路径中第1步的第一个分支，1b表示第1步的第二个分支。1a1表示分支的第1步（注意缩进）。以此类推。</li>
</ul>


<p>通过用例，我们用10几行文字就把系统登录的整个需求描述清楚了。这样的文档花不了多少时间。</p>

<h2>4.如何写用例</h2>

<p>基本路径是系统完成目标的一条主线。扩展点是因为特别条件而出现的分支。如果不区分基本路径和扩展点，文档中就会包括很多的“如果&hellip;否则&hellip;”，最终导致文档很难阅读。</p>

<p>在讨论需求时，要集中讨论所有可能的失败和可选择的过程。扩展条件通常可以加上冒号（：），使读者不会误认为它是一个执行步骤，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>无效PIN：
</span><span class='line'>网络中断：</span></code></pre></td></tr></table></div></figure>


<p>用例可以包含子用例，也可以链接到另一个用例。</p>

<p>编写用例有一些准则：</p>

<ul>
<li>准则1：使用简单的语法。
主语&hellip;谓语动词&hellip;直接宾语&hellip;前置短语。一定要有主语（Actor，系统）。</li>
<li>准则2：描述执行者的意图，而不是动作。不要在界面细节描述过多，否则文档变长，质量变差。</li>
<li>准则3：“确认”而不是“检查是否”。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>修改前：
</span><span class='line'>2. 系统检查密码是否正确。
</span><span class='line'>3. 如果密码正确，系统向用户提供有效的操作。
</span><span class='line'>
</span><span class='line'>修改后：
</span><span class='line'>2. 系统验证密码正确。
</span><span class='line'>3. 系统向用户提供有效的操作。 </span></code></pre></td></tr></table></div></figure>


<p>用例的格式有多种，包括单列表格式、双列表格式、RUP格式等等。建议采用上述示例中的格式。简单、条理清晰，易执行。</p>

<p>用例只是行为需求，不包括系统性能需求、业务规则等，但这些需求也可以附在用例上，在业务规则、非功能性需求、设计约束和补充说明中进行描述。</p>

<h2>6.总结</h2>

<p>本文以一个非常简单的例子来说明用例的编写方法。用例的编写工作本身非常简单，所花的时间也很少，但这决不表示它很容易。因为编写用例的过程是你思考的过程，只有你思考清楚了，才可能写出清晰完整的用例。这句话反过来说也成立：如果不能把用例描述清楚，说明思路还没有理顺。</p>

<p>采用界面原型＋系统用例来描述需求，能够以最少的文档描述明确的需求，帮助产品经理描述清晰、完整的需求；帮助开发人员理解业务需求，快速投入设计和开发工作；为测试人员提供测试用例设计和执行的依据。</p>

<p>关于需求和文档，从来没有标准答案。只有不断实践才能找到最适合的方法！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用反射和代理创建简单的安全账号]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/28/li-yong-fan-zhang-hao/"/>
    <updated>2014-06-28T11:42:34+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/28/li-yong-fan-zhang-hao</id>
    <content type="html"><![CDATA[<p>在实际业务中，总是会遇到权限管理和安全方面的需求。以一个帐户类（Account）为例，它实现了帐户的基本信息和余额管理。新的需求是余额修改相关的方法只能由授权用户调用。那么是不是直接修改Account类，在相关方法中加入权限验证代码呢？这样势必会让原来的代码变得混乱，破坏单一职责原则。应该怎么办呢？</p>

<!--more-->


<p>开闭原则告诉我们对扩展开放、对修改关闭。我们可以通过代理类实现这个业务需求。这是一个简单的示例，用于演示反射和代理的使用，并不能直接用于生产环境，仅仅提供一种思路供参考。</p>

<p>首先看看这个示例的整体结构图：</p>

<p><img src="http://blog.ubone.com/myresource/images/IMG_blog_20140628.jpg" alt="image" /></p>

<p>Accountable接口:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Accountable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BigDecimal</span> <span class="nf">getBalance</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getBankAba</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBankAba</span><span class="o">(</span><span class="n">String</span> <span class="n">bankAba</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getBankAccountNumber</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBankAccountNumber</span><span class="o">(</span><span class="n">String</span> <span class="n">bankAccountNumber</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BankAccountType</span> <span class="nf">getBankAccountType</span><span class="o">()</span> <span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBankAccountType</span><span class="o">(</span><span class="n">BankAccountType</span> <span class="n">bankAccountType</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">credit</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transferFromBank</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>静态工厂方法封装具体的接口实现，客户端并不关心实现类是Account还是SecureProxy类。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">AccountFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">(</span><span class="s">&quot;作为静态工厂，不允许实例化！&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Accountable</span> <span class="nf">create</span><span class="o">(</span><span class="n">Permission</span> <span class="n">permission</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//如果有修改权限则返回Account，否则返回有权限限制的代理。</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">permission</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">UPDATE:</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">Account</span><span class="o">();</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">READ_ONLY:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">createSecuredAccount</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Accountable</span> <span class="nf">createSecuredAccount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SecureProxy</span> <span class="n">secureAccount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecureProxy</span><span class="o">(</span><span class="k">new</span> <span class="n">Account</span><span class="o">(),</span>
</span><span class='line'>                <span class="c1">//传入不允许调用的方法名</span>
</span><span class='line'>                <span class="s">&quot;credit&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;setBankAba&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;setBankAccountNumber&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;setBankAccountType&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;transferFromBank&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//这句是关键</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">Accountable</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Accountable</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span><span class="n">Accountable</span><span class="o">.</span><span class="na">class</span><span class="o">},</span>
</span><span class='line'>                <span class="n">secureAccount</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后的return语句是动态建立代理的关键，第一个参数是接口的类加载器；第二个参数是接口类型的数组（这就是创建数组的语法），表示你希望代理类实现哪些接口；第三个是具体的代理对象。详细请参考<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html">JavaDoc</a>。</p>

<p>SecureProxy的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecureProxy</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//需要授权的方法</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">secureMethods</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//被代理对象</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SecureProxy</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">,</span> <span class="n">String</span><span class="o">...</span> <span class="n">secureMethods</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">secureMethods</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">secureMethods</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//权限验证</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isSecure</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">PermissionException</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//调用真正的方法</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//如果调用真正的方法时有异常，getTargetException就是真正的异常原因。</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">e</span><span class="o">.</span><span class="na">getTargetException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isSecure</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">secureMethods</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意SecureProxy类并不需要显式实现Accountable接口，因为在静态工厂方法中动态为其指定了将实现的接口。SecureProxy类必须实现InvocationHandler，该接口的一个重要方法就是invoke，客户端调用Accountable接口中的某个方法时，会触发代理的invoke方法，然后在其中调用真正的目标方法。通过isSecure方法来判断是否有权限调用某方法。</p>

<p>总结一下，Account类是真正的业务实现类，SecureProxy作为代理，在Account的基础上增加了安全功能。关键方法包括Proxy.newProxyInstance和InvocationHandler接口。虽然示例太过简单无法用于实际业务，但它演示了<strong>两个重要原则：单一职责和开闭原则！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Java-创建和销毁对象]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/27/effective-java-chuang-jian-he-xiao-hui-dui-xiang/"/>
    <updated>2014-06-27T09:20:04+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/27/effective-java-chuang-jian-he-xiao-hui-dui-xiang</id>
    <content type="html"><![CDATA[<p>《Effective Java》是Java语言的经典著作，本文总结书中“创建和销毁对象”的论述。主要包括：</p>

<ol>
<li>用静态工厂方法代替构造器</li>
<li>构造器参数比较多时，考虑使用Builder</li>
<li>用私有构造方法或枚举强化单例属性</li>
<li>通过private构造器强化不可实例化的能力</li>
<li>避免创建不必要的对象</li>
<li>消除过期的对象引用</li>
<li>避免使用finalize方法</li>
</ol>


<!--more-->


<h2>1.用静态工厂方法代替构造器</h2>

<p>用静态工厂方法代替构造器有以下几个好处：</p>

<ol>
<li>静态工厂方法有名称，而构造器只能通过参数区分；</li>
<li>静态工厂方法不必每次都创建一个新对象；</li>
<li>静态工厂方法可以返回该类的任何子类；</li>
<li>在创建参数化实例时，静态方法工厂使代码更加简单。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//使用构造方法时：</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//假设有静态方法后：</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">newInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//只需要：</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上，Java 7和8在泛型类型推断上已经有了一些改进，可以让代码写得更简单些。因此上述第4条优势已经不明显。</p>

<p>静态工厂方法的缺点：</p>

<ol>
<li>类如果没有public或protected构造方法，就无法被子类化。</li>
<li>与其它静态方法没什么区别，无法明确标识出来。全靠命名惯例，常用的静态方法名包括：valueOf, of, getInstance, newInstance, getType, newType。</li>
</ol>


<h2>2.构造器参数比较多时，考虑使用Builder</h2>

<p>构造器和静态方法的缺点是参数比较多时不方便，使用setter方法时，可能造成不一致，而且也无法把类做成不可变，影响线程安全。</p>

<p>使用Builder模式就可以很好地解决这个问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuilderDemoClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//1个必须属性，2个可选属性。</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">a_required</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">a_required</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">a_required</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">bb</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">cc</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">BuilderDemoClass</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">BuilderDemoClass</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">BuilderDemoClass</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">a_required</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">a_required</span><span class="o">;</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">c</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getA_required</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a_required</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getC</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuilderDemoClassTest</span> <span class="kd">extends</span> <span class="n">TestCase</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBuilder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">BuilderDemoClass</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BuilderDemoClass</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">bb</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">cc</span><span class="o">(</span><span class="mi">30</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getA_required</span><span class="o">(),</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getB</span><span class="o">(),</span> <span class="mi">20</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getC</span><span class="o">(),</span> <span class="mi">30</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.用私有构造方法或枚举强化单例属性</h2>

<p>这一条说的是实现单例的几种方法，推荐使用枚举类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">MySingleton</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//调用：</span>
</span><span class='line'>
</span><span class='line'><span class="n">MySingleton</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>之前有过详细总结：<a href="http://blog.ubone.com/blog/2014/06/25/just-a-test/">单例与枚举</a></p>

<h2>4.通过private构造器强化不可实例化的能力</h2>

<p>对于一些工具类，主要包括静态方法，可以将构造器private，避免其被实例化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UtilityClass</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//强调不能被实例化</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">UtilityClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">someStaticMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5.避免创建不必要的对象</h2>

<ul>
<li>最好是重用对象，而不是每次创建一个相同功能的对象。</li>
<li>对于同时提供了静态工厂和构造器的不可变类，通常使用静态工厂，例如Boolean.valueOf(String) 优先于Boolean(String)。</li>
<li>对于某些已知不会被修改的可变对象，如果频繁用到，可以先缓存起来。</li>
<li>优先使用基本类型而不是装箱基本类型，当心无意识的自动装箱。例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAutoBoxing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码每次增加sum时，都构造了一个实例。把Long sum改成long sum后，我的Thinkpad X230运行时间从15秒减少到了3.3秒。</p>

<h2>6.消除过期的对象引用</h2>

<p>虽然Java有自动垃圾回收功能，但仍有许多要注意的事项。如果一个对象的引用被无意识地保留下来，则对象不会被回收，因此可能导致一连串的对象无法回收。</p>

<ul>
<li>只要类是自己管理内存，就要警惕内存泄漏问题。</li>
<li>缓存是内存泄漏的常见来源。</li>
<li>监听器和回调要注意显式取消注册。</li>
</ul>


<h2>7.避免使用finalize方法</h2>

<p>finalize方法通常是不可预期的、危险的，并且常常是没必要的。</p>

<ul>
<li>无法保证该方法被执行，以及何时执行。因此时间敏感的工作绝不能放到该方法中。</li>
<li>由于每种JVM的垃圾回收算法不同，因此该方法在一种JVM上运行良好，并不代表在其它JVM上也能正常工作。</li>
<li>该方法的线程优先级比较低，因此无法保证它会运行。</li>
<li>绝不要依赖该方法去更新关键持久化状态。例如去释放一个锁。</li>
<li>System.gc和System.runFinalization两个方法并不能保证finalize方法一定会被执行。所以不要被它们迷惑。</li>
<li>唯一能确保该方法被执行的是System.runFi- nalizersOnExit和Runtime.runFinalizersOnExit。但它们是臭名昭著的方法，本身有严重问题，尽量不要使用。</li>
<li>使用该方法有严重的性能问题。</li>
<li>。。。</li>
</ul>


<p><strong>有一万个理由不要使用finalize方法。因此你就别用它了！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java随机存取文件]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/26/javasui-ji-cun-qu-wen-jian/"/>
    <updated>2014-06-26T21:56:12+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/26/javasui-ji-cun-qu-wen-jian</id>
    <content type="html"><![CDATA[<p>RandomAccessFile提供了随机存取文件的支持，但是如何将对象持久化到文件中，并随机存取呢？</p>

<!--more-->


<h3>1.简介</h3>

<p>使用RandomAccessFile随机存取文件。它提供了4种模式：</p>

<ul>
<li>r 只读；</li>
<li>rw 读写，如果不存在将创建新文件；</li>
<li>rws 同步更新，确保文件内容和元数据（如最近修改时间）持久化；</li>
<li>rwd 同步更新，确保文件内容持久化。</li>
</ul>


<p>常用方法：</p>

<ul>
<li>seek快速移动文件指针；</li>
<li>getFilePointer返回当前指针位置；</li>
<li>length文件总字节数；</li>
<li>一堆read和write方法。</li>
</ul>


<h3>2.写入对象</h3>

<p>RandomAccessFile并不支持保存对象，需要将它们转换成字节数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getBytes</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ByteArrayOutputStream</span> <span class="n">byteStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//写入ObjectOutputStream的对象，被管接到ByteArrayOutputStream</span>
</span><span class='line'>    <span class="n">ObjectOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectOutputStream</span><span class="o">(</span><span class="n">byteStream</span><span class="o">);</span>
</span><span class='line'>    <span class="n">outputStream</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="n">outputStream</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">byteStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>写入代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RandomAccessFile</span> <span class="n">db</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">fileName</span><span class="o">),</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//在文件最后写入对象</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="na">seek</span><span class="o">(</span><span class="n">db</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">getBytes</span><span class="o">(</span><span class="n">someObject</span><span class="o">);</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.读取对象</h3>

<p>读取对象与写入对象正好相反。以适当的长度创建字节数组，然后调用readFully从RandomAccessFile读取并填充，再包装到ObjectInputStream。</p>

<p>下面的示例代码读取指定长度（通常需要记录对象的长度，此处略去）的字节并转换成对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">read</span><span class="o">(</span><span class="n">RandomAccessFile</span> <span class="n">db</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">readFully</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nf">readObject</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">readObject</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ObjectInputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">bytes</span><span class="o">));</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">unlikely</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">input</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://docs.oracle.com/javase/7/docs/api/java/io/RandomAccessFile.html">参考Java Doc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[某移动客户端项目开发]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/26/mou-xiang-mu-kai-fa-guo-cheng-zong-jie/"/>
    <updated>2014-06-26T15:20:21+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/26/mou-xiang-mu-kai-fa-guo-cheng-zong-jie</id>
    <content type="html"><![CDATA[<p>新到一家公司，抽调去支援移动客户端团队，经历了一个移动客户端项目的开发过程。按以往的经验看，项目规模不大、业务也比较简单，3、5个人，2－3个月就应该能搞定。但整个项目却历时半年，最多时项目组有10几个人。简单记录一下吧。</p>

<!--more-->


<h3>问题总结</h3>

<ul>
<li>采用不熟悉的技术，但又没有形成好的学习氛围和积极的心态；</li>
<li>跨地域团队管理难，跨地域开发团队管理更难；</li>
<li>落后的硬件配置，搞跨平台移动开发居然没有Mac本！</li>
<li>你觉得可能出问题的地方，将来一定会出问题！所以一定要将问题提前解决，越往后成本越高。</li>
<li>如果由测试和研发人员主导产品开发，只能解决产品的有无问题，无法产出卓越的产品。产品经理不是画个草图、写几句话就可以撒手不管的。</li>
</ul>


<h3>改进要求</h3>

<ul>
<li>专业的人做专业的事。产品经理要把产品设计好，你别让开发人员来思考怎么做好产品。设计人员把设计工作做好，你别让水平低的开发人员去考虑如何设计。</li>
<li>产品经理至少要提供低保真图和用例规约，别让设计和开发人员去考虑产品交互细节。如果你说写文档太麻烦，只能说明你自己其实没想清楚。</li>
<li>要有Code review，要有基本的设计。而不是任务一分就不管了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在GitHub上写博客]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/25/zai-githubshang-xie-bo-ke/"/>
    <updated>2014-06-25T22:54:07+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/25/zai-githubshang-xie-bo-ke</id>
    <content type="html"><![CDATA[<p>一直想找个能支持Markdown的博客平台。在尝试了包括CSDN、Loft、点点等博客平台之后，均觉不太满意。CSDN太业余，一个IT业最大的社区网站，竟然不支持Markdown。Loft偏文艺，不适合技术。点点还不错，支持Markdown，本来准备最终选择它了，但不爽有二：<!--more-->一是主题没合适的，界面布局、代码高亮显示、字体大小和摘要显示等总有一点让你觉得勉强；二是使用独立域名，要求太不清晰。输入相关信息后总是提示我的博客太少，不让使用自己的域名。但你好歹说一下标准是啥啊？多少篇博客才能满足你这条件啊？这种体验太差了。最后放弃。</p>

<p>一番折腾后，发现可以直接使用<a href="http://github.com">GitHub</a>写博客，而且几年前就有这个功能了。看来真是有点Out了！</p>

<p>安装的过程完全参照<a href="http://octopress.org/">Octopress</a>网站和唐巧的两篇博客：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a></li>
<li><a href="http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/">将博客从GitHub迁移到GitCafe</a></li>
</ul>


<p>安装过程就不再重复了，说说有哪些不同。</p>

<p>Octopress的默认主题背景是黑色，有点太压抑了。代码高亮显示的颜色也不爽，所以改了点颜色：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="nt">sass</span><span class="o">/</span><span class="nt">custom</span><span class="o">/</span><span class="nt">_colors</span><span class="nc">.scss</span>
</span><span class='line'><span class="err">$</span><span class="nt">page-bg</span><span class="o">:</span>     <span class="nf">#F4F3DE</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">header-bg</span><span class="o">:</span>       <span class="nf">#5B4947</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">base03</span><span class="o">:</span>          <span class="nf">#eee</span><span class="o">;</span> <span class="o">//</span><span class="nt">darkest</span> <span class="nt">blue</span>
</span><span class='line'><span class="err">$</span><span class="nt">base02</span><span class="o">:</span>          <span class="nf">#ddd</span><span class="o">;</span> <span class="o">//</span><span class="nt">dark</span> <span class="nt">blue</span>
</span><span class='line'><span class="err">$</span><span class="nt">solar-blue</span><span class="o">:</span>      <span class="nt">navy</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外对配置文件_config.yml，除了常规修改外，还修改了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">#修改日期格式</span>
</span><span class='line'><span class="nt">date_format</span><span class="o">:</span> <span class="s2">&quot;%Y-%m-%d&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">#增加评论功能</span>
</span><span class='line'><span class="nt">disqus_short_name</span><span class="o">:</span> <span class="err">你的</span><span class="nt">disqus</span> <span class="nt">short</span> <span class="nt">name</span>
</span><span class='line'><span class="nt">disqus_show_comment_count</span><span class="o">:</span> <span class="nt">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>唐巧使用的是国内的一个评论系统，实际上Octopress内置的插件包含了评论功能。在<a href="http://disqus.com">Disqus</a>注册帐号并设置shortname后，修改_config.yml即可。</p>

<p>在GitHub上建立博客，最担心的是访问速度。GitHub已经使用全球CDN来服务GitHub Pages，参见：<a href="https://github.com/blog/1715-faster-more-awesome-github-pages">Faster, More Awesome GitHub Pages</a>。实际测试下来速度很快，用Chrome监视，打开页面基本就是2－3秒时间。</p>

<p>但是在手机上打开博客时，却非常慢。最后发现原因是使用了googleapis.com托管的jQuery.min.js，在天朝这样的网站是很没保障的。解决办法是修改source/_includes/head.html：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="err">将原来的</span><span class="nt">googleapis</span> <span class="nt">jquery</span><span class="err">库改为本地</span><span class="nt">jQuery</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;</span><span class="nt">script</span> <span class="nt">src</span><span class="o">=</span><span class="s2">&quot;/javascripts/libs/jquery.min.js&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">script</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>改完后手机上访问也基本可以秒杀了。</p>

<p>用GitHub + Octopress建立博客，过程虽然复杂了点，但最终效果相当不错，你值得拥有！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extjs 备忘录]]></title>
    <link href="http://blog.ubone.com/blog/2014/06/25/extjs-bei-wang-lu/"/>
    <updated>2014-06-25T12:13:29+08:00</updated>
    <id>http://blog.ubone.com/blog/2014/06/25/extjs-bei-wang-lu</id>
    <content type="html"><![CDATA[<p>今天改点老程序，用到了Extjs，记录一下遇到的问题和解决办法。</p>

<!--more-->


<h2>JavaScript字符串替换</h2>

<p>根据Ext文档，有多种替换方式。我想要不区分大小写的替换，而目前Extjs文档中提供的方法无效。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Extjs文档：</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;Apples are round, and apples are juicy.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">newstr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;apples&quot;</span><span class="p">,</span> <span class="s2">&quot;oranges&quot;</span><span class="p">,</span> <span class="s2">&quot;gi&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">newstr</span><span class="p">);</span>
</span><span class='line'><span class="c1">//！文档说结果为： &quot;oranges are round, and oranges are juicy.&quot;， </span>
</span></code></pre></td></tr></table></div></figure>


<p>但上面的代码并没有产生预期的效果，第一个Apples并没有被替换。改用以下方法实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">replaceIgnoreCase</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">searchStr</span><span class="p">,</span> <span class="nx">replaceStr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">searchStr</span><span class="p">,</span> <span class="s2">&quot;ig&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">regEx</span><span class="p">,</span> <span class="nx">replaceStr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_replaceIgnoreCase</span><span class="p">(</span><span class="s1">&#39;This iS IIS&#39;</span><span class="p">,</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;as&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//result为：Thas as Ias</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置Extjs Grid Panel的行高</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="nt">gridPanel</span><span class="err">的定义中：</span>
</span><span class='line'>
</span><span class='line'><span class="nt">viewConfig</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">getRowClass</span><span class="o">:</span> <span class="n">function</span> <span class="p">(</span><span class="n">record</span><span class="o">,</span> <span class="n">rowIndex</span><span class="o">,</span> <span class="n">rp</span><span class="o">,</span> <span class="n">store</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>    <span class="n">return</span> <span class="s2">&quot;grid-row-height&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span><span class="nt">CSS</span><span class="err">定义：</span>
</span><span class='line'><span class="nc">.grid-row-height</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">35px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置Extjs Grid 单元格中的文字自动换行</h2>

<p>Extjs gridPanel单元格的内容如果超出，默认是显示三个点，要想让它换行，其实很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="nt">gridPanel</span><span class="err">的定义，注意</span><span class="nt">tdCls</span>
</span><span class='line'><span class="nt">columns</span><span class="o">:</span> <span class="o">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">header</span><span class="o">:</span> <span class="s1">&#39;Sentence&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">dataIndex</span><span class="o">:</span> <span class="s1">&#39;sentence&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">flex</span><span class="o">:</span> <span class="m">2</span><span class="o">,</span>
</span><span class='line'>                <span class="n">renderer</span><span class="o">:</span> <span class="n">this</span><span class="o">.</span><span class="n">sentenceRenderer</span><span class="o">,</span>
</span><span class='line'>                <span class="n">tdCls</span><span class="o">:</span><span class="s1">&#39;wrap-text&#39;</span>
</span><span class='line'>            <span class="p">}</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">//</span><span class="nt">CSS</span><span class="err">定义</span>
</span><span class='line'><span class="nt">td</span><span class="nc">.wrap-text</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">white-space</span><span class="o">:</span> <span class="k">normal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置Extjs Grid 单元格中的文字换行后的行高</h2>

<p>Extjs gridPanel单元格的内容自动换行号，默认行高太小，只需将上面的CSS修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="nt">CSS</span><span class="err">定义</span>
</span><span class='line'><span class="nt">td</span><span class="nc">.wrap-text</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">white-space</span><span class="o">:</span> <span class="k">normal</span><span class="p">;</span>
</span><span class='line'>    <span class="k">line-height</span><span class="o">:</span> <span class="m">130</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span><span class="nt">130</span><span class="o">%</span><span class="err">表示</span><span class="nt">1</span><span class="nc">.3</span><span class="err">倍行高。</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
